
5_Interrupts.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b50  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08004ce0  08004ce0  00005ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d74  08004d74  00006088  2**0
                  CONTENTS
  4 .ARM          00000008  08004d74  08004d74  00005d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d7c  08004d7c  00006088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d7c  08004d7c  00005d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004d80  08004d80  00005d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08004d84  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000088  08004e0c  00006088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  08004e0c  0000628c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d3c4  00000000  00000000  000060b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021eb  00000000  00000000  0001347c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b28  00000000  00000000  00015668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000877  00000000  00000000  00016190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026b9b  00000000  00000000  00016a07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d956  00000000  00000000  0003d5a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e99a7  00000000  00000000  0004aef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013489f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033a8  00000000  00000000  001348e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00137c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004cc8 	.word	0x08004cc8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08004cc8 	.word	0x08004cc8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]

	if (ch == '\n') {
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	2b0a      	cmp	r3, #10
 800057c:	d102      	bne.n	8000584 <__io_putchar+0x14>
		__io_putchar('\r');
 800057e:	200d      	movs	r0, #13
 8000580:	f7ff fff6 	bl	8000570 <__io_putchar>
	}

	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000584:	1d39      	adds	r1, r7, #4
 8000586:	f04f 33ff 	mov.w	r3, #4294967295
 800058a:	2201      	movs	r2, #1
 800058c:	4803      	ldr	r0, [pc, #12]	@ (800059c <__io_putchar+0x2c>)
 800058e:	f002 fab1 	bl	8002af4 <HAL_UART_Transmit>

	return 1;
 8000592:	2301      	movs	r3, #1
}
 8000594:	4618      	mov	r0, r3
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	200000a4 	.word	0x200000a4

080005a0 <HAL_GPIO_EXTI_Callback>:
//stała, której wartość wynosi zero. Taki program nie działałby poprawnie. Użycie volatile sprawia
//, że optymalizator nie próbuje swoich sztuczek w odniesieniu do tej zmiennej.
volatile uint32_t push_counter;

//Obsługa przerwania od pinów (w naszym przypadku przycisk b1):
HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == USER_BUTTON_Pin) {
 80005aa:	88fb      	ldrh	r3, [r7, #6]
 80005ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80005b0:	d104      	bne.n	80005bc <HAL_GPIO_EXTI_Callback+0x1c>
		push_counter++;
 80005b2:	4b05      	ldr	r3, [pc, #20]	@ (80005c8 <HAL_GPIO_EXTI_Callback+0x28>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	3301      	adds	r3, #1
 80005b8:	4a03      	ldr	r2, [pc, #12]	@ (80005c8 <HAL_GPIO_EXTI_Callback+0x28>)
 80005ba:	6013      	str	r3, [r2, #0]
	}

}
 80005bc:	bf00      	nop
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr
 80005c8:	2000012c 	.word	0x2000012c

080005cc <send_text_message>:

sender_state message_number = MESSAGE_1;

void send_text_message(void) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0

	static char message[] = "Hello world!\r\n";
	static char message2[] = "Wiadomosc 2!\r\n";

	switch(message_number) {
 80005d0:	4b12      	ldr	r3, [pc, #72]	@ (800061c <send_text_message+0x50>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d002      	beq.n	80005de <send_text_message+0x12>
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d00e      	beq.n	80005fa <send_text_message+0x2e>
	case MESSAGE_2:
		HAL_UART_Transmit_IT(&huart2, (uint8_t*)message2, strlen(message2));
		message_number = 2;
		break;
	default:
		break;
 80005dc:	e01b      	b.n	8000616 <send_text_message+0x4a>
		HAL_UART_Transmit_IT(&huart2, (uint8_t*)message, strlen(message));
 80005de:	4810      	ldr	r0, [pc, #64]	@ (8000620 <send_text_message+0x54>)
 80005e0:	f7ff fdf6 	bl	80001d0 <strlen>
 80005e4:	4603      	mov	r3, r0
 80005e6:	b29b      	uxth	r3, r3
 80005e8:	461a      	mov	r2, r3
 80005ea:	490d      	ldr	r1, [pc, #52]	@ (8000620 <send_text_message+0x54>)
 80005ec:	480d      	ldr	r0, [pc, #52]	@ (8000624 <send_text_message+0x58>)
 80005ee:	f002 fb0b 	bl	8002c08 <HAL_UART_Transmit_IT>
		message_number = 1;
 80005f2:	4b0a      	ldr	r3, [pc, #40]	@ (800061c <send_text_message+0x50>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	701a      	strb	r2, [r3, #0]
		break;
 80005f8:	e00d      	b.n	8000616 <send_text_message+0x4a>
		HAL_UART_Transmit_IT(&huart2, (uint8_t*)message2, strlen(message2));
 80005fa:	480b      	ldr	r0, [pc, #44]	@ (8000628 <send_text_message+0x5c>)
 80005fc:	f7ff fde8 	bl	80001d0 <strlen>
 8000600:	4603      	mov	r3, r0
 8000602:	b29b      	uxth	r3, r3
 8000604:	461a      	mov	r2, r3
 8000606:	4908      	ldr	r1, [pc, #32]	@ (8000628 <send_text_message+0x5c>)
 8000608:	4806      	ldr	r0, [pc, #24]	@ (8000624 <send_text_message+0x58>)
 800060a:	f002 fafd 	bl	8002c08 <HAL_UART_Transmit_IT>
		message_number = 2;
 800060e:	4b03      	ldr	r3, [pc, #12]	@ (800061c <send_text_message+0x50>)
 8000610:	2202      	movs	r2, #2
 8000612:	701a      	strb	r2, [r3, #0]
		break;
 8000614:	bf00      	nop
	}
}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	20000130 	.word	0x20000130
 8000620:	20000000 	.word	0x20000000
 8000624:	200000a4 	.word	0x200000a4
 8000628:	20000010 	.word	0x20000010

0800062c <HAL_UART_TxCpltCallback>:

//Funkcja wywolywana po wyslaniu danych przez UART:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]

	if(huart == &huart2) {
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4a04      	ldr	r2, [pc, #16]	@ (8000648 <HAL_UART_TxCpltCallback+0x1c>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d101      	bne.n	8000640 <HAL_UART_TxCpltCallback+0x14>
		send_text_message();
 800063c:	f7ff ffc6 	bl	80005cc <send_text_message>
	}

}
 8000640:	bf00      	nop
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	200000a4 	.word	0x200000a4

0800064c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000652:	f000 fac8 	bl	8000be6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000656:	f000 f81b 	bl	8000690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065a:	f000 f8ab 	bl	80007b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800065e:	f000 f879 	bl	8000754 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //Rozpoczecie transmisji przez UART z przerwaniamiL
  send_text_message();
 8000662:	f7ff ffb3 	bl	80005cc <send_text_message>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t old_push_counter = push_counter;
 8000666:	4b08      	ldr	r3, [pc, #32]	@ (8000688 <main+0x3c>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	607b      	str	r3, [r7, #4]
  while (1)
  {
	  if(push_counter != old_push_counter) {
 800066c:	4b06      	ldr	r3, [pc, #24]	@ (8000688 <main+0x3c>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	687a      	ldr	r2, [r7, #4]
 8000672:	429a      	cmp	r2, r3
 8000674:	d0fa      	beq.n	800066c <main+0x20>
		  old_push_counter = push_counter;
 8000676:	4b04      	ldr	r3, [pc, #16]	@ (8000688 <main+0x3c>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	607b      	str	r3, [r7, #4]
		  printf("button counter: %lu\n", old_push_counter);
 800067c:	6879      	ldr	r1, [r7, #4]
 800067e:	4803      	ldr	r0, [pc, #12]	@ (800068c <main+0x40>)
 8000680:	f003 fcb4 	bl	8003fec <iprintf>
	  if(push_counter != old_push_counter) {
 8000684:	e7f2      	b.n	800066c <main+0x20>
 8000686:	bf00      	nop
 8000688:	2000012c 	.word	0x2000012c
 800068c:	08004ce0 	.word	0x08004ce0

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b096      	sub	sp, #88	@ 0x58
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	2244      	movs	r2, #68	@ 0x44
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f003 fcf9 	bl	8004096 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a4:	463b      	mov	r3, r7
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
 80006b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006b2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006b6:	f000 fead 	bl	8001414 <HAL_PWREx_ControlVoltageScaling>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006c0:	f000 f8ce 	bl	8000860 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006c4:	f000 fe88 	bl	80013d8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006c8:	4b21      	ldr	r3, [pc, #132]	@ (8000750 <SystemClock_Config+0xc0>)
 80006ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80006ce:	4a20      	ldr	r2, [pc, #128]	@ (8000750 <SystemClock_Config+0xc0>)
 80006d0:	f023 0318 	bic.w	r3, r3, #24
 80006d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80006d8:	2314      	movs	r3, #20
 80006da:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006dc:	2301      	movs	r3, #1
 80006de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006e0:	2301      	movs	r3, #1
 80006e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006e8:	2360      	movs	r3, #96	@ 0x60
 80006ea:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ec:	2302      	movs	r3, #2
 80006ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006f0:	2301      	movs	r3, #1
 80006f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006f4:	2301      	movs	r3, #1
 80006f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80006f8:	2328      	movs	r3, #40	@ 0x28
 80006fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006fc:	2307      	movs	r3, #7
 80006fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000700:	2302      	movs	r3, #2
 8000702:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000704:	2302      	movs	r3, #2
 8000706:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000708:	f107 0314 	add.w	r3, r7, #20
 800070c:	4618      	mov	r0, r3
 800070e:	f000 fed7 	bl	80014c0 <HAL_RCC_OscConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000718:	f000 f8a2 	bl	8000860 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071c:	230f      	movs	r3, #15
 800071e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000720:	2303      	movs	r3, #3
 8000722:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000730:	463b      	mov	r3, r7
 8000732:	2104      	movs	r1, #4
 8000734:	4618      	mov	r0, r3
 8000736:	f001 fa9f 	bl	8001c78 <HAL_RCC_ClockConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000740:	f000 f88e 	bl	8000860 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000744:	f001 ffa6 	bl	8002694 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000748:	bf00      	nop
 800074a:	3758      	adds	r7, #88	@ 0x58
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40021000 	.word	0x40021000

08000754 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000758:	4b14      	ldr	r3, [pc, #80]	@ (80007ac <MX_USART2_UART_Init+0x58>)
 800075a:	4a15      	ldr	r2, [pc, #84]	@ (80007b0 <MX_USART2_UART_Init+0x5c>)
 800075c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800075e:	4b13      	ldr	r3, [pc, #76]	@ (80007ac <MX_USART2_UART_Init+0x58>)
 8000760:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000764:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000766:	4b11      	ldr	r3, [pc, #68]	@ (80007ac <MX_USART2_UART_Init+0x58>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800076c:	4b0f      	ldr	r3, [pc, #60]	@ (80007ac <MX_USART2_UART_Init+0x58>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000772:	4b0e      	ldr	r3, [pc, #56]	@ (80007ac <MX_USART2_UART_Init+0x58>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000778:	4b0c      	ldr	r3, [pc, #48]	@ (80007ac <MX_USART2_UART_Init+0x58>)
 800077a:	220c      	movs	r2, #12
 800077c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077e:	4b0b      	ldr	r3, [pc, #44]	@ (80007ac <MX_USART2_UART_Init+0x58>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000784:	4b09      	ldr	r3, [pc, #36]	@ (80007ac <MX_USART2_UART_Init+0x58>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800078a:	4b08      	ldr	r3, [pc, #32]	@ (80007ac <MX_USART2_UART_Init+0x58>)
 800078c:	2200      	movs	r2, #0
 800078e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000790:	4b06      	ldr	r3, [pc, #24]	@ (80007ac <MX_USART2_UART_Init+0x58>)
 8000792:	2200      	movs	r2, #0
 8000794:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000796:	4805      	ldr	r0, [pc, #20]	@ (80007ac <MX_USART2_UART_Init+0x58>)
 8000798:	f002 f95e 	bl	8002a58 <HAL_UART_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007a2:	f000 f85d 	bl	8000860 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	200000a4 	.word	0x200000a4
 80007b0:	40004400 	.word	0x40004400

080007b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b088      	sub	sp, #32
 80007b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ba:	f107 030c 	add.w	r3, r7, #12
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
 80007c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ca:	4b23      	ldr	r3, [pc, #140]	@ (8000858 <MX_GPIO_Init+0xa4>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ce:	4a22      	ldr	r2, [pc, #136]	@ (8000858 <MX_GPIO_Init+0xa4>)
 80007d0:	f043 0304 	orr.w	r3, r3, #4
 80007d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007d6:	4b20      	ldr	r3, [pc, #128]	@ (8000858 <MX_GPIO_Init+0xa4>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007da:	f003 0304 	and.w	r3, r3, #4
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000858 <MX_GPIO_Init+0xa4>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e6:	4a1c      	ldr	r2, [pc, #112]	@ (8000858 <MX_GPIO_Init+0xa4>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000858 <MX_GPIO_Init+0xa4>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2120      	movs	r1, #32
 80007fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000802:	f000 fd9f 	bl	8001344 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000806:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800080a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800080c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000810:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000816:	f107 030c 	add.w	r3, r7, #12
 800081a:	4619      	mov	r1, r3
 800081c:	480f      	ldr	r0, [pc, #60]	@ (800085c <MX_GPIO_Init+0xa8>)
 800081e:	f000 fbe7 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000822:	2320      	movs	r3, #32
 8000824:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000826:	2301      	movs	r3, #1
 8000828:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000832:	f107 030c 	add.w	r3, r7, #12
 8000836:	4619      	mov	r1, r3
 8000838:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800083c:	f000 fbd8 	bl	8000ff0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 8, 0);
 8000840:	2200      	movs	r2, #0
 8000842:	2108      	movs	r1, #8
 8000844:	2028      	movs	r0, #40	@ 0x28
 8000846:	f000 fb1e 	bl	8000e86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800084a:	2028      	movs	r0, #40	@ 0x28
 800084c:	f000 fb37 	bl	8000ebe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000850:	bf00      	nop
 8000852:	3720      	adds	r7, #32
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40021000 	.word	0x40021000
 800085c:	48000800 	.word	0x48000800

08000860 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000864:	b672      	cpsid	i
}
 8000866:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000868:	bf00      	nop
 800086a:	e7fd      	b.n	8000868 <Error_Handler+0x8>

0800086c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000872:	4b0f      	ldr	r3, [pc, #60]	@ (80008b0 <HAL_MspInit+0x44>)
 8000874:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000876:	4a0e      	ldr	r2, [pc, #56]	@ (80008b0 <HAL_MspInit+0x44>)
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	6613      	str	r3, [r2, #96]	@ 0x60
 800087e:	4b0c      	ldr	r3, [pc, #48]	@ (80008b0 <HAL_MspInit+0x44>)
 8000880:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800088a:	4b09      	ldr	r3, [pc, #36]	@ (80008b0 <HAL_MspInit+0x44>)
 800088c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800088e:	4a08      	ldr	r2, [pc, #32]	@ (80008b0 <HAL_MspInit+0x44>)
 8000890:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000894:	6593      	str	r3, [r2, #88]	@ 0x58
 8000896:	4b06      	ldr	r3, [pc, #24]	@ (80008b0 <HAL_MspInit+0x44>)
 8000898:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800089a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a2:	bf00      	nop
 80008a4:	370c      	adds	r7, #12
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	40021000 	.word	0x40021000

080008b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b0ac      	sub	sp, #176	@ 0xb0
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008bc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	2288      	movs	r2, #136	@ 0x88
 80008d2:	2100      	movs	r1, #0
 80008d4:	4618      	mov	r0, r3
 80008d6:	f003 fbde 	bl	8004096 <memset>
  if(huart->Instance==USART2)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a25      	ldr	r2, [pc, #148]	@ (8000974 <HAL_UART_MspInit+0xc0>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d143      	bne.n	800096c <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008e4:	2302      	movs	r3, #2
 80008e6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008e8:	2300      	movs	r3, #0
 80008ea:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	4618      	mov	r0, r3
 80008f2:	f001 fbe5 	bl	80020c0 <HAL_RCCEx_PeriphCLKConfig>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008fc:	f7ff ffb0 	bl	8000860 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000900:	4b1d      	ldr	r3, [pc, #116]	@ (8000978 <HAL_UART_MspInit+0xc4>)
 8000902:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000904:	4a1c      	ldr	r2, [pc, #112]	@ (8000978 <HAL_UART_MspInit+0xc4>)
 8000906:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800090a:	6593      	str	r3, [r2, #88]	@ 0x58
 800090c:	4b1a      	ldr	r3, [pc, #104]	@ (8000978 <HAL_UART_MspInit+0xc4>)
 800090e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000910:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000914:	613b      	str	r3, [r7, #16]
 8000916:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000918:	4b17      	ldr	r3, [pc, #92]	@ (8000978 <HAL_UART_MspInit+0xc4>)
 800091a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800091c:	4a16      	ldr	r2, [pc, #88]	@ (8000978 <HAL_UART_MspInit+0xc4>)
 800091e:	f043 0301 	orr.w	r3, r3, #1
 8000922:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000924:	4b14      	ldr	r3, [pc, #80]	@ (8000978 <HAL_UART_MspInit+0xc4>)
 8000926:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000928:	f003 0301 	and.w	r3, r3, #1
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000930:	230c      	movs	r3, #12
 8000932:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000936:	2302      	movs	r3, #2
 8000938:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000942:	2303      	movs	r3, #3
 8000944:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000948:	2307      	movs	r3, #7
 800094a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000952:	4619      	mov	r1, r3
 8000954:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000958:	f000 fb4a 	bl	8000ff0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 12, 0);
 800095c:	2200      	movs	r2, #0
 800095e:	210c      	movs	r1, #12
 8000960:	2026      	movs	r0, #38	@ 0x26
 8000962:	f000 fa90 	bl	8000e86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000966:	2026      	movs	r0, #38	@ 0x26
 8000968:	f000 faa9 	bl	8000ebe <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800096c:	bf00      	nop
 800096e:	37b0      	adds	r7, #176	@ 0xb0
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40004400 	.word	0x40004400
 8000978:	40021000 	.word	0x40021000

0800097c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <NMI_Handler+0x4>

08000984 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000988:	bf00      	nop
 800098a:	e7fd      	b.n	8000988 <HardFault_Handler+0x4>

0800098c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000990:	bf00      	nop
 8000992:	e7fd      	b.n	8000990 <MemManage_Handler+0x4>

08000994 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000998:	bf00      	nop
 800099a:	e7fd      	b.n	8000998 <BusFault_Handler+0x4>

0800099c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a0:	bf00      	nop
 80009a2:	e7fd      	b.n	80009a0 <UsageFault_Handler+0x4>

080009a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr

080009b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
	...

080009d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  //modyfikator static oznacza ze wartosc zmiennej bedzie zachowana pomiedzy kolejnymi definicjami
  //tej samej zmiennej. Oznacza to że zmienna lokalna nie traci wartosci przy ponownym wywolaniu
  //funkcji.
	static int clk_div;
	clk_div++;
 80009d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000a00 <SysTick_Handler+0x30>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	3301      	adds	r3, #1
 80009da:	4a09      	ldr	r2, [pc, #36]	@ (8000a00 <SysTick_Handler+0x30>)
 80009dc:	6013      	str	r3, [r2, #0]
	if (clk_div >= 100) {
 80009de:	4b08      	ldr	r3, [pc, #32]	@ (8000a00 <SysTick_Handler+0x30>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	2b63      	cmp	r3, #99	@ 0x63
 80009e4:	dd07      	ble.n	80009f6 <SysTick_Handler+0x26>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80009e6:	2120      	movs	r1, #32
 80009e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009ec:	f000 fcc2 	bl	8001374 <HAL_GPIO_TogglePin>
		clk_div = 0;
 80009f0:	4b03      	ldr	r3, [pc, #12]	@ (8000a00 <SysTick_Handler+0x30>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f6:	f000 f94b 	bl	8000c90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20000134 	.word	0x20000134

08000a04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a08:	4802      	ldr	r0, [pc, #8]	@ (8000a14 <USART2_IRQHandler+0x10>)
 8000a0a:	f002 f95b 	bl	8002cc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	200000a4 	.word	0x200000a4

08000a18 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 8000a1c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000a20:	f000 fcc2 	bl	80013a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]
 8000a38:	e00a      	b.n	8000a50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a3a:	f3af 8000 	nop.w
 8000a3e:	4601      	mov	r1, r0
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	1c5a      	adds	r2, r3, #1
 8000a44:	60ba      	str	r2, [r7, #8]
 8000a46:	b2ca      	uxtb	r2, r1
 8000a48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	617b      	str	r3, [r7, #20]
 8000a50:	697a      	ldr	r2, [r7, #20]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	dbf0      	blt.n	8000a3a <_read+0x12>
  }

  return len;
 8000a58:	687b      	ldr	r3, [r7, #4]
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3718      	adds	r7, #24
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b086      	sub	sp, #24
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	60f8      	str	r0, [r7, #12]
 8000a6a:	60b9      	str	r1, [r7, #8]
 8000a6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a6e:	2300      	movs	r3, #0
 8000a70:	617b      	str	r3, [r7, #20]
 8000a72:	e009      	b.n	8000a88 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	1c5a      	adds	r2, r3, #1
 8000a78:	60ba      	str	r2, [r7, #8]
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff fd77 	bl	8000570 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	3301      	adds	r3, #1
 8000a86:	617b      	str	r3, [r7, #20]
 8000a88:	697a      	ldr	r2, [r7, #20]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	dbf1      	blt.n	8000a74 <_write+0x12>
  }
  return len;
 8000a90:	687b      	ldr	r3, [r7, #4]
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3718      	adds	r7, #24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <_close>:

int _close(int file)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	b083      	sub	sp, #12
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000aa2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	b083      	sub	sp, #12
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
 8000aba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ac2:	605a      	str	r2, [r3, #4]
  return 0;
 8000ac4:	2300      	movs	r3, #0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <_isatty>:

int _isatty(int file)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	b083      	sub	sp, #12
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ada:	2301      	movs	r3, #1
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000af4:	2300      	movs	r3, #0
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3714      	adds	r7, #20
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
	...

08000b04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b0c:	4a14      	ldr	r2, [pc, #80]	@ (8000b60 <_sbrk+0x5c>)
 8000b0e:	4b15      	ldr	r3, [pc, #84]	@ (8000b64 <_sbrk+0x60>)
 8000b10:	1ad3      	subs	r3, r2, r3
 8000b12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b18:	4b13      	ldr	r3, [pc, #76]	@ (8000b68 <_sbrk+0x64>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d102      	bne.n	8000b26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b20:	4b11      	ldr	r3, [pc, #68]	@ (8000b68 <_sbrk+0x64>)
 8000b22:	4a12      	ldr	r2, [pc, #72]	@ (8000b6c <_sbrk+0x68>)
 8000b24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b26:	4b10      	ldr	r3, [pc, #64]	@ (8000b68 <_sbrk+0x64>)
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d207      	bcs.n	8000b44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b34:	f003 fafe 	bl	8004134 <__errno>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	220c      	movs	r2, #12
 8000b3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b42:	e009      	b.n	8000b58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b44:	4b08      	ldr	r3, [pc, #32]	@ (8000b68 <_sbrk+0x64>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b4a:	4b07      	ldr	r3, [pc, #28]	@ (8000b68 <_sbrk+0x64>)
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4413      	add	r3, r2
 8000b52:	4a05      	ldr	r2, [pc, #20]	@ (8000b68 <_sbrk+0x64>)
 8000b54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b56:	68fb      	ldr	r3, [r7, #12]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3718      	adds	r7, #24
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20018000 	.word	0x20018000
 8000b64:	00000400 	.word	0x00000400
 8000b68:	20000138 	.word	0x20000138
 8000b6c:	20000290 	.word	0x20000290

08000b70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b74:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <SystemInit+0x20>)
 8000b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b7a:	4a05      	ldr	r2, [pc, #20]	@ (8000b90 <SystemInit+0x20>)
 8000b7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bcc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b98:	f7ff ffea 	bl	8000b70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b9c:	480c      	ldr	r0, [pc, #48]	@ (8000bd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b9e:	490d      	ldr	r1, [pc, #52]	@ (8000bd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ba0:	4a0d      	ldr	r2, [pc, #52]	@ (8000bd8 <LoopForever+0xe>)
  movs r3, #0
 8000ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba4:	e002      	b.n	8000bac <LoopCopyDataInit>

08000ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000baa:	3304      	adds	r3, #4

08000bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb0:	d3f9      	bcc.n	8000ba6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bdc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bb4:	4c0a      	ldr	r4, [pc, #40]	@ (8000be0 <LoopForever+0x16>)
  movs r3, #0
 8000bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb8:	e001      	b.n	8000bbe <LoopFillZerobss>

08000bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bbc:	3204      	adds	r2, #4

08000bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc0:	d3fb      	bcc.n	8000bba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bc2:	f003 fabd 	bl	8004140 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bc6:	f7ff fd41 	bl	800064c <main>

08000bca <LoopForever>:

LoopForever:
    b LoopForever
 8000bca:	e7fe      	b.n	8000bca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bcc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000bd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000bd8:	08004d84 	.word	0x08004d84
  ldr r2, =_sbss
 8000bdc:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000be0:	2000028c 	.word	0x2000028c

08000be4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000be4:	e7fe      	b.n	8000be4 <ADC1_2_IRQHandler>

08000be6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b082      	sub	sp, #8
 8000bea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bec:	2300      	movs	r3, #0
 8000bee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf0:	2003      	movs	r0, #3
 8000bf2:	f000 f93d 	bl	8000e70 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bf6:	2000      	movs	r0, #0
 8000bf8:	f000 f80e 	bl	8000c18 <HAL_InitTick>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d002      	beq.n	8000c08 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
 8000c04:	71fb      	strb	r3, [r7, #7]
 8000c06:	e001      	b.n	8000c0c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c08:	f7ff fe30 	bl	800086c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
	...

08000c18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c20:	2300      	movs	r3, #0
 8000c22:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c24:	4b17      	ldr	r3, [pc, #92]	@ (8000c84 <HAL_InitTick+0x6c>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d023      	beq.n	8000c74 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c2c:	4b16      	ldr	r3, [pc, #88]	@ (8000c88 <HAL_InitTick+0x70>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	4b14      	ldr	r3, [pc, #80]	@ (8000c84 <HAL_InitTick+0x6c>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	4619      	mov	r1, r3
 8000c36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c42:	4618      	mov	r0, r3
 8000c44:	f000 f949 	bl	8000eda <HAL_SYSTICK_Config>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d10f      	bne.n	8000c6e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2b0f      	cmp	r3, #15
 8000c52:	d809      	bhi.n	8000c68 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c54:	2200      	movs	r2, #0
 8000c56:	6879      	ldr	r1, [r7, #4]
 8000c58:	f04f 30ff 	mov.w	r0, #4294967295
 8000c5c:	f000 f913 	bl	8000e86 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c60:	4a0a      	ldr	r2, [pc, #40]	@ (8000c8c <HAL_InitTick+0x74>)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6013      	str	r3, [r2, #0]
 8000c66:	e007      	b.n	8000c78 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	73fb      	strb	r3, [r7, #15]
 8000c6c:	e004      	b.n	8000c78 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	73fb      	strb	r3, [r7, #15]
 8000c72:	e001      	b.n	8000c78 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c74:	2301      	movs	r3, #1
 8000c76:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000028 	.word	0x20000028
 8000c88:	20000020 	.word	0x20000020
 8000c8c:	20000024 	.word	0x20000024

08000c90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c94:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <HAL_IncTick+0x20>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4b06      	ldr	r3, [pc, #24]	@ (8000cb4 <HAL_IncTick+0x24>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	4a04      	ldr	r2, [pc, #16]	@ (8000cb4 <HAL_IncTick+0x24>)
 8000ca2:	6013      	str	r3, [r2, #0]
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	20000028 	.word	0x20000028
 8000cb4:	2000013c 	.word	0x2000013c

08000cb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  return uwTick;
 8000cbc:	4b03      	ldr	r3, [pc, #12]	@ (8000ccc <HAL_GetTick+0x14>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	2000013c 	.word	0x2000013c

08000cd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	f003 0307 	and.w	r3, r3, #7
 8000cde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8000d14 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ce6:	68ba      	ldr	r2, [r7, #8]
 8000ce8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cec:	4013      	ands	r3, r2
 8000cee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cf8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d02:	4a04      	ldr	r2, [pc, #16]	@ (8000d14 <__NVIC_SetPriorityGrouping+0x44>)
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	60d3      	str	r3, [r2, #12]
}
 8000d08:	bf00      	nop
 8000d0a:	3714      	adds	r7, #20
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d1c:	4b04      	ldr	r3, [pc, #16]	@ (8000d30 <__NVIC_GetPriorityGrouping+0x18>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	0a1b      	lsrs	r3, r3, #8
 8000d22:	f003 0307 	and.w	r3, r3, #7
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	db0b      	blt.n	8000d5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	f003 021f 	and.w	r2, r3, #31
 8000d4c:	4907      	ldr	r1, [pc, #28]	@ (8000d6c <__NVIC_EnableIRQ+0x38>)
 8000d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d52:	095b      	lsrs	r3, r3, #5
 8000d54:	2001      	movs	r0, #1
 8000d56:	fa00 f202 	lsl.w	r2, r0, r2
 8000d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d5e:	bf00      	nop
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	e000e100 	.word	0xe000e100

08000d70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	6039      	str	r1, [r7, #0]
 8000d7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	db0a      	blt.n	8000d9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	b2da      	uxtb	r2, r3
 8000d88:	490c      	ldr	r1, [pc, #48]	@ (8000dbc <__NVIC_SetPriority+0x4c>)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	0112      	lsls	r2, r2, #4
 8000d90:	b2d2      	uxtb	r2, r2
 8000d92:	440b      	add	r3, r1
 8000d94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d98:	e00a      	b.n	8000db0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	4908      	ldr	r1, [pc, #32]	@ (8000dc0 <__NVIC_SetPriority+0x50>)
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	f003 030f 	and.w	r3, r3, #15
 8000da6:	3b04      	subs	r3, #4
 8000da8:	0112      	lsls	r2, r2, #4
 8000daa:	b2d2      	uxtb	r2, r2
 8000dac:	440b      	add	r3, r1
 8000dae:	761a      	strb	r2, [r3, #24]
}
 8000db0:	bf00      	nop
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000e100 	.word	0xe000e100
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b089      	sub	sp, #36	@ 0x24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	f003 0307 	and.w	r3, r3, #7
 8000dd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	f1c3 0307 	rsb	r3, r3, #7
 8000dde:	2b04      	cmp	r3, #4
 8000de0:	bf28      	it	cs
 8000de2:	2304      	movcs	r3, #4
 8000de4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	3304      	adds	r3, #4
 8000dea:	2b06      	cmp	r3, #6
 8000dec:	d902      	bls.n	8000df4 <NVIC_EncodePriority+0x30>
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	3b03      	subs	r3, #3
 8000df2:	e000      	b.n	8000df6 <NVIC_EncodePriority+0x32>
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	43da      	mvns	r2, r3
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	401a      	ands	r2, r3
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	fa01 f303 	lsl.w	r3, r1, r3
 8000e16:	43d9      	mvns	r1, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e1c:	4313      	orrs	r3, r2
         );
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3724      	adds	r7, #36	@ 0x24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
	...

08000e2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3b01      	subs	r3, #1
 8000e38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e3c:	d301      	bcc.n	8000e42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e00f      	b.n	8000e62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e42:	4a0a      	ldr	r2, [pc, #40]	@ (8000e6c <SysTick_Config+0x40>)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	3b01      	subs	r3, #1
 8000e48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e4a:	210f      	movs	r1, #15
 8000e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e50:	f7ff ff8e 	bl	8000d70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e54:	4b05      	ldr	r3, [pc, #20]	@ (8000e6c <SysTick_Config+0x40>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e5a:	4b04      	ldr	r3, [pc, #16]	@ (8000e6c <SysTick_Config+0x40>)
 8000e5c:	2207      	movs	r2, #7
 8000e5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	e000e010 	.word	0xe000e010

08000e70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	f7ff ff29 	bl	8000cd0 <__NVIC_SetPriorityGrouping>
}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b086      	sub	sp, #24
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	60b9      	str	r1, [r7, #8]
 8000e90:	607a      	str	r2, [r7, #4]
 8000e92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e98:	f7ff ff3e 	bl	8000d18 <__NVIC_GetPriorityGrouping>
 8000e9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	68b9      	ldr	r1, [r7, #8]
 8000ea2:	6978      	ldr	r0, [r7, #20]
 8000ea4:	f7ff ff8e 	bl	8000dc4 <NVIC_EncodePriority>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eae:	4611      	mov	r1, r2
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff ff5d 	bl	8000d70 <__NVIC_SetPriority>
}
 8000eb6:	bf00      	nop
 8000eb8:	3718      	adds	r7, #24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff ff31 	bl	8000d34 <__NVIC_EnableIRQ>
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b082      	sub	sp, #8
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f7ff ffa2 	bl	8000e2c <SysTick_Config>
 8000ee8:	4603      	mov	r3, r0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	b085      	sub	sp, #20
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000efa:	2300      	movs	r3, #0
 8000efc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d008      	beq.n	8000f1c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2204      	movs	r2, #4
 8000f0e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2200      	movs	r2, #0
 8000f14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e022      	b.n	8000f62 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f022 020e 	bic.w	r2, r2, #14
 8000f2a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f022 0201 	bic.w	r2, r2, #1
 8000f3a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f40:	f003 021c 	and.w	r2, r3, #28
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f48:	2101      	movs	r1, #1
 8000f4a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f4e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2201      	movs	r2, #1
 8000f54:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3714      	adds	r7, #20
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b084      	sub	sp, #16
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f76:	2300      	movs	r3, #0
 8000f78:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	d005      	beq.n	8000f92 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2204      	movs	r2, #4
 8000f8a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	73fb      	strb	r3, [r7, #15]
 8000f90:	e029      	b.n	8000fe6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f022 020e 	bic.w	r2, r2, #14
 8000fa0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f022 0201 	bic.w	r2, r2, #1
 8000fb0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fb6:	f003 021c 	and.w	r2, r3, #28
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	fa01 f202 	lsl.w	r2, r1, r2
 8000fc4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2201      	movs	r2, #1
 8000fca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d003      	beq.n	8000fe6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	4798      	blx	r3
    }
  }
  return status;
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b087      	sub	sp, #28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ffe:	e17f      	b.n	8001300 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	2101      	movs	r1, #1
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	fa01 f303 	lsl.w	r3, r1, r3
 800100c:	4013      	ands	r3, r2
 800100e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	2b00      	cmp	r3, #0
 8001014:	f000 8171 	beq.w	80012fa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f003 0303 	and.w	r3, r3, #3
 8001020:	2b01      	cmp	r3, #1
 8001022:	d005      	beq.n	8001030 <HAL_GPIO_Init+0x40>
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f003 0303 	and.w	r3, r3, #3
 800102c:	2b02      	cmp	r3, #2
 800102e:	d130      	bne.n	8001092 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	2203      	movs	r2, #3
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	43db      	mvns	r3, r3
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	4013      	ands	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	68da      	ldr	r2, [r3, #12]
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	4313      	orrs	r3, r2
 8001058:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001066:	2201      	movs	r2, #1
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43db      	mvns	r3, r3
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	4013      	ands	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	091b      	lsrs	r3, r3, #4
 800107c:	f003 0201 	and.w	r2, r3, #1
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4313      	orrs	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f003 0303 	and.w	r3, r3, #3
 800109a:	2b03      	cmp	r3, #3
 800109c:	d118      	bne.n	80010d0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80010a4:	2201      	movs	r2, #1
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4013      	ands	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	08db      	lsrs	r3, r3, #3
 80010ba:	f003 0201 	and.w	r2, r3, #1
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f003 0303 	and.w	r3, r3, #3
 80010d8:	2b03      	cmp	r3, #3
 80010da:	d017      	beq.n	800110c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	2203      	movs	r2, #3
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	4013      	ands	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	689a      	ldr	r2, [r3, #8]
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	4313      	orrs	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f003 0303 	and.w	r3, r3, #3
 8001114:	2b02      	cmp	r3, #2
 8001116:	d123      	bne.n	8001160 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	08da      	lsrs	r2, r3, #3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3208      	adds	r2, #8
 8001120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001124:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	f003 0307 	and.w	r3, r3, #7
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	220f      	movs	r2, #15
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4013      	ands	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	691a      	ldr	r2, [r3, #16]
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	4313      	orrs	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	08da      	lsrs	r2, r3, #3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	3208      	adds	r2, #8
 800115a:	6939      	ldr	r1, [r7, #16]
 800115c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	2203      	movs	r2, #3
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	43db      	mvns	r3, r3
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	4013      	ands	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f003 0203 	and.w	r2, r3, #3
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	4313      	orrs	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800119c:	2b00      	cmp	r3, #0
 800119e:	f000 80ac 	beq.w	80012fa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a2:	4b5f      	ldr	r3, [pc, #380]	@ (8001320 <HAL_GPIO_Init+0x330>)
 80011a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011a6:	4a5e      	ldr	r2, [pc, #376]	@ (8001320 <HAL_GPIO_Init+0x330>)
 80011a8:	f043 0301 	orr.w	r3, r3, #1
 80011ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80011ae:	4b5c      	ldr	r3, [pc, #368]	@ (8001320 <HAL_GPIO_Init+0x330>)
 80011b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	60bb      	str	r3, [r7, #8]
 80011b8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011ba:	4a5a      	ldr	r2, [pc, #360]	@ (8001324 <HAL_GPIO_Init+0x334>)
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	089b      	lsrs	r3, r3, #2
 80011c0:	3302      	adds	r3, #2
 80011c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	f003 0303 	and.w	r3, r3, #3
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	220f      	movs	r2, #15
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43db      	mvns	r3, r3
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	4013      	ands	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80011e4:	d025      	beq.n	8001232 <HAL_GPIO_Init+0x242>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a4f      	ldr	r2, [pc, #316]	@ (8001328 <HAL_GPIO_Init+0x338>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d01f      	beq.n	800122e <HAL_GPIO_Init+0x23e>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a4e      	ldr	r2, [pc, #312]	@ (800132c <HAL_GPIO_Init+0x33c>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d019      	beq.n	800122a <HAL_GPIO_Init+0x23a>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a4d      	ldr	r2, [pc, #308]	@ (8001330 <HAL_GPIO_Init+0x340>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d013      	beq.n	8001226 <HAL_GPIO_Init+0x236>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a4c      	ldr	r2, [pc, #304]	@ (8001334 <HAL_GPIO_Init+0x344>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d00d      	beq.n	8001222 <HAL_GPIO_Init+0x232>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a4b      	ldr	r2, [pc, #300]	@ (8001338 <HAL_GPIO_Init+0x348>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d007      	beq.n	800121e <HAL_GPIO_Init+0x22e>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a4a      	ldr	r2, [pc, #296]	@ (800133c <HAL_GPIO_Init+0x34c>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d101      	bne.n	800121a <HAL_GPIO_Init+0x22a>
 8001216:	2306      	movs	r3, #6
 8001218:	e00c      	b.n	8001234 <HAL_GPIO_Init+0x244>
 800121a:	2307      	movs	r3, #7
 800121c:	e00a      	b.n	8001234 <HAL_GPIO_Init+0x244>
 800121e:	2305      	movs	r3, #5
 8001220:	e008      	b.n	8001234 <HAL_GPIO_Init+0x244>
 8001222:	2304      	movs	r3, #4
 8001224:	e006      	b.n	8001234 <HAL_GPIO_Init+0x244>
 8001226:	2303      	movs	r3, #3
 8001228:	e004      	b.n	8001234 <HAL_GPIO_Init+0x244>
 800122a:	2302      	movs	r3, #2
 800122c:	e002      	b.n	8001234 <HAL_GPIO_Init+0x244>
 800122e:	2301      	movs	r3, #1
 8001230:	e000      	b.n	8001234 <HAL_GPIO_Init+0x244>
 8001232:	2300      	movs	r3, #0
 8001234:	697a      	ldr	r2, [r7, #20]
 8001236:	f002 0203 	and.w	r2, r2, #3
 800123a:	0092      	lsls	r2, r2, #2
 800123c:	4093      	lsls	r3, r2
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	4313      	orrs	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001244:	4937      	ldr	r1, [pc, #220]	@ (8001324 <HAL_GPIO_Init+0x334>)
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	089b      	lsrs	r3, r3, #2
 800124a:	3302      	adds	r3, #2
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001252:	4b3b      	ldr	r3, [pc, #236]	@ (8001340 <HAL_GPIO_Init+0x350>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	43db      	mvns	r3, r3
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	4013      	ands	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4313      	orrs	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001276:	4a32      	ldr	r2, [pc, #200]	@ (8001340 <HAL_GPIO_Init+0x350>)
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800127c:	4b30      	ldr	r3, [pc, #192]	@ (8001340 <HAL_GPIO_Init+0x350>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	43db      	mvns	r3, r3
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	4013      	ands	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d003      	beq.n	80012a0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	4313      	orrs	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012a0:	4a27      	ldr	r2, [pc, #156]	@ (8001340 <HAL_GPIO_Init+0x350>)
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80012a6:	4b26      	ldr	r3, [pc, #152]	@ (8001340 <HAL_GPIO_Init+0x350>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	43db      	mvns	r3, r3
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	4013      	ands	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012ca:	4a1d      	ldr	r2, [pc, #116]	@ (8001340 <HAL_GPIO_Init+0x350>)
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80012d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001340 <HAL_GPIO_Init+0x350>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	43db      	mvns	r3, r3
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	4013      	ands	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d003      	beq.n	80012f4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012f4:	4a12      	ldr	r2, [pc, #72]	@ (8001340 <HAL_GPIO_Init+0x350>)
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	3301      	adds	r3, #1
 80012fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	fa22 f303 	lsr.w	r3, r2, r3
 800130a:	2b00      	cmp	r3, #0
 800130c:	f47f ae78 	bne.w	8001000 <HAL_GPIO_Init+0x10>
  }
}
 8001310:	bf00      	nop
 8001312:	bf00      	nop
 8001314:	371c      	adds	r7, #28
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	40021000 	.word	0x40021000
 8001324:	40010000 	.word	0x40010000
 8001328:	48000400 	.word	0x48000400
 800132c:	48000800 	.word	0x48000800
 8001330:	48000c00 	.word	0x48000c00
 8001334:	48001000 	.word	0x48001000
 8001338:	48001400 	.word	0x48001400
 800133c:	48001800 	.word	0x48001800
 8001340:	40010400 	.word	0x40010400

08001344 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	460b      	mov	r3, r1
 800134e:	807b      	strh	r3, [r7, #2]
 8001350:	4613      	mov	r3, r2
 8001352:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001354:	787b      	ldrb	r3, [r7, #1]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800135a:	887a      	ldrh	r2, [r7, #2]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001360:	e002      	b.n	8001368 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001362:	887a      	ldrh	r2, [r7, #2]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	460b      	mov	r3, r1
 800137e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	695b      	ldr	r3, [r3, #20]
 8001384:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001386:	887a      	ldrh	r2, [r7, #2]
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	4013      	ands	r3, r2
 800138c:	041a      	lsls	r2, r3, #16
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	43d9      	mvns	r1, r3
 8001392:	887b      	ldrh	r3, [r7, #2]
 8001394:	400b      	ands	r3, r1
 8001396:	431a      	orrs	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	619a      	str	r2, [r3, #24]
}
 800139c:	bf00      	nop
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80013b2:	4b08      	ldr	r3, [pc, #32]	@ (80013d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013b4:	695a      	ldr	r2, [r3, #20]
 80013b6:	88fb      	ldrh	r3, [r7, #6]
 80013b8:	4013      	ands	r3, r2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d006      	beq.n	80013cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013be:	4a05      	ldr	r2, [pc, #20]	@ (80013d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013c0:	88fb      	ldrh	r3, [r7, #6]
 80013c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013c4:	88fb      	ldrh	r3, [r7, #6]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff f8ea 	bl	80005a0 <HAL_GPIO_EXTI_Callback>
  }
}
 80013cc:	bf00      	nop
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40010400 	.word	0x40010400

080013d8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013dc:	4b05      	ldr	r3, [pc, #20]	@ (80013f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a04      	ldr	r2, [pc, #16]	@ (80013f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80013e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013e6:	6013      	str	r3, [r2, #0]
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	40007000 	.word	0x40007000

080013f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80013fc:	4b04      	ldr	r3, [pc, #16]	@ (8001410 <HAL_PWREx_GetVoltageRange+0x18>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001404:	4618      	mov	r0, r3
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	40007000 	.word	0x40007000

08001414 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001422:	d130      	bne.n	8001486 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001424:	4b23      	ldr	r3, [pc, #140]	@ (80014b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800142c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001430:	d038      	beq.n	80014a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001432:	4b20      	ldr	r3, [pc, #128]	@ (80014b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800143a:	4a1e      	ldr	r2, [pc, #120]	@ (80014b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800143c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001440:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001442:	4b1d      	ldr	r3, [pc, #116]	@ (80014b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2232      	movs	r2, #50	@ 0x32
 8001448:	fb02 f303 	mul.w	r3, r2, r3
 800144c:	4a1b      	ldr	r2, [pc, #108]	@ (80014bc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800144e:	fba2 2303 	umull	r2, r3, r2, r3
 8001452:	0c9b      	lsrs	r3, r3, #18
 8001454:	3301      	adds	r3, #1
 8001456:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001458:	e002      	b.n	8001460 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	3b01      	subs	r3, #1
 800145e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001460:	4b14      	ldr	r3, [pc, #80]	@ (80014b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001462:	695b      	ldr	r3, [r3, #20]
 8001464:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001468:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800146c:	d102      	bne.n	8001474 <HAL_PWREx_ControlVoltageScaling+0x60>
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d1f2      	bne.n	800145a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001474:	4b0f      	ldr	r3, [pc, #60]	@ (80014b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001476:	695b      	ldr	r3, [r3, #20]
 8001478:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800147c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001480:	d110      	bne.n	80014a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e00f      	b.n	80014a6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001486:	4b0b      	ldr	r3, [pc, #44]	@ (80014b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800148e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001492:	d007      	beq.n	80014a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001494:	4b07      	ldr	r3, [pc, #28]	@ (80014b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800149c:	4a05      	ldr	r2, [pc, #20]	@ (80014b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800149e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014a2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3714      	adds	r7, #20
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	40007000 	.word	0x40007000
 80014b8:	20000020 	.word	0x20000020
 80014bc:	431bde83 	.word	0x431bde83

080014c0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b088      	sub	sp, #32
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d101      	bne.n	80014d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e3ca      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014d2:	4b97      	ldr	r3, [pc, #604]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f003 030c 	and.w	r3, r3, #12
 80014da:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014dc:	4b94      	ldr	r3, [pc, #592]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	f003 0303 	and.w	r3, r3, #3
 80014e4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0310 	and.w	r3, r3, #16
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f000 80e4 	beq.w	80016bc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d007      	beq.n	800150a <HAL_RCC_OscConfig+0x4a>
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	2b0c      	cmp	r3, #12
 80014fe:	f040 808b 	bne.w	8001618 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	2b01      	cmp	r3, #1
 8001506:	f040 8087 	bne.w	8001618 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800150a:	4b89      	ldr	r3, [pc, #548]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d005      	beq.n	8001522 <HAL_RCC_OscConfig+0x62>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d101      	bne.n	8001522 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e3a2      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a1a      	ldr	r2, [r3, #32]
 8001526:	4b82      	ldr	r3, [pc, #520]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0308 	and.w	r3, r3, #8
 800152e:	2b00      	cmp	r3, #0
 8001530:	d004      	beq.n	800153c <HAL_RCC_OscConfig+0x7c>
 8001532:	4b7f      	ldr	r3, [pc, #508]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800153a:	e005      	b.n	8001548 <HAL_RCC_OscConfig+0x88>
 800153c:	4b7c      	ldr	r3, [pc, #496]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 800153e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001542:	091b      	lsrs	r3, r3, #4
 8001544:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001548:	4293      	cmp	r3, r2
 800154a:	d223      	bcs.n	8001594 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6a1b      	ldr	r3, [r3, #32]
 8001550:	4618      	mov	r0, r3
 8001552:	f000 fd55 	bl	8002000 <RCC_SetFlashLatencyFromMSIRange>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e383      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001560:	4b73      	ldr	r3, [pc, #460]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a72      	ldr	r2, [pc, #456]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 8001566:	f043 0308 	orr.w	r3, r3, #8
 800156a:	6013      	str	r3, [r2, #0]
 800156c:	4b70      	ldr	r3, [pc, #448]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a1b      	ldr	r3, [r3, #32]
 8001578:	496d      	ldr	r1, [pc, #436]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 800157a:	4313      	orrs	r3, r2
 800157c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800157e:	4b6c      	ldr	r3, [pc, #432]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	021b      	lsls	r3, r3, #8
 800158c:	4968      	ldr	r1, [pc, #416]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 800158e:	4313      	orrs	r3, r2
 8001590:	604b      	str	r3, [r1, #4]
 8001592:	e025      	b.n	80015e0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001594:	4b66      	ldr	r3, [pc, #408]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a65      	ldr	r2, [pc, #404]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 800159a:	f043 0308 	orr.w	r3, r3, #8
 800159e:	6013      	str	r3, [r2, #0]
 80015a0:	4b63      	ldr	r3, [pc, #396]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a1b      	ldr	r3, [r3, #32]
 80015ac:	4960      	ldr	r1, [pc, #384]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 80015ae:	4313      	orrs	r3, r2
 80015b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015b2:	4b5f      	ldr	r3, [pc, #380]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	69db      	ldr	r3, [r3, #28]
 80015be:	021b      	lsls	r3, r3, #8
 80015c0:	495b      	ldr	r1, [pc, #364]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 80015c2:	4313      	orrs	r3, r2
 80015c4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d109      	bne.n	80015e0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a1b      	ldr	r3, [r3, #32]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f000 fd15 	bl	8002000 <RCC_SetFlashLatencyFromMSIRange>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e343      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015e0:	f000 fc4a 	bl	8001e78 <HAL_RCC_GetSysClockFreq>
 80015e4:	4602      	mov	r2, r0
 80015e6:	4b52      	ldr	r3, [pc, #328]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	091b      	lsrs	r3, r3, #4
 80015ec:	f003 030f 	and.w	r3, r3, #15
 80015f0:	4950      	ldr	r1, [pc, #320]	@ (8001734 <HAL_RCC_OscConfig+0x274>)
 80015f2:	5ccb      	ldrb	r3, [r1, r3]
 80015f4:	f003 031f 	and.w	r3, r3, #31
 80015f8:	fa22 f303 	lsr.w	r3, r2, r3
 80015fc:	4a4e      	ldr	r2, [pc, #312]	@ (8001738 <HAL_RCC_OscConfig+0x278>)
 80015fe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001600:	4b4e      	ldr	r3, [pc, #312]	@ (800173c <HAL_RCC_OscConfig+0x27c>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff fb07 	bl	8000c18 <HAL_InitTick>
 800160a:	4603      	mov	r3, r0
 800160c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800160e:	7bfb      	ldrb	r3, [r7, #15]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d052      	beq.n	80016ba <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001614:	7bfb      	ldrb	r3, [r7, #15]
 8001616:	e327      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d032      	beq.n	8001686 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001620:	4b43      	ldr	r3, [pc, #268]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a42      	ldr	r2, [pc, #264]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800162c:	f7ff fb44 	bl	8000cb8 <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001634:	f7ff fb40 	bl	8000cb8 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e310      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001646:	4b3a      	ldr	r3, [pc, #232]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d0f0      	beq.n	8001634 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001652:	4b37      	ldr	r3, [pc, #220]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a36      	ldr	r2, [pc, #216]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 8001658:	f043 0308 	orr.w	r3, r3, #8
 800165c:	6013      	str	r3, [r2, #0]
 800165e:	4b34      	ldr	r3, [pc, #208]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a1b      	ldr	r3, [r3, #32]
 800166a:	4931      	ldr	r1, [pc, #196]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 800166c:	4313      	orrs	r3, r2
 800166e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001670:	4b2f      	ldr	r3, [pc, #188]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	69db      	ldr	r3, [r3, #28]
 800167c:	021b      	lsls	r3, r3, #8
 800167e:	492c      	ldr	r1, [pc, #176]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 8001680:	4313      	orrs	r3, r2
 8001682:	604b      	str	r3, [r1, #4]
 8001684:	e01a      	b.n	80016bc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001686:	4b2a      	ldr	r3, [pc, #168]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a29      	ldr	r2, [pc, #164]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 800168c:	f023 0301 	bic.w	r3, r3, #1
 8001690:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001692:	f7ff fb11 	bl	8000cb8 <HAL_GetTick>
 8001696:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001698:	e008      	b.n	80016ac <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800169a:	f7ff fb0d 	bl	8000cb8 <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e2dd      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016ac:	4b20      	ldr	r3, [pc, #128]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1f0      	bne.n	800169a <HAL_RCC_OscConfig+0x1da>
 80016b8:	e000      	b.n	80016bc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016ba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0301 	and.w	r3, r3, #1
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d074      	beq.n	80017b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	2b08      	cmp	r3, #8
 80016cc:	d005      	beq.n	80016da <HAL_RCC_OscConfig+0x21a>
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	2b0c      	cmp	r3, #12
 80016d2:	d10e      	bne.n	80016f2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	2b03      	cmp	r3, #3
 80016d8:	d10b      	bne.n	80016f2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016da:	4b15      	ldr	r3, [pc, #84]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d064      	beq.n	80017b0 <HAL_RCC_OscConfig+0x2f0>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d160      	bne.n	80017b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e2ba      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016fa:	d106      	bne.n	800170a <HAL_RCC_OscConfig+0x24a>
 80016fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a0b      	ldr	r2, [pc, #44]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 8001702:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001706:	6013      	str	r3, [r2, #0]
 8001708:	e026      	b.n	8001758 <HAL_RCC_OscConfig+0x298>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001712:	d115      	bne.n	8001740 <HAL_RCC_OscConfig+0x280>
 8001714:	4b06      	ldr	r3, [pc, #24]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a05      	ldr	r2, [pc, #20]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 800171a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800171e:	6013      	str	r3, [r2, #0]
 8001720:	4b03      	ldr	r3, [pc, #12]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a02      	ldr	r2, [pc, #8]	@ (8001730 <HAL_RCC_OscConfig+0x270>)
 8001726:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800172a:	6013      	str	r3, [r2, #0]
 800172c:	e014      	b.n	8001758 <HAL_RCC_OscConfig+0x298>
 800172e:	bf00      	nop
 8001730:	40021000 	.word	0x40021000
 8001734:	08004cf8 	.word	0x08004cf8
 8001738:	20000020 	.word	0x20000020
 800173c:	20000024 	.word	0x20000024
 8001740:	4ba0      	ldr	r3, [pc, #640]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a9f      	ldr	r2, [pc, #636]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 8001746:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800174a:	6013      	str	r3, [r2, #0]
 800174c:	4b9d      	ldr	r3, [pc, #628]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a9c      	ldr	r2, [pc, #624]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 8001752:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001756:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d013      	beq.n	8001788 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001760:	f7ff faaa 	bl	8000cb8 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001768:	f7ff faa6 	bl	8000cb8 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b64      	cmp	r3, #100	@ 0x64
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e276      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800177a:	4b92      	ldr	r3, [pc, #584]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d0f0      	beq.n	8001768 <HAL_RCC_OscConfig+0x2a8>
 8001786:	e014      	b.n	80017b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001788:	f7ff fa96 	bl	8000cb8 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001790:	f7ff fa92 	bl	8000cb8 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b64      	cmp	r3, #100	@ 0x64
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e262      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017a2:	4b88      	ldr	r3, [pc, #544]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1f0      	bne.n	8001790 <HAL_RCC_OscConfig+0x2d0>
 80017ae:	e000      	b.n	80017b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d060      	beq.n	8001880 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	2b04      	cmp	r3, #4
 80017c2:	d005      	beq.n	80017d0 <HAL_RCC_OscConfig+0x310>
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	2b0c      	cmp	r3, #12
 80017c8:	d119      	bne.n	80017fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d116      	bne.n	80017fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017d0:	4b7c      	ldr	r3, [pc, #496]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d005      	beq.n	80017e8 <HAL_RCC_OscConfig+0x328>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d101      	bne.n	80017e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e23f      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e8:	4b76      	ldr	r3, [pc, #472]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	691b      	ldr	r3, [r3, #16]
 80017f4:	061b      	lsls	r3, r3, #24
 80017f6:	4973      	ldr	r1, [pc, #460]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 80017f8:	4313      	orrs	r3, r2
 80017fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017fc:	e040      	b.n	8001880 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d023      	beq.n	800184e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001806:	4b6f      	ldr	r3, [pc, #444]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a6e      	ldr	r2, [pc, #440]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 800180c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001810:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001812:	f7ff fa51 	bl	8000cb8 <HAL_GetTick>
 8001816:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001818:	e008      	b.n	800182c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800181a:	f7ff fa4d 	bl	8000cb8 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e21d      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800182c:	4b65      	ldr	r3, [pc, #404]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001834:	2b00      	cmp	r3, #0
 8001836:	d0f0      	beq.n	800181a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001838:	4b62      	ldr	r3, [pc, #392]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	061b      	lsls	r3, r3, #24
 8001846:	495f      	ldr	r1, [pc, #380]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 8001848:	4313      	orrs	r3, r2
 800184a:	604b      	str	r3, [r1, #4]
 800184c:	e018      	b.n	8001880 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800184e:	4b5d      	ldr	r3, [pc, #372]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a5c      	ldr	r2, [pc, #368]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 8001854:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001858:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800185a:	f7ff fa2d 	bl	8000cb8 <HAL_GetTick>
 800185e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001860:	e008      	b.n	8001874 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001862:	f7ff fa29 	bl	8000cb8 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e1f9      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001874:	4b53      	ldr	r3, [pc, #332]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1f0      	bne.n	8001862 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0308 	and.w	r3, r3, #8
 8001888:	2b00      	cmp	r3, #0
 800188a:	d03c      	beq.n	8001906 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	695b      	ldr	r3, [r3, #20]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d01c      	beq.n	80018ce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001894:	4b4b      	ldr	r3, [pc, #300]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 8001896:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800189a:	4a4a      	ldr	r2, [pc, #296]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a4:	f7ff fa08 	bl	8000cb8 <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018ac:	f7ff fa04 	bl	8000cb8 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e1d4      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018be:	4b41      	ldr	r3, [pc, #260]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 80018c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018c4:	f003 0302 	and.w	r3, r3, #2
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d0ef      	beq.n	80018ac <HAL_RCC_OscConfig+0x3ec>
 80018cc:	e01b      	b.n	8001906 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ce:	4b3d      	ldr	r3, [pc, #244]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 80018d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018d4:	4a3b      	ldr	r2, [pc, #236]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 80018d6:	f023 0301 	bic.w	r3, r3, #1
 80018da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018de:	f7ff f9eb 	bl	8000cb8 <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018e4:	e008      	b.n	80018f8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018e6:	f7ff f9e7 	bl	8000cb8 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e1b7      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018f8:	4b32      	ldr	r3, [pc, #200]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 80018fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1ef      	bne.n	80018e6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0304 	and.w	r3, r3, #4
 800190e:	2b00      	cmp	r3, #0
 8001910:	f000 80a6 	beq.w	8001a60 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001914:	2300      	movs	r3, #0
 8001916:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001918:	4b2a      	ldr	r3, [pc, #168]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 800191a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800191c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d10d      	bne.n	8001940 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001924:	4b27      	ldr	r3, [pc, #156]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 8001926:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001928:	4a26      	ldr	r2, [pc, #152]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 800192a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800192e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001930:	4b24      	ldr	r3, [pc, #144]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 8001932:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001934:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001938:	60bb      	str	r3, [r7, #8]
 800193a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800193c:	2301      	movs	r3, #1
 800193e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001940:	4b21      	ldr	r3, [pc, #132]	@ (80019c8 <HAL_RCC_OscConfig+0x508>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001948:	2b00      	cmp	r3, #0
 800194a:	d118      	bne.n	800197e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800194c:	4b1e      	ldr	r3, [pc, #120]	@ (80019c8 <HAL_RCC_OscConfig+0x508>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a1d      	ldr	r2, [pc, #116]	@ (80019c8 <HAL_RCC_OscConfig+0x508>)
 8001952:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001956:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001958:	f7ff f9ae 	bl	8000cb8 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001960:	f7ff f9aa 	bl	8000cb8 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e17a      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001972:	4b15      	ldr	r3, [pc, #84]	@ (80019c8 <HAL_RCC_OscConfig+0x508>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800197a:	2b00      	cmp	r3, #0
 800197c:	d0f0      	beq.n	8001960 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d108      	bne.n	8001998 <HAL_RCC_OscConfig+0x4d8>
 8001986:	4b0f      	ldr	r3, [pc, #60]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 8001988:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800198c:	4a0d      	ldr	r2, [pc, #52]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001996:	e029      	b.n	80019ec <HAL_RCC_OscConfig+0x52c>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	2b05      	cmp	r3, #5
 800199e:	d115      	bne.n	80019cc <HAL_RCC_OscConfig+0x50c>
 80019a0:	4b08      	ldr	r3, [pc, #32]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 80019a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019a6:	4a07      	ldr	r2, [pc, #28]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 80019a8:	f043 0304 	orr.w	r3, r3, #4
 80019ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019b0:	4b04      	ldr	r3, [pc, #16]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 80019b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019b6:	4a03      	ldr	r2, [pc, #12]	@ (80019c4 <HAL_RCC_OscConfig+0x504>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019c0:	e014      	b.n	80019ec <HAL_RCC_OscConfig+0x52c>
 80019c2:	bf00      	nop
 80019c4:	40021000 	.word	0x40021000
 80019c8:	40007000 	.word	0x40007000
 80019cc:	4b9c      	ldr	r3, [pc, #624]	@ (8001c40 <HAL_RCC_OscConfig+0x780>)
 80019ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019d2:	4a9b      	ldr	r2, [pc, #620]	@ (8001c40 <HAL_RCC_OscConfig+0x780>)
 80019d4:	f023 0301 	bic.w	r3, r3, #1
 80019d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019dc:	4b98      	ldr	r3, [pc, #608]	@ (8001c40 <HAL_RCC_OscConfig+0x780>)
 80019de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019e2:	4a97      	ldr	r2, [pc, #604]	@ (8001c40 <HAL_RCC_OscConfig+0x780>)
 80019e4:	f023 0304 	bic.w	r3, r3, #4
 80019e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d016      	beq.n	8001a22 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f4:	f7ff f960 	bl	8000cb8 <HAL_GetTick>
 80019f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019fa:	e00a      	b.n	8001a12 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019fc:	f7ff f95c 	bl	8000cb8 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e12a      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a12:	4b8b      	ldr	r3, [pc, #556]	@ (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0ed      	beq.n	80019fc <HAL_RCC_OscConfig+0x53c>
 8001a20:	e015      	b.n	8001a4e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a22:	f7ff f949 	bl	8000cb8 <HAL_GetTick>
 8001a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a28:	e00a      	b.n	8001a40 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a2a:	f7ff f945 	bl	8000cb8 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e113      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a40:	4b7f      	ldr	r3, [pc, #508]	@ (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1ed      	bne.n	8001a2a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a4e:	7ffb      	ldrb	r3, [r7, #31]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d105      	bne.n	8001a60 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a54:	4b7a      	ldr	r3, [pc, #488]	@ (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001a56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a58:	4a79      	ldr	r2, [pc, #484]	@ (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001a5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a5e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f000 80fe 	beq.w	8001c66 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	f040 80d0 	bne.w	8001c14 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a74:	4b72      	ldr	r3, [pc, #456]	@ (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	f003 0203 	and.w	r2, r3, #3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d130      	bne.n	8001aea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a92:	3b01      	subs	r3, #1
 8001a94:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d127      	bne.n	8001aea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001aa4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d11f      	bne.n	8001aea <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001ab4:	2a07      	cmp	r2, #7
 8001ab6:	bf14      	ite	ne
 8001ab8:	2201      	movne	r2, #1
 8001aba:	2200      	moveq	r2, #0
 8001abc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d113      	bne.n	8001aea <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001acc:	085b      	lsrs	r3, r3, #1
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d109      	bne.n	8001aea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae0:	085b      	lsrs	r3, r3, #1
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d06e      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	2b0c      	cmp	r3, #12
 8001aee:	d069      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001af0:	4b53      	ldr	r3, [pc, #332]	@ (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d105      	bne.n	8001b08 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001afc:	4b50      	ldr	r3, [pc, #320]	@ (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e0ad      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b0c:	4b4c      	ldr	r3, [pc, #304]	@ (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a4b      	ldr	r2, [pc, #300]	@ (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001b12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b16:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b18:	f7ff f8ce 	bl	8000cb8 <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b20:	f7ff f8ca 	bl	8000cb8 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e09a      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b32:	4b43      	ldr	r3, [pc, #268]	@ (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1f0      	bne.n	8001b20 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b3e:	4b40      	ldr	r3, [pc, #256]	@ (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001b40:	68da      	ldr	r2, [r3, #12]
 8001b42:	4b40      	ldr	r3, [pc, #256]	@ (8001c44 <HAL_RCC_OscConfig+0x784>)
 8001b44:	4013      	ands	r3, r2
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001b4e:	3a01      	subs	r2, #1
 8001b50:	0112      	lsls	r2, r2, #4
 8001b52:	4311      	orrs	r1, r2
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001b58:	0212      	lsls	r2, r2, #8
 8001b5a:	4311      	orrs	r1, r2
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001b60:	0852      	lsrs	r2, r2, #1
 8001b62:	3a01      	subs	r2, #1
 8001b64:	0552      	lsls	r2, r2, #21
 8001b66:	4311      	orrs	r1, r2
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001b6c:	0852      	lsrs	r2, r2, #1
 8001b6e:	3a01      	subs	r2, #1
 8001b70:	0652      	lsls	r2, r2, #25
 8001b72:	4311      	orrs	r1, r2
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001b78:	0912      	lsrs	r2, r2, #4
 8001b7a:	0452      	lsls	r2, r2, #17
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	4930      	ldr	r1, [pc, #192]	@ (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001b80:	4313      	orrs	r3, r2
 8001b82:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b84:	4b2e      	ldr	r3, [pc, #184]	@ (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a2d      	ldr	r2, [pc, #180]	@ (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001b8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b8e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b90:	4b2b      	ldr	r3, [pc, #172]	@ (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	4a2a      	ldr	r2, [pc, #168]	@ (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001b96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b9a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b9c:	f7ff f88c 	bl	8000cb8 <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba4:	f7ff f888 	bl	8000cb8 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e058      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bb6:	4b22      	ldr	r3, [pc, #136]	@ (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d0f0      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bc2:	e050      	b.n	8001c66 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e04f      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bc8:	4b1d      	ldr	r3, [pc, #116]	@ (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d148      	bne.n	8001c66 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001bd4:	4b1a      	ldr	r3, [pc, #104]	@ (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a19      	ldr	r2, [pc, #100]	@ (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001bda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bde:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001be0:	4b17      	ldr	r3, [pc, #92]	@ (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	4a16      	ldr	r2, [pc, #88]	@ (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001be6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001bec:	f7ff f864 	bl	8000cb8 <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf4:	f7ff f860 	bl	8000cb8 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e030      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c06:	4b0e      	ldr	r3, [pc, #56]	@ (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d0f0      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x734>
 8001c12:	e028      	b.n	8001c66 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	2b0c      	cmp	r3, #12
 8001c18:	d023      	beq.n	8001c62 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c1a:	4b09      	ldr	r3, [pc, #36]	@ (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a08      	ldr	r2, [pc, #32]	@ (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001c20:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c26:	f7ff f847 	bl	8000cb8 <HAL_GetTick>
 8001c2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c2c:	e00c      	b.n	8001c48 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c2e:	f7ff f843 	bl	8000cb8 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d905      	bls.n	8001c48 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e013      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
 8001c40:	40021000 	.word	0x40021000
 8001c44:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c48:	4b09      	ldr	r3, [pc, #36]	@ (8001c70 <HAL_RCC_OscConfig+0x7b0>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1ec      	bne.n	8001c2e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001c54:	4b06      	ldr	r3, [pc, #24]	@ (8001c70 <HAL_RCC_OscConfig+0x7b0>)
 8001c56:	68da      	ldr	r2, [r3, #12]
 8001c58:	4905      	ldr	r1, [pc, #20]	@ (8001c70 <HAL_RCC_OscConfig+0x7b0>)
 8001c5a:	4b06      	ldr	r3, [pc, #24]	@ (8001c74 <HAL_RCC_OscConfig+0x7b4>)
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	60cb      	str	r3, [r1, #12]
 8001c60:	e001      	b.n	8001c66 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e000      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3720      	adds	r7, #32
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40021000 	.word	0x40021000
 8001c74:	feeefffc 	.word	0xfeeefffc

08001c78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d101      	bne.n	8001c8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e0e7      	b.n	8001e5c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c8c:	4b75      	ldr	r3, [pc, #468]	@ (8001e64 <HAL_RCC_ClockConfig+0x1ec>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d910      	bls.n	8001cbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c9a:	4b72      	ldr	r3, [pc, #456]	@ (8001e64 <HAL_RCC_ClockConfig+0x1ec>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f023 0207 	bic.w	r2, r3, #7
 8001ca2:	4970      	ldr	r1, [pc, #448]	@ (8001e64 <HAL_RCC_ClockConfig+0x1ec>)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001caa:	4b6e      	ldr	r3, [pc, #440]	@ (8001e64 <HAL_RCC_ClockConfig+0x1ec>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d001      	beq.n	8001cbc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e0cf      	b.n	8001e5c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d010      	beq.n	8001cea <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689a      	ldr	r2, [r3, #8]
 8001ccc:	4b66      	ldr	r3, [pc, #408]	@ (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d908      	bls.n	8001cea <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cd8:	4b63      	ldr	r3, [pc, #396]	@ (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	4960      	ldr	r1, [pc, #384]	@ (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d04c      	beq.n	8001d90 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b03      	cmp	r3, #3
 8001cfc:	d107      	bne.n	8001d0e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cfe:	4b5a      	ldr	r3, [pc, #360]	@ (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d121      	bne.n	8001d4e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e0a6      	b.n	8001e5c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d107      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d16:	4b54      	ldr	r3, [pc, #336]	@ (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d115      	bne.n	8001d4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e09a      	b.n	8001e5c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d107      	bne.n	8001d3e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d2e:	4b4e      	ldr	r3, [pc, #312]	@ (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d109      	bne.n	8001d4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e08e      	b.n	8001e5c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d3e:	4b4a      	ldr	r3, [pc, #296]	@ (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e086      	b.n	8001e5c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d4e:	4b46      	ldr	r3, [pc, #280]	@ (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f023 0203 	bic.w	r2, r3, #3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	4943      	ldr	r1, [pc, #268]	@ (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d60:	f7fe ffaa 	bl	8000cb8 <HAL_GetTick>
 8001d64:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d66:	e00a      	b.n	8001d7e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d68:	f7fe ffa6 	bl	8000cb8 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e06e      	b.n	8001e5c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d7e:	4b3a      	ldr	r3, [pc, #232]	@ (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f003 020c 	and.w	r2, r3, #12
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d1eb      	bne.n	8001d68 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d010      	beq.n	8001dbe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	4b31      	ldr	r3, [pc, #196]	@ (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d208      	bcs.n	8001dbe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dac:	4b2e      	ldr	r3, [pc, #184]	@ (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	492b      	ldr	r1, [pc, #172]	@ (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dbe:	4b29      	ldr	r3, [pc, #164]	@ (8001e64 <HAL_RCC_ClockConfig+0x1ec>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d210      	bcs.n	8001dee <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dcc:	4b25      	ldr	r3, [pc, #148]	@ (8001e64 <HAL_RCC_ClockConfig+0x1ec>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f023 0207 	bic.w	r2, r3, #7
 8001dd4:	4923      	ldr	r1, [pc, #140]	@ (8001e64 <HAL_RCC_ClockConfig+0x1ec>)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ddc:	4b21      	ldr	r3, [pc, #132]	@ (8001e64 <HAL_RCC_ClockConfig+0x1ec>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0307 	and.w	r3, r3, #7
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d001      	beq.n	8001dee <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e036      	b.n	8001e5c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0304 	and.w	r3, r3, #4
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d008      	beq.n	8001e0c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dfa:	4b1b      	ldr	r3, [pc, #108]	@ (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	4918      	ldr	r1, [pc, #96]	@ (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0308 	and.w	r3, r3, #8
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d009      	beq.n	8001e2c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e18:	4b13      	ldr	r3, [pc, #76]	@ (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	4910      	ldr	r1, [pc, #64]	@ (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e2c:	f000 f824 	bl	8001e78 <HAL_RCC_GetSysClockFreq>
 8001e30:	4602      	mov	r2, r0
 8001e32:	4b0d      	ldr	r3, [pc, #52]	@ (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	091b      	lsrs	r3, r3, #4
 8001e38:	f003 030f 	and.w	r3, r3, #15
 8001e3c:	490b      	ldr	r1, [pc, #44]	@ (8001e6c <HAL_RCC_ClockConfig+0x1f4>)
 8001e3e:	5ccb      	ldrb	r3, [r1, r3]
 8001e40:	f003 031f 	and.w	r3, r3, #31
 8001e44:	fa22 f303 	lsr.w	r3, r2, r3
 8001e48:	4a09      	ldr	r2, [pc, #36]	@ (8001e70 <HAL_RCC_ClockConfig+0x1f8>)
 8001e4a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e4c:	4b09      	ldr	r3, [pc, #36]	@ (8001e74 <HAL_RCC_ClockConfig+0x1fc>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7fe fee1 	bl	8000c18 <HAL_InitTick>
 8001e56:	4603      	mov	r3, r0
 8001e58:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e5a:	7afb      	ldrb	r3, [r7, #11]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3710      	adds	r7, #16
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40022000 	.word	0x40022000
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	08004cf8 	.word	0x08004cf8
 8001e70:	20000020 	.word	0x20000020
 8001e74:	20000024 	.word	0x20000024

08001e78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b089      	sub	sp, #36	@ 0x24
 8001e7c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61fb      	str	r3, [r7, #28]
 8001e82:	2300      	movs	r3, #0
 8001e84:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e86:	4b3e      	ldr	r3, [pc, #248]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f003 030c 	and.w	r3, r3, #12
 8001e8e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e90:	4b3b      	ldr	r3, [pc, #236]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	f003 0303 	and.w	r3, r3, #3
 8001e98:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d005      	beq.n	8001eac <HAL_RCC_GetSysClockFreq+0x34>
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	2b0c      	cmp	r3, #12
 8001ea4:	d121      	bne.n	8001eea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d11e      	bne.n	8001eea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001eac:	4b34      	ldr	r3, [pc, #208]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0308 	and.w	r3, r3, #8
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d107      	bne.n	8001ec8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001eb8:	4b31      	ldr	r3, [pc, #196]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ebe:	0a1b      	lsrs	r3, r3, #8
 8001ec0:	f003 030f 	and.w	r3, r3, #15
 8001ec4:	61fb      	str	r3, [r7, #28]
 8001ec6:	e005      	b.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ec8:	4b2d      	ldr	r3, [pc, #180]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	091b      	lsrs	r3, r3, #4
 8001ece:	f003 030f 	and.w	r3, r3, #15
 8001ed2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ed4:	4a2b      	ldr	r2, [pc, #172]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001edc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d10d      	bne.n	8001f00 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ee8:	e00a      	b.n	8001f00 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	2b04      	cmp	r3, #4
 8001eee:	d102      	bne.n	8001ef6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ef0:	4b25      	ldr	r3, [pc, #148]	@ (8001f88 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ef2:	61bb      	str	r3, [r7, #24]
 8001ef4:	e004      	b.n	8001f00 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	2b08      	cmp	r3, #8
 8001efa:	d101      	bne.n	8001f00 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001efc:	4b23      	ldr	r3, [pc, #140]	@ (8001f8c <HAL_RCC_GetSysClockFreq+0x114>)
 8001efe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	2b0c      	cmp	r3, #12
 8001f04:	d134      	bne.n	8001f70 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f06:	4b1e      	ldr	r3, [pc, #120]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	f003 0303 	and.w	r3, r3, #3
 8001f0e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d003      	beq.n	8001f1e <HAL_RCC_GetSysClockFreq+0xa6>
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	2b03      	cmp	r3, #3
 8001f1a:	d003      	beq.n	8001f24 <HAL_RCC_GetSysClockFreq+0xac>
 8001f1c:	e005      	b.n	8001f2a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f1e:	4b1a      	ldr	r3, [pc, #104]	@ (8001f88 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f20:	617b      	str	r3, [r7, #20]
      break;
 8001f22:	e005      	b.n	8001f30 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f24:	4b19      	ldr	r3, [pc, #100]	@ (8001f8c <HAL_RCC_GetSysClockFreq+0x114>)
 8001f26:	617b      	str	r3, [r7, #20]
      break;
 8001f28:	e002      	b.n	8001f30 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	617b      	str	r3, [r7, #20]
      break;
 8001f2e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f30:	4b13      	ldr	r3, [pc, #76]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	091b      	lsrs	r3, r3, #4
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f3e:	4b10      	ldr	r3, [pc, #64]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	0a1b      	lsrs	r3, r3, #8
 8001f44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	fb03 f202 	mul.w	r2, r3, r2
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f54:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f56:	4b0a      	ldr	r3, [pc, #40]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	0e5b      	lsrs	r3, r3, #25
 8001f5c:	f003 0303 	and.w	r3, r3, #3
 8001f60:	3301      	adds	r3, #1
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f6e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f70:	69bb      	ldr	r3, [r7, #24]
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3724      	adds	r7, #36	@ 0x24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	40021000 	.word	0x40021000
 8001f84:	08004d10 	.word	0x08004d10
 8001f88:	00f42400 	.word	0x00f42400
 8001f8c:	007a1200 	.word	0x007a1200

08001f90 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f94:	4b03      	ldr	r3, [pc, #12]	@ (8001fa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f96:	681b      	ldr	r3, [r3, #0]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	20000020 	.word	0x20000020

08001fa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001fac:	f7ff fff0 	bl	8001f90 <HAL_RCC_GetHCLKFreq>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	4b06      	ldr	r3, [pc, #24]	@ (8001fcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	0a1b      	lsrs	r3, r3, #8
 8001fb8:	f003 0307 	and.w	r3, r3, #7
 8001fbc:	4904      	ldr	r1, [pc, #16]	@ (8001fd0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fbe:	5ccb      	ldrb	r3, [r1, r3]
 8001fc0:	f003 031f 	and.w	r3, r3, #31
 8001fc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	08004d08 	.word	0x08004d08

08001fd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001fd8:	f7ff ffda 	bl	8001f90 <HAL_RCC_GetHCLKFreq>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	4b06      	ldr	r3, [pc, #24]	@ (8001ff8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	0adb      	lsrs	r3, r3, #11
 8001fe4:	f003 0307 	and.w	r3, r3, #7
 8001fe8:	4904      	ldr	r1, [pc, #16]	@ (8001ffc <HAL_RCC_GetPCLK2Freq+0x28>)
 8001fea:	5ccb      	ldrb	r3, [r1, r3]
 8001fec:	f003 031f 	and.w	r3, r3, #31
 8001ff0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	08004d08 	.word	0x08004d08

08002000 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002008:	2300      	movs	r3, #0
 800200a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800200c:	4b2a      	ldr	r3, [pc, #168]	@ (80020b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800200e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002010:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d003      	beq.n	8002020 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002018:	f7ff f9ee 	bl	80013f8 <HAL_PWREx_GetVoltageRange>
 800201c:	6178      	str	r0, [r7, #20]
 800201e:	e014      	b.n	800204a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002020:	4b25      	ldr	r3, [pc, #148]	@ (80020b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002022:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002024:	4a24      	ldr	r2, [pc, #144]	@ (80020b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002026:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800202a:	6593      	str	r3, [r2, #88]	@ 0x58
 800202c:	4b22      	ldr	r3, [pc, #136]	@ (80020b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800202e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002030:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002038:	f7ff f9de 	bl	80013f8 <HAL_PWREx_GetVoltageRange>
 800203c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800203e:	4b1e      	ldr	r3, [pc, #120]	@ (80020b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002042:	4a1d      	ldr	r2, [pc, #116]	@ (80020b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002044:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002048:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002050:	d10b      	bne.n	800206a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b80      	cmp	r3, #128	@ 0x80
 8002056:	d919      	bls.n	800208c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2ba0      	cmp	r3, #160	@ 0xa0
 800205c:	d902      	bls.n	8002064 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800205e:	2302      	movs	r3, #2
 8002060:	613b      	str	r3, [r7, #16]
 8002062:	e013      	b.n	800208c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002064:	2301      	movs	r3, #1
 8002066:	613b      	str	r3, [r7, #16]
 8002068:	e010      	b.n	800208c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b80      	cmp	r3, #128	@ 0x80
 800206e:	d902      	bls.n	8002076 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002070:	2303      	movs	r3, #3
 8002072:	613b      	str	r3, [r7, #16]
 8002074:	e00a      	b.n	800208c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2b80      	cmp	r3, #128	@ 0x80
 800207a:	d102      	bne.n	8002082 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800207c:	2302      	movs	r3, #2
 800207e:	613b      	str	r3, [r7, #16]
 8002080:	e004      	b.n	800208c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2b70      	cmp	r3, #112	@ 0x70
 8002086:	d101      	bne.n	800208c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002088:	2301      	movs	r3, #1
 800208a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800208c:	4b0b      	ldr	r3, [pc, #44]	@ (80020bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f023 0207 	bic.w	r2, r3, #7
 8002094:	4909      	ldr	r1, [pc, #36]	@ (80020bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	4313      	orrs	r3, r2
 800209a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800209c:	4b07      	ldr	r3, [pc, #28]	@ (80020bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0307 	and.w	r3, r3, #7
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d001      	beq.n	80020ae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e000      	b.n	80020b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3718      	adds	r7, #24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40021000 	.word	0x40021000
 80020bc:	40022000 	.word	0x40022000

080020c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80020c8:	2300      	movs	r3, #0
 80020ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020cc:	2300      	movs	r3, #0
 80020ce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d041      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80020e0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80020e4:	d02a      	beq.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80020e6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80020ea:	d824      	bhi.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80020ec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80020f0:	d008      	beq.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80020f2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80020f6:	d81e      	bhi.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d00a      	beq.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80020fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002100:	d010      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002102:	e018      	b.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002104:	4b86      	ldr	r3, [pc, #536]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	4a85      	ldr	r2, [pc, #532]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800210a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800210e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002110:	e015      	b.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	3304      	adds	r3, #4
 8002116:	2100      	movs	r1, #0
 8002118:	4618      	mov	r0, r3
 800211a:	f000 facb 	bl	80026b4 <RCCEx_PLLSAI1_Config>
 800211e:	4603      	mov	r3, r0
 8002120:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002122:	e00c      	b.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	3320      	adds	r3, #32
 8002128:	2100      	movs	r1, #0
 800212a:	4618      	mov	r0, r3
 800212c:	f000 fbb6 	bl	800289c <RCCEx_PLLSAI2_Config>
 8002130:	4603      	mov	r3, r0
 8002132:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002134:	e003      	b.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	74fb      	strb	r3, [r7, #19]
      break;
 800213a:	e000      	b.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800213c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800213e:	7cfb      	ldrb	r3, [r7, #19]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d10b      	bne.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002144:	4b76      	ldr	r3, [pc, #472]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002146:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800214a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002152:	4973      	ldr	r1, [pc, #460]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002154:	4313      	orrs	r3, r2
 8002156:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800215a:	e001      	b.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800215c:	7cfb      	ldrb	r3, [r7, #19]
 800215e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d041      	beq.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002170:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002174:	d02a      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002176:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800217a:	d824      	bhi.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800217c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002180:	d008      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002182:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002186:	d81e      	bhi.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002188:	2b00      	cmp	r3, #0
 800218a:	d00a      	beq.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800218c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002190:	d010      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002192:	e018      	b.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002194:	4b62      	ldr	r3, [pc, #392]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	4a61      	ldr	r2, [pc, #388]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800219a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800219e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021a0:	e015      	b.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	3304      	adds	r3, #4
 80021a6:	2100      	movs	r1, #0
 80021a8:	4618      	mov	r0, r3
 80021aa:	f000 fa83 	bl	80026b4 <RCCEx_PLLSAI1_Config>
 80021ae:	4603      	mov	r3, r0
 80021b0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021b2:	e00c      	b.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	3320      	adds	r3, #32
 80021b8:	2100      	movs	r1, #0
 80021ba:	4618      	mov	r0, r3
 80021bc:	f000 fb6e 	bl	800289c <RCCEx_PLLSAI2_Config>
 80021c0:	4603      	mov	r3, r0
 80021c2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021c4:	e003      	b.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	74fb      	strb	r3, [r7, #19]
      break;
 80021ca:	e000      	b.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80021cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021ce:	7cfb      	ldrb	r3, [r7, #19]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d10b      	bne.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80021d4:	4b52      	ldr	r3, [pc, #328]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021da:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80021e2:	494f      	ldr	r1, [pc, #316]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80021ea:	e001      	b.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021ec:	7cfb      	ldrb	r3, [r7, #19]
 80021ee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f000 80a0 	beq.w	800233e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021fe:	2300      	movs	r3, #0
 8002200:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002202:	4b47      	ldr	r3, [pc, #284]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002206:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800220e:	2301      	movs	r3, #1
 8002210:	e000      	b.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002212:	2300      	movs	r3, #0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d00d      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002218:	4b41      	ldr	r3, [pc, #260]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800221a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800221c:	4a40      	ldr	r2, [pc, #256]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800221e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002222:	6593      	str	r3, [r2, #88]	@ 0x58
 8002224:	4b3e      	ldr	r3, [pc, #248]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002226:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002228:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800222c:	60bb      	str	r3, [r7, #8]
 800222e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002230:	2301      	movs	r3, #1
 8002232:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002234:	4b3b      	ldr	r3, [pc, #236]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a3a      	ldr	r2, [pc, #232]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800223a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800223e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002240:	f7fe fd3a 	bl	8000cb8 <HAL_GetTick>
 8002244:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002246:	e009      	b.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002248:	f7fe fd36 	bl	8000cb8 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d902      	bls.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	74fb      	strb	r3, [r7, #19]
        break;
 800225a:	e005      	b.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800225c:	4b31      	ldr	r3, [pc, #196]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002264:	2b00      	cmp	r3, #0
 8002266:	d0ef      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002268:	7cfb      	ldrb	r3, [r7, #19]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d15c      	bne.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800226e:	4b2c      	ldr	r3, [pc, #176]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002270:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002274:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002278:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d01f      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	429a      	cmp	r2, r3
 800228a:	d019      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800228c:	4b24      	ldr	r3, [pc, #144]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800228e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002292:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002296:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002298:	4b21      	ldr	r3, [pc, #132]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800229a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800229e:	4a20      	ldr	r2, [pc, #128]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022ae:	4a1c      	ldr	r2, [pc, #112]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022b8:	4a19      	ldr	r2, [pc, #100]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d016      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ca:	f7fe fcf5 	bl	8000cb8 <HAL_GetTick>
 80022ce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022d0:	e00b      	b.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022d2:	f7fe fcf1 	bl	8000cb8 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d902      	bls.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	74fb      	strb	r3, [r7, #19]
            break;
 80022e8:	e006      	b.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d0ec      	beq.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80022f8:	7cfb      	ldrb	r3, [r7, #19]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10c      	bne.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022fe:	4b08      	ldr	r3, [pc, #32]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002300:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002304:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800230e:	4904      	ldr	r1, [pc, #16]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002310:	4313      	orrs	r3, r2
 8002312:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002316:	e009      	b.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002318:	7cfb      	ldrb	r3, [r7, #19]
 800231a:	74bb      	strb	r3, [r7, #18]
 800231c:	e006      	b.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800231e:	bf00      	nop
 8002320:	40021000 	.word	0x40021000
 8002324:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002328:	7cfb      	ldrb	r3, [r7, #19]
 800232a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800232c:	7c7b      	ldrb	r3, [r7, #17]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d105      	bne.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002332:	4b9e      	ldr	r3, [pc, #632]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002336:	4a9d      	ldr	r2, [pc, #628]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002338:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800233c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00a      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800234a:	4b98      	ldr	r3, [pc, #608]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800234c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002350:	f023 0203 	bic.w	r2, r3, #3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002358:	4994      	ldr	r1, [pc, #592]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800235a:	4313      	orrs	r3, r2
 800235c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d00a      	beq.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800236c:	4b8f      	ldr	r3, [pc, #572]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800236e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002372:	f023 020c 	bic.w	r2, r3, #12
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800237a:	498c      	ldr	r1, [pc, #560]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800237c:	4313      	orrs	r3, r2
 800237e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0304 	and.w	r3, r3, #4
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00a      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800238e:	4b87      	ldr	r3, [pc, #540]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002390:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002394:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239c:	4983      	ldr	r1, [pc, #524]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0308 	and.w	r3, r3, #8
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d00a      	beq.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023b0:	4b7e      	ldr	r3, [pc, #504]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023b6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023be:	497b      	ldr	r1, [pc, #492]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0310 	and.w	r3, r3, #16
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00a      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80023d2:	4b76      	ldr	r3, [pc, #472]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023e0:	4972      	ldr	r1, [pc, #456]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0320 	and.w	r3, r3, #32
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d00a      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023f4:	4b6d      	ldr	r3, [pc, #436]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023fa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002402:	496a      	ldr	r1, [pc, #424]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002404:	4313      	orrs	r3, r2
 8002406:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00a      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002416:	4b65      	ldr	r3, [pc, #404]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002418:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800241c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002424:	4961      	ldr	r1, [pc, #388]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002426:	4313      	orrs	r3, r2
 8002428:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002434:	2b00      	cmp	r3, #0
 8002436:	d00a      	beq.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002438:	4b5c      	ldr	r3, [pc, #368]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800243a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800243e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002446:	4959      	ldr	r1, [pc, #356]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002448:	4313      	orrs	r3, r2
 800244a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00a      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800245a:	4b54      	ldr	r3, [pc, #336]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800245c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002460:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002468:	4950      	ldr	r1, [pc, #320]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800246a:	4313      	orrs	r3, r2
 800246c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002478:	2b00      	cmp	r3, #0
 800247a:	d00a      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800247c:	4b4b      	ldr	r3, [pc, #300]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800247e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002482:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800248a:	4948      	ldr	r1, [pc, #288]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800248c:	4313      	orrs	r3, r2
 800248e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00a      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800249e:	4b43      	ldr	r3, [pc, #268]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024a4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ac:	493f      	ldr	r1, [pc, #252]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d028      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024c0:	4b3a      	ldr	r3, [pc, #232]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024c6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024ce:	4937      	ldr	r1, [pc, #220]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80024de:	d106      	bne.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024e0:	4b32      	ldr	r3, [pc, #200]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	4a31      	ldr	r2, [pc, #196]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80024ea:	60d3      	str	r3, [r2, #12]
 80024ec:	e011      	b.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024f2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80024f6:	d10c      	bne.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	3304      	adds	r3, #4
 80024fc:	2101      	movs	r1, #1
 80024fe:	4618      	mov	r0, r3
 8002500:	f000 f8d8 	bl	80026b4 <RCCEx_PLLSAI1_Config>
 8002504:	4603      	mov	r3, r0
 8002506:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002508:	7cfb      	ldrb	r3, [r7, #19]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800250e:	7cfb      	ldrb	r3, [r7, #19]
 8002510:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d028      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800251e:	4b23      	ldr	r3, [pc, #140]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002520:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002524:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800252c:	491f      	ldr	r1, [pc, #124]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800252e:	4313      	orrs	r3, r2
 8002530:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002538:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800253c:	d106      	bne.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800253e:	4b1b      	ldr	r3, [pc, #108]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	4a1a      	ldr	r2, [pc, #104]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002544:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002548:	60d3      	str	r3, [r2, #12]
 800254a:	e011      	b.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002550:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002554:	d10c      	bne.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	3304      	adds	r3, #4
 800255a:	2101      	movs	r1, #1
 800255c:	4618      	mov	r0, r3
 800255e:	f000 f8a9 	bl	80026b4 <RCCEx_PLLSAI1_Config>
 8002562:	4603      	mov	r3, r0
 8002564:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002566:	7cfb      	ldrb	r3, [r7, #19]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800256c:	7cfb      	ldrb	r3, [r7, #19]
 800256e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d02b      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800257c:	4b0b      	ldr	r3, [pc, #44]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800257e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002582:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800258a:	4908      	ldr	r1, [pc, #32]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800258c:	4313      	orrs	r3, r2
 800258e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002596:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800259a:	d109      	bne.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800259c:	4b03      	ldr	r3, [pc, #12]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	4a02      	ldr	r2, [pc, #8]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80025a6:	60d3      	str	r3, [r2, #12]
 80025a8:	e014      	b.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80025aa:	bf00      	nop
 80025ac:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025b4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80025b8:	d10c      	bne.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	3304      	adds	r3, #4
 80025be:	2101      	movs	r1, #1
 80025c0:	4618      	mov	r0, r3
 80025c2:	f000 f877 	bl	80026b4 <RCCEx_PLLSAI1_Config>
 80025c6:	4603      	mov	r3, r0
 80025c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025ca:	7cfb      	ldrb	r3, [r7, #19]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80025d0:	7cfb      	ldrb	r3, [r7, #19]
 80025d2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d02f      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025e0:	4b2b      	ldr	r3, [pc, #172]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025e6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80025ee:	4928      	ldr	r1, [pc, #160]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80025fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80025fe:	d10d      	bne.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3304      	adds	r3, #4
 8002604:	2102      	movs	r1, #2
 8002606:	4618      	mov	r0, r3
 8002608:	f000 f854 	bl	80026b4 <RCCEx_PLLSAI1_Config>
 800260c:	4603      	mov	r3, r0
 800260e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002610:	7cfb      	ldrb	r3, [r7, #19]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d014      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002616:	7cfb      	ldrb	r3, [r7, #19]
 8002618:	74bb      	strb	r3, [r7, #18]
 800261a:	e011      	b.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002620:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002624:	d10c      	bne.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	3320      	adds	r3, #32
 800262a:	2102      	movs	r1, #2
 800262c:	4618      	mov	r0, r3
 800262e:	f000 f935 	bl	800289c <RCCEx_PLLSAI2_Config>
 8002632:	4603      	mov	r3, r0
 8002634:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002636:	7cfb      	ldrb	r3, [r7, #19]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800263c:	7cfb      	ldrb	r3, [r7, #19]
 800263e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00a      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800264c:	4b10      	ldr	r3, [pc, #64]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800264e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002652:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800265a:	490d      	ldr	r1, [pc, #52]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800265c:	4313      	orrs	r3, r2
 800265e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00b      	beq.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800266e:	4b08      	ldr	r3, [pc, #32]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002670:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002674:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800267e:	4904      	ldr	r1, [pc, #16]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002680:	4313      	orrs	r3, r2
 8002682:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002686:	7cbb      	ldrb	r3, [r7, #18]
}
 8002688:	4618      	mov	r0, r3
 800268a:	3718      	adds	r7, #24
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40021000 	.word	0x40021000

08002694 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002698:	4b05      	ldr	r3, [pc, #20]	@ (80026b0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a04      	ldr	r2, [pc, #16]	@ (80026b0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800269e:	f043 0304 	orr.w	r3, r3, #4
 80026a2:	6013      	str	r3, [r2, #0]
}
 80026a4:	bf00      	nop
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	40021000 	.word	0x40021000

080026b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80026be:	2300      	movs	r3, #0
 80026c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026c2:	4b75      	ldr	r3, [pc, #468]	@ (8002898 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	f003 0303 	and.w	r3, r3, #3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d018      	beq.n	8002700 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80026ce:	4b72      	ldr	r3, [pc, #456]	@ (8002898 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	f003 0203 	and.w	r2, r3, #3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d10d      	bne.n	80026fa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
       ||
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d009      	beq.n	80026fa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80026e6:	4b6c      	ldr	r3, [pc, #432]	@ (8002898 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	091b      	lsrs	r3, r3, #4
 80026ec:	f003 0307 	and.w	r3, r3, #7
 80026f0:	1c5a      	adds	r2, r3, #1
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
       ||
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d047      	beq.n	800278a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	73fb      	strb	r3, [r7, #15]
 80026fe:	e044      	b.n	800278a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2b03      	cmp	r3, #3
 8002706:	d018      	beq.n	800273a <RCCEx_PLLSAI1_Config+0x86>
 8002708:	2b03      	cmp	r3, #3
 800270a:	d825      	bhi.n	8002758 <RCCEx_PLLSAI1_Config+0xa4>
 800270c:	2b01      	cmp	r3, #1
 800270e:	d002      	beq.n	8002716 <RCCEx_PLLSAI1_Config+0x62>
 8002710:	2b02      	cmp	r3, #2
 8002712:	d009      	beq.n	8002728 <RCCEx_PLLSAI1_Config+0x74>
 8002714:	e020      	b.n	8002758 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002716:	4b60      	ldr	r3, [pc, #384]	@ (8002898 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d11d      	bne.n	800275e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002726:	e01a      	b.n	800275e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002728:	4b5b      	ldr	r3, [pc, #364]	@ (8002898 <RCCEx_PLLSAI1_Config+0x1e4>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002730:	2b00      	cmp	r3, #0
 8002732:	d116      	bne.n	8002762 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002738:	e013      	b.n	8002762 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800273a:	4b57      	ldr	r3, [pc, #348]	@ (8002898 <RCCEx_PLLSAI1_Config+0x1e4>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10f      	bne.n	8002766 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002746:	4b54      	ldr	r3, [pc, #336]	@ (8002898 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d109      	bne.n	8002766 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002756:	e006      	b.n	8002766 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	73fb      	strb	r3, [r7, #15]
      break;
 800275c:	e004      	b.n	8002768 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800275e:	bf00      	nop
 8002760:	e002      	b.n	8002768 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002762:	bf00      	nop
 8002764:	e000      	b.n	8002768 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002766:	bf00      	nop
    }

    if(status == HAL_OK)
 8002768:	7bfb      	ldrb	r3, [r7, #15]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d10d      	bne.n	800278a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800276e:	4b4a      	ldr	r3, [pc, #296]	@ (8002898 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6819      	ldr	r1, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	3b01      	subs	r3, #1
 8002780:	011b      	lsls	r3, r3, #4
 8002782:	430b      	orrs	r3, r1
 8002784:	4944      	ldr	r1, [pc, #272]	@ (8002898 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002786:	4313      	orrs	r3, r2
 8002788:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800278a:	7bfb      	ldrb	r3, [r7, #15]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d17d      	bne.n	800288c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002790:	4b41      	ldr	r3, [pc, #260]	@ (8002898 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a40      	ldr	r2, [pc, #256]	@ (8002898 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002796:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800279a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800279c:	f7fe fa8c 	bl	8000cb8 <HAL_GetTick>
 80027a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027a2:	e009      	b.n	80027b8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027a4:	f7fe fa88 	bl	8000cb8 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d902      	bls.n	80027b8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	73fb      	strb	r3, [r7, #15]
        break;
 80027b6:	e005      	b.n	80027c4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027b8:	4b37      	ldr	r3, [pc, #220]	@ (8002898 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1ef      	bne.n	80027a4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80027c4:	7bfb      	ldrb	r3, [r7, #15]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d160      	bne.n	800288c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d111      	bne.n	80027f4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027d0:	4b31      	ldr	r3, [pc, #196]	@ (8002898 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80027d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	6892      	ldr	r2, [r2, #8]
 80027e0:	0211      	lsls	r1, r2, #8
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	68d2      	ldr	r2, [r2, #12]
 80027e6:	0912      	lsrs	r2, r2, #4
 80027e8:	0452      	lsls	r2, r2, #17
 80027ea:	430a      	orrs	r2, r1
 80027ec:	492a      	ldr	r1, [pc, #168]	@ (8002898 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	610b      	str	r3, [r1, #16]
 80027f2:	e027      	b.n	8002844 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d112      	bne.n	8002820 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027fa:	4b27      	ldr	r3, [pc, #156]	@ (8002898 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002802:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	6892      	ldr	r2, [r2, #8]
 800280a:	0211      	lsls	r1, r2, #8
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	6912      	ldr	r2, [r2, #16]
 8002810:	0852      	lsrs	r2, r2, #1
 8002812:	3a01      	subs	r2, #1
 8002814:	0552      	lsls	r2, r2, #21
 8002816:	430a      	orrs	r2, r1
 8002818:	491f      	ldr	r1, [pc, #124]	@ (8002898 <RCCEx_PLLSAI1_Config+0x1e4>)
 800281a:	4313      	orrs	r3, r2
 800281c:	610b      	str	r3, [r1, #16]
 800281e:	e011      	b.n	8002844 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002820:	4b1d      	ldr	r3, [pc, #116]	@ (8002898 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002828:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	6892      	ldr	r2, [r2, #8]
 8002830:	0211      	lsls	r1, r2, #8
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	6952      	ldr	r2, [r2, #20]
 8002836:	0852      	lsrs	r2, r2, #1
 8002838:	3a01      	subs	r2, #1
 800283a:	0652      	lsls	r2, r2, #25
 800283c:	430a      	orrs	r2, r1
 800283e:	4916      	ldr	r1, [pc, #88]	@ (8002898 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002840:	4313      	orrs	r3, r2
 8002842:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002844:	4b14      	ldr	r3, [pc, #80]	@ (8002898 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a13      	ldr	r2, [pc, #76]	@ (8002898 <RCCEx_PLLSAI1_Config+0x1e4>)
 800284a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800284e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002850:	f7fe fa32 	bl	8000cb8 <HAL_GetTick>
 8002854:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002856:	e009      	b.n	800286c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002858:	f7fe fa2e 	bl	8000cb8 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d902      	bls.n	800286c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	73fb      	strb	r3, [r7, #15]
          break;
 800286a:	e005      	b.n	8002878 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800286c:	4b0a      	ldr	r3, [pc, #40]	@ (8002898 <RCCEx_PLLSAI1_Config+0x1e4>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0ef      	beq.n	8002858 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002878:	7bfb      	ldrb	r3, [r7, #15]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d106      	bne.n	800288c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800287e:	4b06      	ldr	r3, [pc, #24]	@ (8002898 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002880:	691a      	ldr	r2, [r3, #16]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	4904      	ldr	r1, [pc, #16]	@ (8002898 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002888:	4313      	orrs	r3, r2
 800288a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800288c:	7bfb      	ldrb	r3, [r7, #15]
}
 800288e:	4618      	mov	r0, r3
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	40021000 	.word	0x40021000

0800289c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028a6:	2300      	movs	r3, #0
 80028a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80028aa:	4b6a      	ldr	r3, [pc, #424]	@ (8002a54 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	f003 0303 	and.w	r3, r3, #3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d018      	beq.n	80028e8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80028b6:	4b67      	ldr	r3, [pc, #412]	@ (8002a54 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	f003 0203 	and.w	r2, r3, #3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d10d      	bne.n	80028e2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
       ||
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d009      	beq.n	80028e2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80028ce:	4b61      	ldr	r3, [pc, #388]	@ (8002a54 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	091b      	lsrs	r3, r3, #4
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	1c5a      	adds	r2, r3, #1
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
       ||
 80028de:	429a      	cmp	r2, r3
 80028e0:	d047      	beq.n	8002972 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	73fb      	strb	r3, [r7, #15]
 80028e6:	e044      	b.n	8002972 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2b03      	cmp	r3, #3
 80028ee:	d018      	beq.n	8002922 <RCCEx_PLLSAI2_Config+0x86>
 80028f0:	2b03      	cmp	r3, #3
 80028f2:	d825      	bhi.n	8002940 <RCCEx_PLLSAI2_Config+0xa4>
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d002      	beq.n	80028fe <RCCEx_PLLSAI2_Config+0x62>
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d009      	beq.n	8002910 <RCCEx_PLLSAI2_Config+0x74>
 80028fc:	e020      	b.n	8002940 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028fe:	4b55      	ldr	r3, [pc, #340]	@ (8002a54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d11d      	bne.n	8002946 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800290e:	e01a      	b.n	8002946 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002910:	4b50      	ldr	r3, [pc, #320]	@ (8002a54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002918:	2b00      	cmp	r3, #0
 800291a:	d116      	bne.n	800294a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002920:	e013      	b.n	800294a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002922:	4b4c      	ldr	r3, [pc, #304]	@ (8002a54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10f      	bne.n	800294e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800292e:	4b49      	ldr	r3, [pc, #292]	@ (8002a54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d109      	bne.n	800294e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800293e:	e006      	b.n	800294e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	73fb      	strb	r3, [r7, #15]
      break;
 8002944:	e004      	b.n	8002950 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002946:	bf00      	nop
 8002948:	e002      	b.n	8002950 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800294a:	bf00      	nop
 800294c:	e000      	b.n	8002950 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800294e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002950:	7bfb      	ldrb	r3, [r7, #15]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10d      	bne.n	8002972 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002956:	4b3f      	ldr	r3, [pc, #252]	@ (8002a54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6819      	ldr	r1, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	3b01      	subs	r3, #1
 8002968:	011b      	lsls	r3, r3, #4
 800296a:	430b      	orrs	r3, r1
 800296c:	4939      	ldr	r1, [pc, #228]	@ (8002a54 <RCCEx_PLLSAI2_Config+0x1b8>)
 800296e:	4313      	orrs	r3, r2
 8002970:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002972:	7bfb      	ldrb	r3, [r7, #15]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d167      	bne.n	8002a48 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002978:	4b36      	ldr	r3, [pc, #216]	@ (8002a54 <RCCEx_PLLSAI2_Config+0x1b8>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a35      	ldr	r2, [pc, #212]	@ (8002a54 <RCCEx_PLLSAI2_Config+0x1b8>)
 800297e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002982:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002984:	f7fe f998 	bl	8000cb8 <HAL_GetTick>
 8002988:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800298a:	e009      	b.n	80029a0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800298c:	f7fe f994 	bl	8000cb8 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b02      	cmp	r3, #2
 8002998:	d902      	bls.n	80029a0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	73fb      	strb	r3, [r7, #15]
        break;
 800299e:	e005      	b.n	80029ac <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80029a0:	4b2c      	ldr	r3, [pc, #176]	@ (8002a54 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1ef      	bne.n	800298c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80029ac:	7bfb      	ldrb	r3, [r7, #15]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d14a      	bne.n	8002a48 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d111      	bne.n	80029dc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80029b8:	4b26      	ldr	r3, [pc, #152]	@ (8002a54 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029ba:	695b      	ldr	r3, [r3, #20]
 80029bc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80029c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	6892      	ldr	r2, [r2, #8]
 80029c8:	0211      	lsls	r1, r2, #8
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	68d2      	ldr	r2, [r2, #12]
 80029ce:	0912      	lsrs	r2, r2, #4
 80029d0:	0452      	lsls	r2, r2, #17
 80029d2:	430a      	orrs	r2, r1
 80029d4:	491f      	ldr	r1, [pc, #124]	@ (8002a54 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	614b      	str	r3, [r1, #20]
 80029da:	e011      	b.n	8002a00 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80029dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002a54 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029de:	695b      	ldr	r3, [r3, #20]
 80029e0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80029e4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	6892      	ldr	r2, [r2, #8]
 80029ec:	0211      	lsls	r1, r2, #8
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	6912      	ldr	r2, [r2, #16]
 80029f2:	0852      	lsrs	r2, r2, #1
 80029f4:	3a01      	subs	r2, #1
 80029f6:	0652      	lsls	r2, r2, #25
 80029f8:	430a      	orrs	r2, r1
 80029fa:	4916      	ldr	r1, [pc, #88]	@ (8002a54 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002a00:	4b14      	ldr	r3, [pc, #80]	@ (8002a54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a13      	ldr	r2, [pc, #76]	@ (8002a54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a0a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a0c:	f7fe f954 	bl	8000cb8 <HAL_GetTick>
 8002a10:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a12:	e009      	b.n	8002a28 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a14:	f7fe f950 	bl	8000cb8 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d902      	bls.n	8002a28 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	73fb      	strb	r3, [r7, #15]
          break;
 8002a26:	e005      	b.n	8002a34 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a28:	4b0a      	ldr	r3, [pc, #40]	@ (8002a54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d0ef      	beq.n	8002a14 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002a34:	7bfb      	ldrb	r3, [r7, #15]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d106      	bne.n	8002a48 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002a3a:	4b06      	ldr	r3, [pc, #24]	@ (8002a54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a3c:	695a      	ldr	r2, [r3, #20]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	4904      	ldr	r1, [pc, #16]	@ (8002a54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	40021000 	.word	0x40021000

08002a58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e040      	b.n	8002aec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d106      	bne.n	8002a80 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f7fd ff1a 	bl	80008b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2224      	movs	r2, #36	@ 0x24
 8002a84:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 0201 	bic.w	r2, r2, #1
 8002a94:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d002      	beq.n	8002aa4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 fec8 	bl	8003834 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 fc0d 	bl	80032c4 <UART_SetConfig>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d101      	bne.n	8002ab4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e01b      	b.n	8002aec <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ac2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689a      	ldr	r2, [r3, #8]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ad2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f042 0201 	orr.w	r2, r2, #1
 8002ae2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 ff47 	bl	8003978 <UART_CheckIdleState>
 8002aea:	4603      	mov	r3, r0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b08a      	sub	sp, #40	@ 0x28
 8002af8:	af02      	add	r7, sp, #8
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	603b      	str	r3, [r7, #0]
 8002b00:	4613      	mov	r3, r2
 8002b02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b08:	2b20      	cmp	r3, #32
 8002b0a:	d177      	bne.n	8002bfc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d002      	beq.n	8002b18 <HAL_UART_Transmit+0x24>
 8002b12:	88fb      	ldrh	r3, [r7, #6]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d101      	bne.n	8002b1c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e070      	b.n	8002bfe <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2221      	movs	r2, #33	@ 0x21
 8002b28:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b2a:	f7fe f8c5 	bl	8000cb8 <HAL_GetTick>
 8002b2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	88fa      	ldrh	r2, [r7, #6]
 8002b34:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	88fa      	ldrh	r2, [r7, #6]
 8002b3c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b48:	d108      	bne.n	8002b5c <HAL_UART_Transmit+0x68>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d104      	bne.n	8002b5c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002b52:	2300      	movs	r3, #0
 8002b54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	61bb      	str	r3, [r7, #24]
 8002b5a:	e003      	b.n	8002b64 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b60:	2300      	movs	r3, #0
 8002b62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b64:	e02f      	b.n	8002bc6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	9300      	str	r3, [sp, #0]
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	2180      	movs	r1, #128	@ 0x80
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f000 ffa9 	bl	8003ac8 <UART_WaitOnFlagUntilTimeout>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d004      	beq.n	8002b86 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2220      	movs	r2, #32
 8002b80:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e03b      	b.n	8002bfe <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d10b      	bne.n	8002ba4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	881a      	ldrh	r2, [r3, #0]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b98:	b292      	uxth	r2, r2
 8002b9a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	3302      	adds	r3, #2
 8002ba0:	61bb      	str	r3, [r7, #24]
 8002ba2:	e007      	b.n	8002bb4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	781a      	ldrb	r2, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1c9      	bne.n	8002b66 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	2140      	movs	r1, #64	@ 0x40
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f000 ff73 	bl	8003ac8 <UART_WaitOnFlagUntilTimeout>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d004      	beq.n	8002bf2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2220      	movs	r2, #32
 8002bec:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e005      	b.n	8002bfe <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2220      	movs	r2, #32
 8002bf6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	e000      	b.n	8002bfe <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002bfc:	2302      	movs	r3, #2
  }
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3720      	adds	r7, #32
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
	...

08002c08 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b08b      	sub	sp, #44	@ 0x2c
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	4613      	mov	r3, r2
 8002c14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c1a:	2b20      	cmp	r3, #32
 8002c1c:	d147      	bne.n	8002cae <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d002      	beq.n	8002c2a <HAL_UART_Transmit_IT+0x22>
 8002c24:	88fb      	ldrh	r3, [r7, #6]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e040      	b.n	8002cb0 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	68ba      	ldr	r2, [r7, #8]
 8002c32:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	88fa      	ldrh	r2, [r7, #6]
 8002c38:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	88fa      	ldrh	r2, [r7, #6]
 8002c40:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2221      	movs	r2, #33	@ 0x21
 8002c56:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c60:	d107      	bne.n	8002c72 <HAL_UART_Transmit_IT+0x6a>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d103      	bne.n	8002c72 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	4a13      	ldr	r2, [pc, #76]	@ (8002cbc <HAL_UART_Transmit_IT+0xb4>)
 8002c6e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8002c70:	e002      	b.n	8002c78 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	4a12      	ldr	r2, [pc, #72]	@ (8002cc0 <HAL_UART_Transmit_IT+0xb8>)
 8002c76:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	e853 3f00 	ldrex	r3, [r3]
 8002c84:	613b      	str	r3, [r7, #16]
   return(result);
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	461a      	mov	r2, r3
 8002c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c96:	623b      	str	r3, [r7, #32]
 8002c98:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c9a:	69f9      	ldr	r1, [r7, #28]
 8002c9c:	6a3a      	ldr	r2, [r7, #32]
 8002c9e:	e841 2300 	strex	r3, r2, [r1]
 8002ca2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1e6      	bne.n	8002c78 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8002caa:	2300      	movs	r3, #0
 8002cac:	e000      	b.n	8002cb0 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8002cae:	2302      	movs	r3, #2
  }
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	372c      	adds	r7, #44	@ 0x2c
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr
 8002cbc:	08003d41 	.word	0x08003d41
 8002cc0:	08003c8b 	.word	0x08003c8b

08002cc4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b0ba      	sub	sp, #232	@ 0xe8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002cea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002cee:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002cf8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d115      	bne.n	8002d2c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002d00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d04:	f003 0320 	and.w	r3, r3, #32
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00f      	beq.n	8002d2c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002d0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d10:	f003 0320 	and.w	r3, r3, #32
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d009      	beq.n	8002d2c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f000 82ae 	beq.w	800327e <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	4798      	blx	r3
      }
      return;
 8002d2a:	e2a8      	b.n	800327e <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002d2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f000 8117 	beq.w	8002f64 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002d36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d106      	bne.n	8002d50 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002d42:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002d46:	4b85      	ldr	r3, [pc, #532]	@ (8002f5c <HAL_UART_IRQHandler+0x298>)
 8002d48:	4013      	ands	r3, r2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f000 810a 	beq.w	8002f64 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002d50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d011      	beq.n	8002d80 <HAL_UART_IRQHandler+0xbc>
 8002d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00b      	beq.n	8002d80 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d76:	f043 0201 	orr.w	r2, r3, #1
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d011      	beq.n	8002db0 <HAL_UART_IRQHandler+0xec>
 8002d8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00b      	beq.n	8002db0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2202      	movs	r2, #2
 8002d9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002da6:	f043 0204 	orr.w	r2, r3, #4
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002db0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002db4:	f003 0304 	and.w	r3, r3, #4
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d011      	beq.n	8002de0 <HAL_UART_IRQHandler+0x11c>
 8002dbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002dc0:	f003 0301 	and.w	r3, r3, #1
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00b      	beq.n	8002de0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2204      	movs	r2, #4
 8002dce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002dd6:	f043 0202 	orr.w	r2, r3, #2
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002de0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002de4:	f003 0308 	and.w	r3, r3, #8
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d017      	beq.n	8002e1c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002dec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002df0:	f003 0320 	and.w	r3, r3, #32
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d105      	bne.n	8002e04 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002df8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002dfc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00b      	beq.n	8002e1c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2208      	movs	r2, #8
 8002e0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e12:	f043 0208 	orr.w	r2, r3, #8
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002e1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d012      	beq.n	8002e4e <HAL_UART_IRQHandler+0x18a>
 8002e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e2c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00c      	beq.n	8002e4e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002e3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e44:	f043 0220 	orr.w	r2, r3, #32
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f000 8214 	beq.w	8003282 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e5e:	f003 0320 	and.w	r3, r3, #32
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00d      	beq.n	8002e82 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002e66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e6a:	f003 0320 	and.w	r3, r3, #32
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d007      	beq.n	8002e82 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d003      	beq.n	8002e82 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e88:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e96:	2b40      	cmp	r3, #64	@ 0x40
 8002e98:	d005      	beq.n	8002ea6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002e9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e9e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d04f      	beq.n	8002f46 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 fe75 	bl	8003b96 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eb6:	2b40      	cmp	r3, #64	@ 0x40
 8002eb8:	d141      	bne.n	8002f3e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	3308      	adds	r3, #8
 8002ec0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002ec8:	e853 3f00 	ldrex	r3, [r3]
 8002ecc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002ed0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ed4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ed8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	3308      	adds	r3, #8
 8002ee2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002ee6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002eea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002ef2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002ef6:	e841 2300 	strex	r3, r2, [r1]
 8002efa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002efe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1d9      	bne.n	8002eba <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d013      	beq.n	8002f36 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f12:	4a13      	ldr	r2, [pc, #76]	@ (8002f60 <HAL_UART_IRQHandler+0x29c>)
 8002f14:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7fe f827 	bl	8000f6e <HAL_DMA_Abort_IT>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d017      	beq.n	8002f56 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002f30:	4610      	mov	r0, r2
 8002f32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f34:	e00f      	b.n	8002f56 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 f9ae 	bl	8003298 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f3c:	e00b      	b.n	8002f56 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 f9aa 	bl	8003298 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f44:	e007      	b.n	8002f56 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 f9a6 	bl	8003298 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8002f54:	e195      	b.n	8003282 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f56:	bf00      	nop
    return;
 8002f58:	e193      	b.n	8003282 <HAL_UART_IRQHandler+0x5be>
 8002f5a:	bf00      	nop
 8002f5c:	04000120 	.word	0x04000120
 8002f60:	08003c5f 	.word	0x08003c5f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	f040 814e 	bne.w	800320a <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f72:	f003 0310 	and.w	r3, r3, #16
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f000 8147 	beq.w	800320a <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002f7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f80:	f003 0310 	and.w	r3, r3, #16
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f000 8140 	beq.w	800320a <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2210      	movs	r2, #16
 8002f90:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f9c:	2b40      	cmp	r3, #64	@ 0x40
 8002f9e:	f040 80b8 	bne.w	8003112 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002fae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	f000 8167 	beq.w	8003286 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002fbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	f080 815f 	bcs.w	8003286 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002fce:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0320 	and.w	r3, r3, #32
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f040 8086 	bne.w	80030f0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002ff0:	e853 3f00 	ldrex	r3, [r3]
 8002ff4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002ff8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ffc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003000:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	461a      	mov	r2, r3
 800300a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800300e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003012:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003016:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800301a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800301e:	e841 2300 	strex	r3, r2, [r1]
 8003022:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003026:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1da      	bne.n	8002fe4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	3308      	adds	r3, #8
 8003034:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003036:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003038:	e853 3f00 	ldrex	r3, [r3]
 800303c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800303e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003040:	f023 0301 	bic.w	r3, r3, #1
 8003044:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	3308      	adds	r3, #8
 800304e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003052:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003056:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003058:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800305a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800305e:	e841 2300 	strex	r3, r2, [r1]
 8003062:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003064:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1e1      	bne.n	800302e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	3308      	adds	r3, #8
 8003070:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003072:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003074:	e853 3f00 	ldrex	r3, [r3]
 8003078:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800307a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800307c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003080:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	3308      	adds	r3, #8
 800308a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800308e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003090:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003092:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003094:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003096:	e841 2300 	strex	r3, r2, [r1]
 800309a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800309c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1e3      	bne.n	800306a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2220      	movs	r2, #32
 80030a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030b8:	e853 3f00 	ldrex	r3, [r3]
 80030bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80030be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030c0:	f023 0310 	bic.w	r3, r3, #16
 80030c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	461a      	mov	r2, r3
 80030ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80030d2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80030d4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80030d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80030da:	e841 2300 	strex	r3, r2, [r1]
 80030de:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80030e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1e4      	bne.n	80030b0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7fd ff01 	bl	8000ef2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2202      	movs	r2, #2
 80030f4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003102:	b29b      	uxth	r3, r3
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	b29b      	uxth	r3, r3
 8003108:	4619      	mov	r1, r3
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 f8ce 	bl	80032ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003110:	e0b9      	b.n	8003286 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800311e:	b29b      	uxth	r3, r3
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800312c:	b29b      	uxth	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	f000 80ab 	beq.w	800328a <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8003134:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003138:	2b00      	cmp	r3, #0
 800313a:	f000 80a6 	beq.w	800328a <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003146:	e853 3f00 	ldrex	r3, [r3]
 800314a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800314c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800314e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003152:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	461a      	mov	r2, r3
 800315c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003160:	647b      	str	r3, [r7, #68]	@ 0x44
 8003162:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003164:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003166:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003168:	e841 2300 	strex	r3, r2, [r1]
 800316c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800316e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1e4      	bne.n	800313e <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	3308      	adds	r3, #8
 800317a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800317c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800317e:	e853 3f00 	ldrex	r3, [r3]
 8003182:	623b      	str	r3, [r7, #32]
   return(result);
 8003184:	6a3b      	ldr	r3, [r7, #32]
 8003186:	f023 0301 	bic.w	r3, r3, #1
 800318a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	3308      	adds	r3, #8
 8003194:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003198:	633a      	str	r2, [r7, #48]	@ 0x30
 800319a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800319c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800319e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031a0:	e841 2300 	strex	r3, r2, [r1]
 80031a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80031a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1e3      	bne.n	8003174 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2220      	movs	r2, #32
 80031b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	e853 3f00 	ldrex	r3, [r3]
 80031cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f023 0310 	bic.w	r3, r3, #16
 80031d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	461a      	mov	r2, r3
 80031de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80031e2:	61fb      	str	r3, [r7, #28]
 80031e4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e6:	69b9      	ldr	r1, [r7, #24]
 80031e8:	69fa      	ldr	r2, [r7, #28]
 80031ea:	e841 2300 	strex	r3, r2, [r1]
 80031ee:	617b      	str	r3, [r7, #20]
   return(result);
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1e4      	bne.n	80031c0 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2202      	movs	r2, #2
 80031fa:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80031fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003200:	4619      	mov	r1, r3
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f852 	bl	80032ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003208:	e03f      	b.n	800328a <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800320a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800320e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00e      	beq.n	8003234 <HAL_UART_IRQHandler+0x570>
 8003216:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800321a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d008      	beq.n	8003234 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800322a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 fe11 	bl	8003e54 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003232:	e02d      	b.n	8003290 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003238:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00e      	beq.n	800325e <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003244:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003248:	2b00      	cmp	r3, #0
 800324a:	d008      	beq.n	800325e <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003250:	2b00      	cmp	r3, #0
 8003252:	d01c      	beq.n	800328e <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	4798      	blx	r3
    }
    return;
 800325c:	e017      	b.n	800328e <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800325e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003262:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003266:	2b00      	cmp	r3, #0
 8003268:	d012      	beq.n	8003290 <HAL_UART_IRQHandler+0x5cc>
 800326a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800326e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00c      	beq.n	8003290 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 fdc2 	bl	8003e00 <UART_EndTransmit_IT>
    return;
 800327c:	e008      	b.n	8003290 <HAL_UART_IRQHandler+0x5cc>
      return;
 800327e:	bf00      	nop
 8003280:	e006      	b.n	8003290 <HAL_UART_IRQHandler+0x5cc>
    return;
 8003282:	bf00      	nop
 8003284:	e004      	b.n	8003290 <HAL_UART_IRQHandler+0x5cc>
      return;
 8003286:	bf00      	nop
 8003288:	e002      	b.n	8003290 <HAL_UART_IRQHandler+0x5cc>
      return;
 800328a:	bf00      	nop
 800328c:	e000      	b.n	8003290 <HAL_UART_IRQHandler+0x5cc>
    return;
 800328e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003290:	37e8      	adds	r7, #232	@ 0xe8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop

08003298 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80032a0:	bf00      	nop
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	460b      	mov	r3, r1
 80032b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032c8:	b08a      	sub	sp, #40	@ 0x28
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80032ce:	2300      	movs	r3, #0
 80032d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	689a      	ldr	r2, [r3, #8]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	431a      	orrs	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	431a      	orrs	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	69db      	ldr	r3, [r3, #28]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	4ba4      	ldr	r3, [pc, #656]	@ (8003584 <UART_SetConfig+0x2c0>)
 80032f4:	4013      	ands	r3, r2
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	6812      	ldr	r2, [r2, #0]
 80032fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80032fc:	430b      	orrs	r3, r1
 80032fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	68da      	ldr	r2, [r3, #12]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	430a      	orrs	r2, r1
 8003314:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a99      	ldr	r2, [pc, #612]	@ (8003588 <UART_SetConfig+0x2c4>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d004      	beq.n	8003330 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800332c:	4313      	orrs	r3, r2
 800332e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003340:	430a      	orrs	r2, r1
 8003342:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a90      	ldr	r2, [pc, #576]	@ (800358c <UART_SetConfig+0x2c8>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d126      	bne.n	800339c <UART_SetConfig+0xd8>
 800334e:	4b90      	ldr	r3, [pc, #576]	@ (8003590 <UART_SetConfig+0x2cc>)
 8003350:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003354:	f003 0303 	and.w	r3, r3, #3
 8003358:	2b03      	cmp	r3, #3
 800335a:	d81b      	bhi.n	8003394 <UART_SetConfig+0xd0>
 800335c:	a201      	add	r2, pc, #4	@ (adr r2, 8003364 <UART_SetConfig+0xa0>)
 800335e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003362:	bf00      	nop
 8003364:	08003375 	.word	0x08003375
 8003368:	08003385 	.word	0x08003385
 800336c:	0800337d 	.word	0x0800337d
 8003370:	0800338d 	.word	0x0800338d
 8003374:	2301      	movs	r3, #1
 8003376:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800337a:	e116      	b.n	80035aa <UART_SetConfig+0x2e6>
 800337c:	2302      	movs	r3, #2
 800337e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003382:	e112      	b.n	80035aa <UART_SetConfig+0x2e6>
 8003384:	2304      	movs	r3, #4
 8003386:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800338a:	e10e      	b.n	80035aa <UART_SetConfig+0x2e6>
 800338c:	2308      	movs	r3, #8
 800338e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003392:	e10a      	b.n	80035aa <UART_SetConfig+0x2e6>
 8003394:	2310      	movs	r3, #16
 8003396:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800339a:	e106      	b.n	80035aa <UART_SetConfig+0x2e6>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a7c      	ldr	r2, [pc, #496]	@ (8003594 <UART_SetConfig+0x2d0>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d138      	bne.n	8003418 <UART_SetConfig+0x154>
 80033a6:	4b7a      	ldr	r3, [pc, #488]	@ (8003590 <UART_SetConfig+0x2cc>)
 80033a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ac:	f003 030c 	and.w	r3, r3, #12
 80033b0:	2b0c      	cmp	r3, #12
 80033b2:	d82d      	bhi.n	8003410 <UART_SetConfig+0x14c>
 80033b4:	a201      	add	r2, pc, #4	@ (adr r2, 80033bc <UART_SetConfig+0xf8>)
 80033b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ba:	bf00      	nop
 80033bc:	080033f1 	.word	0x080033f1
 80033c0:	08003411 	.word	0x08003411
 80033c4:	08003411 	.word	0x08003411
 80033c8:	08003411 	.word	0x08003411
 80033cc:	08003401 	.word	0x08003401
 80033d0:	08003411 	.word	0x08003411
 80033d4:	08003411 	.word	0x08003411
 80033d8:	08003411 	.word	0x08003411
 80033dc:	080033f9 	.word	0x080033f9
 80033e0:	08003411 	.word	0x08003411
 80033e4:	08003411 	.word	0x08003411
 80033e8:	08003411 	.word	0x08003411
 80033ec:	08003409 	.word	0x08003409
 80033f0:	2300      	movs	r3, #0
 80033f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033f6:	e0d8      	b.n	80035aa <UART_SetConfig+0x2e6>
 80033f8:	2302      	movs	r3, #2
 80033fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033fe:	e0d4      	b.n	80035aa <UART_SetConfig+0x2e6>
 8003400:	2304      	movs	r3, #4
 8003402:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003406:	e0d0      	b.n	80035aa <UART_SetConfig+0x2e6>
 8003408:	2308      	movs	r3, #8
 800340a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800340e:	e0cc      	b.n	80035aa <UART_SetConfig+0x2e6>
 8003410:	2310      	movs	r3, #16
 8003412:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003416:	e0c8      	b.n	80035aa <UART_SetConfig+0x2e6>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a5e      	ldr	r2, [pc, #376]	@ (8003598 <UART_SetConfig+0x2d4>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d125      	bne.n	800346e <UART_SetConfig+0x1aa>
 8003422:	4b5b      	ldr	r3, [pc, #364]	@ (8003590 <UART_SetConfig+0x2cc>)
 8003424:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003428:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800342c:	2b30      	cmp	r3, #48	@ 0x30
 800342e:	d016      	beq.n	800345e <UART_SetConfig+0x19a>
 8003430:	2b30      	cmp	r3, #48	@ 0x30
 8003432:	d818      	bhi.n	8003466 <UART_SetConfig+0x1a2>
 8003434:	2b20      	cmp	r3, #32
 8003436:	d00a      	beq.n	800344e <UART_SetConfig+0x18a>
 8003438:	2b20      	cmp	r3, #32
 800343a:	d814      	bhi.n	8003466 <UART_SetConfig+0x1a2>
 800343c:	2b00      	cmp	r3, #0
 800343e:	d002      	beq.n	8003446 <UART_SetConfig+0x182>
 8003440:	2b10      	cmp	r3, #16
 8003442:	d008      	beq.n	8003456 <UART_SetConfig+0x192>
 8003444:	e00f      	b.n	8003466 <UART_SetConfig+0x1a2>
 8003446:	2300      	movs	r3, #0
 8003448:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800344c:	e0ad      	b.n	80035aa <UART_SetConfig+0x2e6>
 800344e:	2302      	movs	r3, #2
 8003450:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003454:	e0a9      	b.n	80035aa <UART_SetConfig+0x2e6>
 8003456:	2304      	movs	r3, #4
 8003458:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800345c:	e0a5      	b.n	80035aa <UART_SetConfig+0x2e6>
 800345e:	2308      	movs	r3, #8
 8003460:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003464:	e0a1      	b.n	80035aa <UART_SetConfig+0x2e6>
 8003466:	2310      	movs	r3, #16
 8003468:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800346c:	e09d      	b.n	80035aa <UART_SetConfig+0x2e6>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a4a      	ldr	r2, [pc, #296]	@ (800359c <UART_SetConfig+0x2d8>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d125      	bne.n	80034c4 <UART_SetConfig+0x200>
 8003478:	4b45      	ldr	r3, [pc, #276]	@ (8003590 <UART_SetConfig+0x2cc>)
 800347a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800347e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003482:	2bc0      	cmp	r3, #192	@ 0xc0
 8003484:	d016      	beq.n	80034b4 <UART_SetConfig+0x1f0>
 8003486:	2bc0      	cmp	r3, #192	@ 0xc0
 8003488:	d818      	bhi.n	80034bc <UART_SetConfig+0x1f8>
 800348a:	2b80      	cmp	r3, #128	@ 0x80
 800348c:	d00a      	beq.n	80034a4 <UART_SetConfig+0x1e0>
 800348e:	2b80      	cmp	r3, #128	@ 0x80
 8003490:	d814      	bhi.n	80034bc <UART_SetConfig+0x1f8>
 8003492:	2b00      	cmp	r3, #0
 8003494:	d002      	beq.n	800349c <UART_SetConfig+0x1d8>
 8003496:	2b40      	cmp	r3, #64	@ 0x40
 8003498:	d008      	beq.n	80034ac <UART_SetConfig+0x1e8>
 800349a:	e00f      	b.n	80034bc <UART_SetConfig+0x1f8>
 800349c:	2300      	movs	r3, #0
 800349e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034a2:	e082      	b.n	80035aa <UART_SetConfig+0x2e6>
 80034a4:	2302      	movs	r3, #2
 80034a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034aa:	e07e      	b.n	80035aa <UART_SetConfig+0x2e6>
 80034ac:	2304      	movs	r3, #4
 80034ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034b2:	e07a      	b.n	80035aa <UART_SetConfig+0x2e6>
 80034b4:	2308      	movs	r3, #8
 80034b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034ba:	e076      	b.n	80035aa <UART_SetConfig+0x2e6>
 80034bc:	2310      	movs	r3, #16
 80034be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034c2:	e072      	b.n	80035aa <UART_SetConfig+0x2e6>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a35      	ldr	r2, [pc, #212]	@ (80035a0 <UART_SetConfig+0x2dc>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d12a      	bne.n	8003524 <UART_SetConfig+0x260>
 80034ce:	4b30      	ldr	r3, [pc, #192]	@ (8003590 <UART_SetConfig+0x2cc>)
 80034d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80034dc:	d01a      	beq.n	8003514 <UART_SetConfig+0x250>
 80034de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80034e2:	d81b      	bhi.n	800351c <UART_SetConfig+0x258>
 80034e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034e8:	d00c      	beq.n	8003504 <UART_SetConfig+0x240>
 80034ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034ee:	d815      	bhi.n	800351c <UART_SetConfig+0x258>
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d003      	beq.n	80034fc <UART_SetConfig+0x238>
 80034f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034f8:	d008      	beq.n	800350c <UART_SetConfig+0x248>
 80034fa:	e00f      	b.n	800351c <UART_SetConfig+0x258>
 80034fc:	2300      	movs	r3, #0
 80034fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003502:	e052      	b.n	80035aa <UART_SetConfig+0x2e6>
 8003504:	2302      	movs	r3, #2
 8003506:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800350a:	e04e      	b.n	80035aa <UART_SetConfig+0x2e6>
 800350c:	2304      	movs	r3, #4
 800350e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003512:	e04a      	b.n	80035aa <UART_SetConfig+0x2e6>
 8003514:	2308      	movs	r3, #8
 8003516:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800351a:	e046      	b.n	80035aa <UART_SetConfig+0x2e6>
 800351c:	2310      	movs	r3, #16
 800351e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003522:	e042      	b.n	80035aa <UART_SetConfig+0x2e6>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a17      	ldr	r2, [pc, #92]	@ (8003588 <UART_SetConfig+0x2c4>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d13a      	bne.n	80035a4 <UART_SetConfig+0x2e0>
 800352e:	4b18      	ldr	r3, [pc, #96]	@ (8003590 <UART_SetConfig+0x2cc>)
 8003530:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003534:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003538:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800353c:	d01a      	beq.n	8003574 <UART_SetConfig+0x2b0>
 800353e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003542:	d81b      	bhi.n	800357c <UART_SetConfig+0x2b8>
 8003544:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003548:	d00c      	beq.n	8003564 <UART_SetConfig+0x2a0>
 800354a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800354e:	d815      	bhi.n	800357c <UART_SetConfig+0x2b8>
 8003550:	2b00      	cmp	r3, #0
 8003552:	d003      	beq.n	800355c <UART_SetConfig+0x298>
 8003554:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003558:	d008      	beq.n	800356c <UART_SetConfig+0x2a8>
 800355a:	e00f      	b.n	800357c <UART_SetConfig+0x2b8>
 800355c:	2300      	movs	r3, #0
 800355e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003562:	e022      	b.n	80035aa <UART_SetConfig+0x2e6>
 8003564:	2302      	movs	r3, #2
 8003566:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800356a:	e01e      	b.n	80035aa <UART_SetConfig+0x2e6>
 800356c:	2304      	movs	r3, #4
 800356e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003572:	e01a      	b.n	80035aa <UART_SetConfig+0x2e6>
 8003574:	2308      	movs	r3, #8
 8003576:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800357a:	e016      	b.n	80035aa <UART_SetConfig+0x2e6>
 800357c:	2310      	movs	r3, #16
 800357e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003582:	e012      	b.n	80035aa <UART_SetConfig+0x2e6>
 8003584:	efff69f3 	.word	0xefff69f3
 8003588:	40008000 	.word	0x40008000
 800358c:	40013800 	.word	0x40013800
 8003590:	40021000 	.word	0x40021000
 8003594:	40004400 	.word	0x40004400
 8003598:	40004800 	.word	0x40004800
 800359c:	40004c00 	.word	0x40004c00
 80035a0:	40005000 	.word	0x40005000
 80035a4:	2310      	movs	r3, #16
 80035a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a9f      	ldr	r2, [pc, #636]	@ (800382c <UART_SetConfig+0x568>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d17a      	bne.n	80036aa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80035b4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80035b8:	2b08      	cmp	r3, #8
 80035ba:	d824      	bhi.n	8003606 <UART_SetConfig+0x342>
 80035bc:	a201      	add	r2, pc, #4	@ (adr r2, 80035c4 <UART_SetConfig+0x300>)
 80035be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c2:	bf00      	nop
 80035c4:	080035e9 	.word	0x080035e9
 80035c8:	08003607 	.word	0x08003607
 80035cc:	080035f1 	.word	0x080035f1
 80035d0:	08003607 	.word	0x08003607
 80035d4:	080035f7 	.word	0x080035f7
 80035d8:	08003607 	.word	0x08003607
 80035dc:	08003607 	.word	0x08003607
 80035e0:	08003607 	.word	0x08003607
 80035e4:	080035ff 	.word	0x080035ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035e8:	f7fe fcde 	bl	8001fa8 <HAL_RCC_GetPCLK1Freq>
 80035ec:	61f8      	str	r0, [r7, #28]
        break;
 80035ee:	e010      	b.n	8003612 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035f0:	4b8f      	ldr	r3, [pc, #572]	@ (8003830 <UART_SetConfig+0x56c>)
 80035f2:	61fb      	str	r3, [r7, #28]
        break;
 80035f4:	e00d      	b.n	8003612 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035f6:	f7fe fc3f 	bl	8001e78 <HAL_RCC_GetSysClockFreq>
 80035fa:	61f8      	str	r0, [r7, #28]
        break;
 80035fc:	e009      	b.n	8003612 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003602:	61fb      	str	r3, [r7, #28]
        break;
 8003604:	e005      	b.n	8003612 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003606:	2300      	movs	r3, #0
 8003608:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003610:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	2b00      	cmp	r3, #0
 8003616:	f000 80fb 	beq.w	8003810 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	685a      	ldr	r2, [r3, #4]
 800361e:	4613      	mov	r3, r2
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	4413      	add	r3, r2
 8003624:	69fa      	ldr	r2, [r7, #28]
 8003626:	429a      	cmp	r2, r3
 8003628:	d305      	bcc.n	8003636 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003630:	69fa      	ldr	r2, [r7, #28]
 8003632:	429a      	cmp	r2, r3
 8003634:	d903      	bls.n	800363e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800363c:	e0e8      	b.n	8003810 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	2200      	movs	r2, #0
 8003642:	461c      	mov	r4, r3
 8003644:	4615      	mov	r5, r2
 8003646:	f04f 0200 	mov.w	r2, #0
 800364a:	f04f 0300 	mov.w	r3, #0
 800364e:	022b      	lsls	r3, r5, #8
 8003650:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003654:	0222      	lsls	r2, r4, #8
 8003656:	68f9      	ldr	r1, [r7, #12]
 8003658:	6849      	ldr	r1, [r1, #4]
 800365a:	0849      	lsrs	r1, r1, #1
 800365c:	2000      	movs	r0, #0
 800365e:	4688      	mov	r8, r1
 8003660:	4681      	mov	r9, r0
 8003662:	eb12 0a08 	adds.w	sl, r2, r8
 8003666:	eb43 0b09 	adc.w	fp, r3, r9
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	603b      	str	r3, [r7, #0]
 8003672:	607a      	str	r2, [r7, #4]
 8003674:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003678:	4650      	mov	r0, sl
 800367a:	4659      	mov	r1, fp
 800367c:	f7fc fe00 	bl	8000280 <__aeabi_uldivmod>
 8003680:	4602      	mov	r2, r0
 8003682:	460b      	mov	r3, r1
 8003684:	4613      	mov	r3, r2
 8003686:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800368e:	d308      	bcc.n	80036a2 <UART_SetConfig+0x3de>
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003696:	d204      	bcs.n	80036a2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	60da      	str	r2, [r3, #12]
 80036a0:	e0b6      	b.n	8003810 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80036a8:	e0b2      	b.n	8003810 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	69db      	ldr	r3, [r3, #28]
 80036ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036b2:	d15e      	bne.n	8003772 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80036b4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80036b8:	2b08      	cmp	r3, #8
 80036ba:	d828      	bhi.n	800370e <UART_SetConfig+0x44a>
 80036bc:	a201      	add	r2, pc, #4	@ (adr r2, 80036c4 <UART_SetConfig+0x400>)
 80036be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c2:	bf00      	nop
 80036c4:	080036e9 	.word	0x080036e9
 80036c8:	080036f1 	.word	0x080036f1
 80036cc:	080036f9 	.word	0x080036f9
 80036d0:	0800370f 	.word	0x0800370f
 80036d4:	080036ff 	.word	0x080036ff
 80036d8:	0800370f 	.word	0x0800370f
 80036dc:	0800370f 	.word	0x0800370f
 80036e0:	0800370f 	.word	0x0800370f
 80036e4:	08003707 	.word	0x08003707
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036e8:	f7fe fc5e 	bl	8001fa8 <HAL_RCC_GetPCLK1Freq>
 80036ec:	61f8      	str	r0, [r7, #28]
        break;
 80036ee:	e014      	b.n	800371a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036f0:	f7fe fc70 	bl	8001fd4 <HAL_RCC_GetPCLK2Freq>
 80036f4:	61f8      	str	r0, [r7, #28]
        break;
 80036f6:	e010      	b.n	800371a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036f8:	4b4d      	ldr	r3, [pc, #308]	@ (8003830 <UART_SetConfig+0x56c>)
 80036fa:	61fb      	str	r3, [r7, #28]
        break;
 80036fc:	e00d      	b.n	800371a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036fe:	f7fe fbbb 	bl	8001e78 <HAL_RCC_GetSysClockFreq>
 8003702:	61f8      	str	r0, [r7, #28]
        break;
 8003704:	e009      	b.n	800371a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003706:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800370a:	61fb      	str	r3, [r7, #28]
        break;
 800370c:	e005      	b.n	800371a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800370e:	2300      	movs	r3, #0
 8003710:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003718:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d077      	beq.n	8003810 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	005a      	lsls	r2, r3, #1
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	085b      	lsrs	r3, r3, #1
 800372a:	441a      	add	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	fbb2 f3f3 	udiv	r3, r2, r3
 8003734:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	2b0f      	cmp	r3, #15
 800373a:	d916      	bls.n	800376a <UART_SetConfig+0x4a6>
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003742:	d212      	bcs.n	800376a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	b29b      	uxth	r3, r3
 8003748:	f023 030f 	bic.w	r3, r3, #15
 800374c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	085b      	lsrs	r3, r3, #1
 8003752:	b29b      	uxth	r3, r3
 8003754:	f003 0307 	and.w	r3, r3, #7
 8003758:	b29a      	uxth	r2, r3
 800375a:	8afb      	ldrh	r3, [r7, #22]
 800375c:	4313      	orrs	r3, r2
 800375e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	8afa      	ldrh	r2, [r7, #22]
 8003766:	60da      	str	r2, [r3, #12]
 8003768:	e052      	b.n	8003810 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003770:	e04e      	b.n	8003810 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003772:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003776:	2b08      	cmp	r3, #8
 8003778:	d827      	bhi.n	80037ca <UART_SetConfig+0x506>
 800377a:	a201      	add	r2, pc, #4	@ (adr r2, 8003780 <UART_SetConfig+0x4bc>)
 800377c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003780:	080037a5 	.word	0x080037a5
 8003784:	080037ad 	.word	0x080037ad
 8003788:	080037b5 	.word	0x080037b5
 800378c:	080037cb 	.word	0x080037cb
 8003790:	080037bb 	.word	0x080037bb
 8003794:	080037cb 	.word	0x080037cb
 8003798:	080037cb 	.word	0x080037cb
 800379c:	080037cb 	.word	0x080037cb
 80037a0:	080037c3 	.word	0x080037c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037a4:	f7fe fc00 	bl	8001fa8 <HAL_RCC_GetPCLK1Freq>
 80037a8:	61f8      	str	r0, [r7, #28]
        break;
 80037aa:	e014      	b.n	80037d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037ac:	f7fe fc12 	bl	8001fd4 <HAL_RCC_GetPCLK2Freq>
 80037b0:	61f8      	str	r0, [r7, #28]
        break;
 80037b2:	e010      	b.n	80037d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037b4:	4b1e      	ldr	r3, [pc, #120]	@ (8003830 <UART_SetConfig+0x56c>)
 80037b6:	61fb      	str	r3, [r7, #28]
        break;
 80037b8:	e00d      	b.n	80037d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037ba:	f7fe fb5d 	bl	8001e78 <HAL_RCC_GetSysClockFreq>
 80037be:	61f8      	str	r0, [r7, #28]
        break;
 80037c0:	e009      	b.n	80037d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037c6:	61fb      	str	r3, [r7, #28]
        break;
 80037c8:	e005      	b.n	80037d6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80037ca:	2300      	movs	r3, #0
 80037cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80037d4:	bf00      	nop
    }

    if (pclk != 0U)
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d019      	beq.n	8003810 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	085a      	lsrs	r2, r3, #1
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	441a      	add	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ee:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	2b0f      	cmp	r3, #15
 80037f4:	d909      	bls.n	800380a <UART_SetConfig+0x546>
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037fc:	d205      	bcs.n	800380a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	b29a      	uxth	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	60da      	str	r2, [r3, #12]
 8003808:	e002      	b.n	8003810 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800381c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003820:	4618      	mov	r0, r3
 8003822:	3728      	adds	r7, #40	@ 0x28
 8003824:	46bd      	mov	sp, r7
 8003826:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800382a:	bf00      	nop
 800382c:	40008000 	.word	0x40008000
 8003830:	00f42400 	.word	0x00f42400

08003834 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003840:	f003 0308 	and.w	r3, r3, #8
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00a      	beq.n	800385e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	430a      	orrs	r2, r1
 800385c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00a      	beq.n	8003880 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	430a      	orrs	r2, r1
 800387e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003884:	f003 0302 	and.w	r3, r3, #2
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00a      	beq.n	80038a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a6:	f003 0304 	and.w	r3, r3, #4
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00a      	beq.n	80038c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	430a      	orrs	r2, r1
 80038c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c8:	f003 0310 	and.w	r3, r3, #16
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00a      	beq.n	80038e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ea:	f003 0320 	and.w	r3, r3, #32
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00a      	beq.n	8003908 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	430a      	orrs	r2, r1
 8003906:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800390c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003910:	2b00      	cmp	r3, #0
 8003912:	d01a      	beq.n	800394a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003932:	d10a      	bne.n	800394a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	430a      	orrs	r2, r1
 8003948:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800394e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00a      	beq.n	800396c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	430a      	orrs	r2, r1
 800396a:	605a      	str	r2, [r3, #4]
  }
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b098      	sub	sp, #96	@ 0x60
 800397c:	af02      	add	r7, sp, #8
 800397e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003988:	f7fd f996 	bl	8000cb8 <HAL_GetTick>
 800398c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0308 	and.w	r3, r3, #8
 8003998:	2b08      	cmp	r3, #8
 800399a:	d12e      	bne.n	80039fa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800399c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039a4:	2200      	movs	r2, #0
 80039a6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f88c 	bl	8003ac8 <UART_WaitOnFlagUntilTimeout>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d021      	beq.n	80039fa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039be:	e853 3f00 	ldrex	r3, [r3]
 80039c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80039c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	461a      	mov	r2, r3
 80039d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80039d6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80039da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80039dc:	e841 2300 	strex	r3, r2, [r1]
 80039e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80039e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1e6      	bne.n	80039b6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2220      	movs	r2, #32
 80039ec:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e062      	b.n	8003ac0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0304 	and.w	r3, r3, #4
 8003a04:	2b04      	cmp	r3, #4
 8003a06:	d149      	bne.n	8003a9c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a08:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003a0c:	9300      	str	r3, [sp, #0]
 8003a0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a10:	2200      	movs	r2, #0
 8003a12:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 f856 	bl	8003ac8 <UART_WaitOnFlagUntilTimeout>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d03c      	beq.n	8003a9c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a2a:	e853 3f00 	ldrex	r3, [r3]
 8003a2e:	623b      	str	r3, [r7, #32]
   return(result);
 8003a30:	6a3b      	ldr	r3, [r7, #32]
 8003a32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a40:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a42:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a44:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a48:	e841 2300 	strex	r3, r2, [r1]
 8003a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1e6      	bne.n	8003a22 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	3308      	adds	r3, #8
 8003a5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	e853 3f00 	ldrex	r3, [r3]
 8003a62:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f023 0301 	bic.w	r3, r3, #1
 8003a6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	3308      	adds	r3, #8
 8003a72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a74:	61fa      	str	r2, [r7, #28]
 8003a76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a78:	69b9      	ldr	r1, [r7, #24]
 8003a7a:	69fa      	ldr	r2, [r7, #28]
 8003a7c:	e841 2300 	strex	r3, r2, [r1]
 8003a80:	617b      	str	r3, [r7, #20]
   return(result);
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1e5      	bne.n	8003a54 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e011      	b.n	8003ac0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2220      	movs	r2, #32
 8003aa6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3758      	adds	r7, #88	@ 0x58
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	603b      	str	r3, [r7, #0]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ad8:	e049      	b.n	8003b6e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae0:	d045      	beq.n	8003b6e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ae2:	f7fd f8e9 	bl	8000cb8 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d302      	bcc.n	8003af8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d101      	bne.n	8003afc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e048      	b.n	8003b8e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0304 	and.w	r3, r3, #4
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d031      	beq.n	8003b6e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	69db      	ldr	r3, [r3, #28]
 8003b10:	f003 0308 	and.w	r3, r3, #8
 8003b14:	2b08      	cmp	r3, #8
 8003b16:	d110      	bne.n	8003b3a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2208      	movs	r2, #8
 8003b1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b20:	68f8      	ldr	r0, [r7, #12]
 8003b22:	f000 f838 	bl	8003b96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2208      	movs	r2, #8
 8003b2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e029      	b.n	8003b8e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	69db      	ldr	r3, [r3, #28]
 8003b40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b48:	d111      	bne.n	8003b6e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003b52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	f000 f81e 	bl	8003b96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e00f      	b.n	8003b8e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	69da      	ldr	r2, [r3, #28]
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	4013      	ands	r3, r2
 8003b78:	68ba      	ldr	r2, [r7, #8]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	bf0c      	ite	eq
 8003b7e:	2301      	moveq	r3, #1
 8003b80:	2300      	movne	r3, #0
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	461a      	mov	r2, r3
 8003b86:	79fb      	ldrb	r3, [r7, #7]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d0a6      	beq.n	8003ada <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b96:	b480      	push	{r7}
 8003b98:	b095      	sub	sp, #84	@ 0x54
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ba6:	e853 3f00 	ldrex	r3, [r3]
 8003baa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	461a      	mov	r2, r3
 8003bba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bbc:	643b      	str	r3, [r7, #64]	@ 0x40
 8003bbe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003bc2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003bc4:	e841 2300 	strex	r3, r2, [r1]
 8003bc8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1e6      	bne.n	8003b9e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	3308      	adds	r3, #8
 8003bd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd8:	6a3b      	ldr	r3, [r7, #32]
 8003bda:	e853 3f00 	ldrex	r3, [r3]
 8003bde:	61fb      	str	r3, [r7, #28]
   return(result);
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	f023 0301 	bic.w	r3, r3, #1
 8003be6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	3308      	adds	r3, #8
 8003bee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003bf0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bf6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003bf8:	e841 2300 	strex	r3, r2, [r1]
 8003bfc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d1e5      	bne.n	8003bd0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d118      	bne.n	8003c3e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	e853 3f00 	ldrex	r3, [r3]
 8003c18:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	f023 0310 	bic.w	r3, r3, #16
 8003c20:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	461a      	mov	r2, r3
 8003c28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c2a:	61bb      	str	r3, [r7, #24]
 8003c2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2e:	6979      	ldr	r1, [r7, #20]
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	e841 2300 	strex	r3, r2, [r1]
 8003c36:	613b      	str	r3, [r7, #16]
   return(result);
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1e6      	bne.n	8003c0c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2220      	movs	r2, #32
 8003c42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003c52:	bf00      	nop
 8003c54:	3754      	adds	r7, #84	@ 0x54
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	b084      	sub	sp, #16
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c6a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f7ff fb0b 	bl	8003298 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c82:	bf00      	nop
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b08f      	sub	sp, #60	@ 0x3c
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c96:	2b21      	cmp	r3, #33	@ 0x21
 8003c98:	d14c      	bne.n	8003d34 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d132      	bne.n	8003d0c <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cac:	6a3b      	ldr	r3, [r7, #32]
 8003cae:	e853 3f00 	ldrex	r3, [r3]
 8003cb2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cba:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cc6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003cca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ccc:	e841 2300 	strex	r3, r2, [r1]
 8003cd0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1e6      	bne.n	8003ca6 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	e853 3f00 	ldrex	r3, [r3]
 8003ce4:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003cec:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cf6:	61bb      	str	r3, [r7, #24]
 8003cf8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfa:	6979      	ldr	r1, [r7, #20]
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	e841 2300 	strex	r3, r2, [r1]
 8003d02:	613b      	str	r3, [r7, #16]
   return(result);
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1e6      	bne.n	8003cd8 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003d0a:	e013      	b.n	8003d34 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d10:	781a      	ldrb	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d1c:	1c5a      	adds	r2, r3, #1
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8003d34:	bf00      	nop
 8003d36:	373c      	adds	r7, #60	@ 0x3c
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b091      	sub	sp, #68	@ 0x44
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d4c:	2b21      	cmp	r3, #33	@ 0x21
 8003d4e:	d151      	bne.n	8003df4 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d132      	bne.n	8003dc2 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d64:	e853 3f00 	ldrex	r3, [r3]
 8003d68:	623b      	str	r3, [r7, #32]
   return(result);
 8003d6a:	6a3b      	ldr	r3, [r7, #32]
 8003d6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d70:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	461a      	mov	r2, r3
 8003d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d7a:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d7c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d82:	e841 2300 	strex	r3, r2, [r1]
 8003d86:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1e6      	bne.n	8003d5c <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	e853 3f00 	ldrex	r3, [r3]
 8003d9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003da2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	461a      	mov	r2, r3
 8003daa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dac:	61fb      	str	r3, [r7, #28]
 8003dae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db0:	69b9      	ldr	r1, [r7, #24]
 8003db2:	69fa      	ldr	r2, [r7, #28]
 8003db4:	e841 2300 	strex	r3, r2, [r1]
 8003db8:	617b      	str	r3, [r7, #20]
   return(result);
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1e6      	bne.n	8003d8e <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003dc0:	e018      	b.n	8003df4 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003dc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dca:	881a      	ldrh	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dd4:	b292      	uxth	r2, r2
 8003dd6:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ddc:	1c9a      	adds	r2, r3, #2
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	3b01      	subs	r3, #1
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8003df4:	bf00      	nop
 8003df6:	3744      	adds	r7, #68	@ 0x44
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b088      	sub	sp, #32
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	e853 3f00 	ldrex	r3, [r3]
 8003e14:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e1c:	61fb      	str	r3, [r7, #28]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	461a      	mov	r2, r3
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	61bb      	str	r3, [r7, #24]
 8003e28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e2a:	6979      	ldr	r1, [r7, #20]
 8003e2c:	69ba      	ldr	r2, [r7, #24]
 8003e2e:	e841 2300 	strex	r3, r2, [r1]
 8003e32:	613b      	str	r3, [r7, #16]
   return(result);
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1e6      	bne.n	8003e08 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2220      	movs	r2, #32
 8003e3e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7fc fbf0 	bl	800062c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e4c:	bf00      	nop
 8003e4e:	3720      	adds	r7, #32
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <std>:
 8003e68:	2300      	movs	r3, #0
 8003e6a:	b510      	push	{r4, lr}
 8003e6c:	4604      	mov	r4, r0
 8003e6e:	e9c0 3300 	strd	r3, r3, [r0]
 8003e72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003e76:	6083      	str	r3, [r0, #8]
 8003e78:	8181      	strh	r1, [r0, #12]
 8003e7a:	6643      	str	r3, [r0, #100]	@ 0x64
 8003e7c:	81c2      	strh	r2, [r0, #14]
 8003e7e:	6183      	str	r3, [r0, #24]
 8003e80:	4619      	mov	r1, r3
 8003e82:	2208      	movs	r2, #8
 8003e84:	305c      	adds	r0, #92	@ 0x5c
 8003e86:	f000 f906 	bl	8004096 <memset>
 8003e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ec0 <std+0x58>)
 8003e8c:	6263      	str	r3, [r4, #36]	@ 0x24
 8003e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ec4 <std+0x5c>)
 8003e90:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003e92:	4b0d      	ldr	r3, [pc, #52]	@ (8003ec8 <std+0x60>)
 8003e94:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003e96:	4b0d      	ldr	r3, [pc, #52]	@ (8003ecc <std+0x64>)
 8003e98:	6323      	str	r3, [r4, #48]	@ 0x30
 8003e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ed0 <std+0x68>)
 8003e9c:	6224      	str	r4, [r4, #32]
 8003e9e:	429c      	cmp	r4, r3
 8003ea0:	d006      	beq.n	8003eb0 <std+0x48>
 8003ea2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003ea6:	4294      	cmp	r4, r2
 8003ea8:	d002      	beq.n	8003eb0 <std+0x48>
 8003eaa:	33d0      	adds	r3, #208	@ 0xd0
 8003eac:	429c      	cmp	r4, r3
 8003eae:	d105      	bne.n	8003ebc <std+0x54>
 8003eb0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003eb8:	f000 b966 	b.w	8004188 <__retarget_lock_init_recursive>
 8003ebc:	bd10      	pop	{r4, pc}
 8003ebe:	bf00      	nop
 8003ec0:	08004011 	.word	0x08004011
 8003ec4:	08004033 	.word	0x08004033
 8003ec8:	0800406b 	.word	0x0800406b
 8003ecc:	0800408f 	.word	0x0800408f
 8003ed0:	20000140 	.word	0x20000140

08003ed4 <stdio_exit_handler>:
 8003ed4:	4a02      	ldr	r2, [pc, #8]	@ (8003ee0 <stdio_exit_handler+0xc>)
 8003ed6:	4903      	ldr	r1, [pc, #12]	@ (8003ee4 <stdio_exit_handler+0x10>)
 8003ed8:	4803      	ldr	r0, [pc, #12]	@ (8003ee8 <stdio_exit_handler+0x14>)
 8003eda:	f000 b869 	b.w	8003fb0 <_fwalk_sglue>
 8003ede:	bf00      	nop
 8003ee0:	2000002c 	.word	0x2000002c
 8003ee4:	08004a29 	.word	0x08004a29
 8003ee8:	2000003c 	.word	0x2000003c

08003eec <cleanup_stdio>:
 8003eec:	6841      	ldr	r1, [r0, #4]
 8003eee:	4b0c      	ldr	r3, [pc, #48]	@ (8003f20 <cleanup_stdio+0x34>)
 8003ef0:	4299      	cmp	r1, r3
 8003ef2:	b510      	push	{r4, lr}
 8003ef4:	4604      	mov	r4, r0
 8003ef6:	d001      	beq.n	8003efc <cleanup_stdio+0x10>
 8003ef8:	f000 fd96 	bl	8004a28 <_fflush_r>
 8003efc:	68a1      	ldr	r1, [r4, #8]
 8003efe:	4b09      	ldr	r3, [pc, #36]	@ (8003f24 <cleanup_stdio+0x38>)
 8003f00:	4299      	cmp	r1, r3
 8003f02:	d002      	beq.n	8003f0a <cleanup_stdio+0x1e>
 8003f04:	4620      	mov	r0, r4
 8003f06:	f000 fd8f 	bl	8004a28 <_fflush_r>
 8003f0a:	68e1      	ldr	r1, [r4, #12]
 8003f0c:	4b06      	ldr	r3, [pc, #24]	@ (8003f28 <cleanup_stdio+0x3c>)
 8003f0e:	4299      	cmp	r1, r3
 8003f10:	d004      	beq.n	8003f1c <cleanup_stdio+0x30>
 8003f12:	4620      	mov	r0, r4
 8003f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f18:	f000 bd86 	b.w	8004a28 <_fflush_r>
 8003f1c:	bd10      	pop	{r4, pc}
 8003f1e:	bf00      	nop
 8003f20:	20000140 	.word	0x20000140
 8003f24:	200001a8 	.word	0x200001a8
 8003f28:	20000210 	.word	0x20000210

08003f2c <global_stdio_init.part.0>:
 8003f2c:	b510      	push	{r4, lr}
 8003f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8003f5c <global_stdio_init.part.0+0x30>)
 8003f30:	4c0b      	ldr	r4, [pc, #44]	@ (8003f60 <global_stdio_init.part.0+0x34>)
 8003f32:	4a0c      	ldr	r2, [pc, #48]	@ (8003f64 <global_stdio_init.part.0+0x38>)
 8003f34:	601a      	str	r2, [r3, #0]
 8003f36:	4620      	mov	r0, r4
 8003f38:	2200      	movs	r2, #0
 8003f3a:	2104      	movs	r1, #4
 8003f3c:	f7ff ff94 	bl	8003e68 <std>
 8003f40:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003f44:	2201      	movs	r2, #1
 8003f46:	2109      	movs	r1, #9
 8003f48:	f7ff ff8e 	bl	8003e68 <std>
 8003f4c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003f50:	2202      	movs	r2, #2
 8003f52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f56:	2112      	movs	r1, #18
 8003f58:	f7ff bf86 	b.w	8003e68 <std>
 8003f5c:	20000278 	.word	0x20000278
 8003f60:	20000140 	.word	0x20000140
 8003f64:	08003ed5 	.word	0x08003ed5

08003f68 <__sfp_lock_acquire>:
 8003f68:	4801      	ldr	r0, [pc, #4]	@ (8003f70 <__sfp_lock_acquire+0x8>)
 8003f6a:	f000 b90e 	b.w	800418a <__retarget_lock_acquire_recursive>
 8003f6e:	bf00      	nop
 8003f70:	20000281 	.word	0x20000281

08003f74 <__sfp_lock_release>:
 8003f74:	4801      	ldr	r0, [pc, #4]	@ (8003f7c <__sfp_lock_release+0x8>)
 8003f76:	f000 b909 	b.w	800418c <__retarget_lock_release_recursive>
 8003f7a:	bf00      	nop
 8003f7c:	20000281 	.word	0x20000281

08003f80 <__sinit>:
 8003f80:	b510      	push	{r4, lr}
 8003f82:	4604      	mov	r4, r0
 8003f84:	f7ff fff0 	bl	8003f68 <__sfp_lock_acquire>
 8003f88:	6a23      	ldr	r3, [r4, #32]
 8003f8a:	b11b      	cbz	r3, 8003f94 <__sinit+0x14>
 8003f8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f90:	f7ff bff0 	b.w	8003f74 <__sfp_lock_release>
 8003f94:	4b04      	ldr	r3, [pc, #16]	@ (8003fa8 <__sinit+0x28>)
 8003f96:	6223      	str	r3, [r4, #32]
 8003f98:	4b04      	ldr	r3, [pc, #16]	@ (8003fac <__sinit+0x2c>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1f5      	bne.n	8003f8c <__sinit+0xc>
 8003fa0:	f7ff ffc4 	bl	8003f2c <global_stdio_init.part.0>
 8003fa4:	e7f2      	b.n	8003f8c <__sinit+0xc>
 8003fa6:	bf00      	nop
 8003fa8:	08003eed 	.word	0x08003eed
 8003fac:	20000278 	.word	0x20000278

08003fb0 <_fwalk_sglue>:
 8003fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fb4:	4607      	mov	r7, r0
 8003fb6:	4688      	mov	r8, r1
 8003fb8:	4614      	mov	r4, r2
 8003fba:	2600      	movs	r6, #0
 8003fbc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003fc0:	f1b9 0901 	subs.w	r9, r9, #1
 8003fc4:	d505      	bpl.n	8003fd2 <_fwalk_sglue+0x22>
 8003fc6:	6824      	ldr	r4, [r4, #0]
 8003fc8:	2c00      	cmp	r4, #0
 8003fca:	d1f7      	bne.n	8003fbc <_fwalk_sglue+0xc>
 8003fcc:	4630      	mov	r0, r6
 8003fce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003fd2:	89ab      	ldrh	r3, [r5, #12]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d907      	bls.n	8003fe8 <_fwalk_sglue+0x38>
 8003fd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003fdc:	3301      	adds	r3, #1
 8003fde:	d003      	beq.n	8003fe8 <_fwalk_sglue+0x38>
 8003fe0:	4629      	mov	r1, r5
 8003fe2:	4638      	mov	r0, r7
 8003fe4:	47c0      	blx	r8
 8003fe6:	4306      	orrs	r6, r0
 8003fe8:	3568      	adds	r5, #104	@ 0x68
 8003fea:	e7e9      	b.n	8003fc0 <_fwalk_sglue+0x10>

08003fec <iprintf>:
 8003fec:	b40f      	push	{r0, r1, r2, r3}
 8003fee:	b507      	push	{r0, r1, r2, lr}
 8003ff0:	4906      	ldr	r1, [pc, #24]	@ (800400c <iprintf+0x20>)
 8003ff2:	ab04      	add	r3, sp, #16
 8003ff4:	6808      	ldr	r0, [r1, #0]
 8003ff6:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ffa:	6881      	ldr	r1, [r0, #8]
 8003ffc:	9301      	str	r3, [sp, #4]
 8003ffe:	f000 f9e9 	bl	80043d4 <_vfiprintf_r>
 8004002:	b003      	add	sp, #12
 8004004:	f85d eb04 	ldr.w	lr, [sp], #4
 8004008:	b004      	add	sp, #16
 800400a:	4770      	bx	lr
 800400c:	20000038 	.word	0x20000038

08004010 <__sread>:
 8004010:	b510      	push	{r4, lr}
 8004012:	460c      	mov	r4, r1
 8004014:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004018:	f000 f868 	bl	80040ec <_read_r>
 800401c:	2800      	cmp	r0, #0
 800401e:	bfab      	itete	ge
 8004020:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004022:	89a3      	ldrhlt	r3, [r4, #12]
 8004024:	181b      	addge	r3, r3, r0
 8004026:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800402a:	bfac      	ite	ge
 800402c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800402e:	81a3      	strhlt	r3, [r4, #12]
 8004030:	bd10      	pop	{r4, pc}

08004032 <__swrite>:
 8004032:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004036:	461f      	mov	r7, r3
 8004038:	898b      	ldrh	r3, [r1, #12]
 800403a:	05db      	lsls	r3, r3, #23
 800403c:	4605      	mov	r5, r0
 800403e:	460c      	mov	r4, r1
 8004040:	4616      	mov	r6, r2
 8004042:	d505      	bpl.n	8004050 <__swrite+0x1e>
 8004044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004048:	2302      	movs	r3, #2
 800404a:	2200      	movs	r2, #0
 800404c:	f000 f83c 	bl	80040c8 <_lseek_r>
 8004050:	89a3      	ldrh	r3, [r4, #12]
 8004052:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004056:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800405a:	81a3      	strh	r3, [r4, #12]
 800405c:	4632      	mov	r2, r6
 800405e:	463b      	mov	r3, r7
 8004060:	4628      	mov	r0, r5
 8004062:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004066:	f000 b853 	b.w	8004110 <_write_r>

0800406a <__sseek>:
 800406a:	b510      	push	{r4, lr}
 800406c:	460c      	mov	r4, r1
 800406e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004072:	f000 f829 	bl	80040c8 <_lseek_r>
 8004076:	1c43      	adds	r3, r0, #1
 8004078:	89a3      	ldrh	r3, [r4, #12]
 800407a:	bf15      	itete	ne
 800407c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800407e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004082:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004086:	81a3      	strheq	r3, [r4, #12]
 8004088:	bf18      	it	ne
 800408a:	81a3      	strhne	r3, [r4, #12]
 800408c:	bd10      	pop	{r4, pc}

0800408e <__sclose>:
 800408e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004092:	f000 b809 	b.w	80040a8 <_close_r>

08004096 <memset>:
 8004096:	4402      	add	r2, r0
 8004098:	4603      	mov	r3, r0
 800409a:	4293      	cmp	r3, r2
 800409c:	d100      	bne.n	80040a0 <memset+0xa>
 800409e:	4770      	bx	lr
 80040a0:	f803 1b01 	strb.w	r1, [r3], #1
 80040a4:	e7f9      	b.n	800409a <memset+0x4>
	...

080040a8 <_close_r>:
 80040a8:	b538      	push	{r3, r4, r5, lr}
 80040aa:	4d06      	ldr	r5, [pc, #24]	@ (80040c4 <_close_r+0x1c>)
 80040ac:	2300      	movs	r3, #0
 80040ae:	4604      	mov	r4, r0
 80040b0:	4608      	mov	r0, r1
 80040b2:	602b      	str	r3, [r5, #0]
 80040b4:	f7fc fcf1 	bl	8000a9a <_close>
 80040b8:	1c43      	adds	r3, r0, #1
 80040ba:	d102      	bne.n	80040c2 <_close_r+0x1a>
 80040bc:	682b      	ldr	r3, [r5, #0]
 80040be:	b103      	cbz	r3, 80040c2 <_close_r+0x1a>
 80040c0:	6023      	str	r3, [r4, #0]
 80040c2:	bd38      	pop	{r3, r4, r5, pc}
 80040c4:	2000027c 	.word	0x2000027c

080040c8 <_lseek_r>:
 80040c8:	b538      	push	{r3, r4, r5, lr}
 80040ca:	4d07      	ldr	r5, [pc, #28]	@ (80040e8 <_lseek_r+0x20>)
 80040cc:	4604      	mov	r4, r0
 80040ce:	4608      	mov	r0, r1
 80040d0:	4611      	mov	r1, r2
 80040d2:	2200      	movs	r2, #0
 80040d4:	602a      	str	r2, [r5, #0]
 80040d6:	461a      	mov	r2, r3
 80040d8:	f7fc fd06 	bl	8000ae8 <_lseek>
 80040dc:	1c43      	adds	r3, r0, #1
 80040de:	d102      	bne.n	80040e6 <_lseek_r+0x1e>
 80040e0:	682b      	ldr	r3, [r5, #0]
 80040e2:	b103      	cbz	r3, 80040e6 <_lseek_r+0x1e>
 80040e4:	6023      	str	r3, [r4, #0]
 80040e6:	bd38      	pop	{r3, r4, r5, pc}
 80040e8:	2000027c 	.word	0x2000027c

080040ec <_read_r>:
 80040ec:	b538      	push	{r3, r4, r5, lr}
 80040ee:	4d07      	ldr	r5, [pc, #28]	@ (800410c <_read_r+0x20>)
 80040f0:	4604      	mov	r4, r0
 80040f2:	4608      	mov	r0, r1
 80040f4:	4611      	mov	r1, r2
 80040f6:	2200      	movs	r2, #0
 80040f8:	602a      	str	r2, [r5, #0]
 80040fa:	461a      	mov	r2, r3
 80040fc:	f7fc fc94 	bl	8000a28 <_read>
 8004100:	1c43      	adds	r3, r0, #1
 8004102:	d102      	bne.n	800410a <_read_r+0x1e>
 8004104:	682b      	ldr	r3, [r5, #0]
 8004106:	b103      	cbz	r3, 800410a <_read_r+0x1e>
 8004108:	6023      	str	r3, [r4, #0]
 800410a:	bd38      	pop	{r3, r4, r5, pc}
 800410c:	2000027c 	.word	0x2000027c

08004110 <_write_r>:
 8004110:	b538      	push	{r3, r4, r5, lr}
 8004112:	4d07      	ldr	r5, [pc, #28]	@ (8004130 <_write_r+0x20>)
 8004114:	4604      	mov	r4, r0
 8004116:	4608      	mov	r0, r1
 8004118:	4611      	mov	r1, r2
 800411a:	2200      	movs	r2, #0
 800411c:	602a      	str	r2, [r5, #0]
 800411e:	461a      	mov	r2, r3
 8004120:	f7fc fc9f 	bl	8000a62 <_write>
 8004124:	1c43      	adds	r3, r0, #1
 8004126:	d102      	bne.n	800412e <_write_r+0x1e>
 8004128:	682b      	ldr	r3, [r5, #0]
 800412a:	b103      	cbz	r3, 800412e <_write_r+0x1e>
 800412c:	6023      	str	r3, [r4, #0]
 800412e:	bd38      	pop	{r3, r4, r5, pc}
 8004130:	2000027c 	.word	0x2000027c

08004134 <__errno>:
 8004134:	4b01      	ldr	r3, [pc, #4]	@ (800413c <__errno+0x8>)
 8004136:	6818      	ldr	r0, [r3, #0]
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	20000038 	.word	0x20000038

08004140 <__libc_init_array>:
 8004140:	b570      	push	{r4, r5, r6, lr}
 8004142:	4d0d      	ldr	r5, [pc, #52]	@ (8004178 <__libc_init_array+0x38>)
 8004144:	4c0d      	ldr	r4, [pc, #52]	@ (800417c <__libc_init_array+0x3c>)
 8004146:	1b64      	subs	r4, r4, r5
 8004148:	10a4      	asrs	r4, r4, #2
 800414a:	2600      	movs	r6, #0
 800414c:	42a6      	cmp	r6, r4
 800414e:	d109      	bne.n	8004164 <__libc_init_array+0x24>
 8004150:	4d0b      	ldr	r5, [pc, #44]	@ (8004180 <__libc_init_array+0x40>)
 8004152:	4c0c      	ldr	r4, [pc, #48]	@ (8004184 <__libc_init_array+0x44>)
 8004154:	f000 fdb8 	bl	8004cc8 <_init>
 8004158:	1b64      	subs	r4, r4, r5
 800415a:	10a4      	asrs	r4, r4, #2
 800415c:	2600      	movs	r6, #0
 800415e:	42a6      	cmp	r6, r4
 8004160:	d105      	bne.n	800416e <__libc_init_array+0x2e>
 8004162:	bd70      	pop	{r4, r5, r6, pc}
 8004164:	f855 3b04 	ldr.w	r3, [r5], #4
 8004168:	4798      	blx	r3
 800416a:	3601      	adds	r6, #1
 800416c:	e7ee      	b.n	800414c <__libc_init_array+0xc>
 800416e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004172:	4798      	blx	r3
 8004174:	3601      	adds	r6, #1
 8004176:	e7f2      	b.n	800415e <__libc_init_array+0x1e>
 8004178:	08004d7c 	.word	0x08004d7c
 800417c:	08004d7c 	.word	0x08004d7c
 8004180:	08004d7c 	.word	0x08004d7c
 8004184:	08004d80 	.word	0x08004d80

08004188 <__retarget_lock_init_recursive>:
 8004188:	4770      	bx	lr

0800418a <__retarget_lock_acquire_recursive>:
 800418a:	4770      	bx	lr

0800418c <__retarget_lock_release_recursive>:
 800418c:	4770      	bx	lr
	...

08004190 <_free_r>:
 8004190:	b538      	push	{r3, r4, r5, lr}
 8004192:	4605      	mov	r5, r0
 8004194:	2900      	cmp	r1, #0
 8004196:	d041      	beq.n	800421c <_free_r+0x8c>
 8004198:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800419c:	1f0c      	subs	r4, r1, #4
 800419e:	2b00      	cmp	r3, #0
 80041a0:	bfb8      	it	lt
 80041a2:	18e4      	addlt	r4, r4, r3
 80041a4:	f000 f8e0 	bl	8004368 <__malloc_lock>
 80041a8:	4a1d      	ldr	r2, [pc, #116]	@ (8004220 <_free_r+0x90>)
 80041aa:	6813      	ldr	r3, [r2, #0]
 80041ac:	b933      	cbnz	r3, 80041bc <_free_r+0x2c>
 80041ae:	6063      	str	r3, [r4, #4]
 80041b0:	6014      	str	r4, [r2, #0]
 80041b2:	4628      	mov	r0, r5
 80041b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041b8:	f000 b8dc 	b.w	8004374 <__malloc_unlock>
 80041bc:	42a3      	cmp	r3, r4
 80041be:	d908      	bls.n	80041d2 <_free_r+0x42>
 80041c0:	6820      	ldr	r0, [r4, #0]
 80041c2:	1821      	adds	r1, r4, r0
 80041c4:	428b      	cmp	r3, r1
 80041c6:	bf01      	itttt	eq
 80041c8:	6819      	ldreq	r1, [r3, #0]
 80041ca:	685b      	ldreq	r3, [r3, #4]
 80041cc:	1809      	addeq	r1, r1, r0
 80041ce:	6021      	streq	r1, [r4, #0]
 80041d0:	e7ed      	b.n	80041ae <_free_r+0x1e>
 80041d2:	461a      	mov	r2, r3
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	b10b      	cbz	r3, 80041dc <_free_r+0x4c>
 80041d8:	42a3      	cmp	r3, r4
 80041da:	d9fa      	bls.n	80041d2 <_free_r+0x42>
 80041dc:	6811      	ldr	r1, [r2, #0]
 80041de:	1850      	adds	r0, r2, r1
 80041e0:	42a0      	cmp	r0, r4
 80041e2:	d10b      	bne.n	80041fc <_free_r+0x6c>
 80041e4:	6820      	ldr	r0, [r4, #0]
 80041e6:	4401      	add	r1, r0
 80041e8:	1850      	adds	r0, r2, r1
 80041ea:	4283      	cmp	r3, r0
 80041ec:	6011      	str	r1, [r2, #0]
 80041ee:	d1e0      	bne.n	80041b2 <_free_r+0x22>
 80041f0:	6818      	ldr	r0, [r3, #0]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	6053      	str	r3, [r2, #4]
 80041f6:	4408      	add	r0, r1
 80041f8:	6010      	str	r0, [r2, #0]
 80041fa:	e7da      	b.n	80041b2 <_free_r+0x22>
 80041fc:	d902      	bls.n	8004204 <_free_r+0x74>
 80041fe:	230c      	movs	r3, #12
 8004200:	602b      	str	r3, [r5, #0]
 8004202:	e7d6      	b.n	80041b2 <_free_r+0x22>
 8004204:	6820      	ldr	r0, [r4, #0]
 8004206:	1821      	adds	r1, r4, r0
 8004208:	428b      	cmp	r3, r1
 800420a:	bf04      	itt	eq
 800420c:	6819      	ldreq	r1, [r3, #0]
 800420e:	685b      	ldreq	r3, [r3, #4]
 8004210:	6063      	str	r3, [r4, #4]
 8004212:	bf04      	itt	eq
 8004214:	1809      	addeq	r1, r1, r0
 8004216:	6021      	streq	r1, [r4, #0]
 8004218:	6054      	str	r4, [r2, #4]
 800421a:	e7ca      	b.n	80041b2 <_free_r+0x22>
 800421c:	bd38      	pop	{r3, r4, r5, pc}
 800421e:	bf00      	nop
 8004220:	20000288 	.word	0x20000288

08004224 <sbrk_aligned>:
 8004224:	b570      	push	{r4, r5, r6, lr}
 8004226:	4e0f      	ldr	r6, [pc, #60]	@ (8004264 <sbrk_aligned+0x40>)
 8004228:	460c      	mov	r4, r1
 800422a:	6831      	ldr	r1, [r6, #0]
 800422c:	4605      	mov	r5, r0
 800422e:	b911      	cbnz	r1, 8004236 <sbrk_aligned+0x12>
 8004230:	f000 fcb6 	bl	8004ba0 <_sbrk_r>
 8004234:	6030      	str	r0, [r6, #0]
 8004236:	4621      	mov	r1, r4
 8004238:	4628      	mov	r0, r5
 800423a:	f000 fcb1 	bl	8004ba0 <_sbrk_r>
 800423e:	1c43      	adds	r3, r0, #1
 8004240:	d103      	bne.n	800424a <sbrk_aligned+0x26>
 8004242:	f04f 34ff 	mov.w	r4, #4294967295
 8004246:	4620      	mov	r0, r4
 8004248:	bd70      	pop	{r4, r5, r6, pc}
 800424a:	1cc4      	adds	r4, r0, #3
 800424c:	f024 0403 	bic.w	r4, r4, #3
 8004250:	42a0      	cmp	r0, r4
 8004252:	d0f8      	beq.n	8004246 <sbrk_aligned+0x22>
 8004254:	1a21      	subs	r1, r4, r0
 8004256:	4628      	mov	r0, r5
 8004258:	f000 fca2 	bl	8004ba0 <_sbrk_r>
 800425c:	3001      	adds	r0, #1
 800425e:	d1f2      	bne.n	8004246 <sbrk_aligned+0x22>
 8004260:	e7ef      	b.n	8004242 <sbrk_aligned+0x1e>
 8004262:	bf00      	nop
 8004264:	20000284 	.word	0x20000284

08004268 <_malloc_r>:
 8004268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800426c:	1ccd      	adds	r5, r1, #3
 800426e:	f025 0503 	bic.w	r5, r5, #3
 8004272:	3508      	adds	r5, #8
 8004274:	2d0c      	cmp	r5, #12
 8004276:	bf38      	it	cc
 8004278:	250c      	movcc	r5, #12
 800427a:	2d00      	cmp	r5, #0
 800427c:	4606      	mov	r6, r0
 800427e:	db01      	blt.n	8004284 <_malloc_r+0x1c>
 8004280:	42a9      	cmp	r1, r5
 8004282:	d904      	bls.n	800428e <_malloc_r+0x26>
 8004284:	230c      	movs	r3, #12
 8004286:	6033      	str	r3, [r6, #0]
 8004288:	2000      	movs	r0, #0
 800428a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800428e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004364 <_malloc_r+0xfc>
 8004292:	f000 f869 	bl	8004368 <__malloc_lock>
 8004296:	f8d8 3000 	ldr.w	r3, [r8]
 800429a:	461c      	mov	r4, r3
 800429c:	bb44      	cbnz	r4, 80042f0 <_malloc_r+0x88>
 800429e:	4629      	mov	r1, r5
 80042a0:	4630      	mov	r0, r6
 80042a2:	f7ff ffbf 	bl	8004224 <sbrk_aligned>
 80042a6:	1c43      	adds	r3, r0, #1
 80042a8:	4604      	mov	r4, r0
 80042aa:	d158      	bne.n	800435e <_malloc_r+0xf6>
 80042ac:	f8d8 4000 	ldr.w	r4, [r8]
 80042b0:	4627      	mov	r7, r4
 80042b2:	2f00      	cmp	r7, #0
 80042b4:	d143      	bne.n	800433e <_malloc_r+0xd6>
 80042b6:	2c00      	cmp	r4, #0
 80042b8:	d04b      	beq.n	8004352 <_malloc_r+0xea>
 80042ba:	6823      	ldr	r3, [r4, #0]
 80042bc:	4639      	mov	r1, r7
 80042be:	4630      	mov	r0, r6
 80042c0:	eb04 0903 	add.w	r9, r4, r3
 80042c4:	f000 fc6c 	bl	8004ba0 <_sbrk_r>
 80042c8:	4581      	cmp	r9, r0
 80042ca:	d142      	bne.n	8004352 <_malloc_r+0xea>
 80042cc:	6821      	ldr	r1, [r4, #0]
 80042ce:	1a6d      	subs	r5, r5, r1
 80042d0:	4629      	mov	r1, r5
 80042d2:	4630      	mov	r0, r6
 80042d4:	f7ff ffa6 	bl	8004224 <sbrk_aligned>
 80042d8:	3001      	adds	r0, #1
 80042da:	d03a      	beq.n	8004352 <_malloc_r+0xea>
 80042dc:	6823      	ldr	r3, [r4, #0]
 80042de:	442b      	add	r3, r5
 80042e0:	6023      	str	r3, [r4, #0]
 80042e2:	f8d8 3000 	ldr.w	r3, [r8]
 80042e6:	685a      	ldr	r2, [r3, #4]
 80042e8:	bb62      	cbnz	r2, 8004344 <_malloc_r+0xdc>
 80042ea:	f8c8 7000 	str.w	r7, [r8]
 80042ee:	e00f      	b.n	8004310 <_malloc_r+0xa8>
 80042f0:	6822      	ldr	r2, [r4, #0]
 80042f2:	1b52      	subs	r2, r2, r5
 80042f4:	d420      	bmi.n	8004338 <_malloc_r+0xd0>
 80042f6:	2a0b      	cmp	r2, #11
 80042f8:	d917      	bls.n	800432a <_malloc_r+0xc2>
 80042fa:	1961      	adds	r1, r4, r5
 80042fc:	42a3      	cmp	r3, r4
 80042fe:	6025      	str	r5, [r4, #0]
 8004300:	bf18      	it	ne
 8004302:	6059      	strne	r1, [r3, #4]
 8004304:	6863      	ldr	r3, [r4, #4]
 8004306:	bf08      	it	eq
 8004308:	f8c8 1000 	streq.w	r1, [r8]
 800430c:	5162      	str	r2, [r4, r5]
 800430e:	604b      	str	r3, [r1, #4]
 8004310:	4630      	mov	r0, r6
 8004312:	f000 f82f 	bl	8004374 <__malloc_unlock>
 8004316:	f104 000b 	add.w	r0, r4, #11
 800431a:	1d23      	adds	r3, r4, #4
 800431c:	f020 0007 	bic.w	r0, r0, #7
 8004320:	1ac2      	subs	r2, r0, r3
 8004322:	bf1c      	itt	ne
 8004324:	1a1b      	subne	r3, r3, r0
 8004326:	50a3      	strne	r3, [r4, r2]
 8004328:	e7af      	b.n	800428a <_malloc_r+0x22>
 800432a:	6862      	ldr	r2, [r4, #4]
 800432c:	42a3      	cmp	r3, r4
 800432e:	bf0c      	ite	eq
 8004330:	f8c8 2000 	streq.w	r2, [r8]
 8004334:	605a      	strne	r2, [r3, #4]
 8004336:	e7eb      	b.n	8004310 <_malloc_r+0xa8>
 8004338:	4623      	mov	r3, r4
 800433a:	6864      	ldr	r4, [r4, #4]
 800433c:	e7ae      	b.n	800429c <_malloc_r+0x34>
 800433e:	463c      	mov	r4, r7
 8004340:	687f      	ldr	r7, [r7, #4]
 8004342:	e7b6      	b.n	80042b2 <_malloc_r+0x4a>
 8004344:	461a      	mov	r2, r3
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	42a3      	cmp	r3, r4
 800434a:	d1fb      	bne.n	8004344 <_malloc_r+0xdc>
 800434c:	2300      	movs	r3, #0
 800434e:	6053      	str	r3, [r2, #4]
 8004350:	e7de      	b.n	8004310 <_malloc_r+0xa8>
 8004352:	230c      	movs	r3, #12
 8004354:	6033      	str	r3, [r6, #0]
 8004356:	4630      	mov	r0, r6
 8004358:	f000 f80c 	bl	8004374 <__malloc_unlock>
 800435c:	e794      	b.n	8004288 <_malloc_r+0x20>
 800435e:	6005      	str	r5, [r0, #0]
 8004360:	e7d6      	b.n	8004310 <_malloc_r+0xa8>
 8004362:	bf00      	nop
 8004364:	20000288 	.word	0x20000288

08004368 <__malloc_lock>:
 8004368:	4801      	ldr	r0, [pc, #4]	@ (8004370 <__malloc_lock+0x8>)
 800436a:	f7ff bf0e 	b.w	800418a <__retarget_lock_acquire_recursive>
 800436e:	bf00      	nop
 8004370:	20000280 	.word	0x20000280

08004374 <__malloc_unlock>:
 8004374:	4801      	ldr	r0, [pc, #4]	@ (800437c <__malloc_unlock+0x8>)
 8004376:	f7ff bf09 	b.w	800418c <__retarget_lock_release_recursive>
 800437a:	bf00      	nop
 800437c:	20000280 	.word	0x20000280

08004380 <__sfputc_r>:
 8004380:	6893      	ldr	r3, [r2, #8]
 8004382:	3b01      	subs	r3, #1
 8004384:	2b00      	cmp	r3, #0
 8004386:	b410      	push	{r4}
 8004388:	6093      	str	r3, [r2, #8]
 800438a:	da08      	bge.n	800439e <__sfputc_r+0x1e>
 800438c:	6994      	ldr	r4, [r2, #24]
 800438e:	42a3      	cmp	r3, r4
 8004390:	db01      	blt.n	8004396 <__sfputc_r+0x16>
 8004392:	290a      	cmp	r1, #10
 8004394:	d103      	bne.n	800439e <__sfputc_r+0x1e>
 8004396:	f85d 4b04 	ldr.w	r4, [sp], #4
 800439a:	f000 bb6d 	b.w	8004a78 <__swbuf_r>
 800439e:	6813      	ldr	r3, [r2, #0]
 80043a0:	1c58      	adds	r0, r3, #1
 80043a2:	6010      	str	r0, [r2, #0]
 80043a4:	7019      	strb	r1, [r3, #0]
 80043a6:	4608      	mov	r0, r1
 80043a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043ac:	4770      	bx	lr

080043ae <__sfputs_r>:
 80043ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043b0:	4606      	mov	r6, r0
 80043b2:	460f      	mov	r7, r1
 80043b4:	4614      	mov	r4, r2
 80043b6:	18d5      	adds	r5, r2, r3
 80043b8:	42ac      	cmp	r4, r5
 80043ba:	d101      	bne.n	80043c0 <__sfputs_r+0x12>
 80043bc:	2000      	movs	r0, #0
 80043be:	e007      	b.n	80043d0 <__sfputs_r+0x22>
 80043c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043c4:	463a      	mov	r2, r7
 80043c6:	4630      	mov	r0, r6
 80043c8:	f7ff ffda 	bl	8004380 <__sfputc_r>
 80043cc:	1c43      	adds	r3, r0, #1
 80043ce:	d1f3      	bne.n	80043b8 <__sfputs_r+0xa>
 80043d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080043d4 <_vfiprintf_r>:
 80043d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043d8:	460d      	mov	r5, r1
 80043da:	b09d      	sub	sp, #116	@ 0x74
 80043dc:	4614      	mov	r4, r2
 80043de:	4698      	mov	r8, r3
 80043e0:	4606      	mov	r6, r0
 80043e2:	b118      	cbz	r0, 80043ec <_vfiprintf_r+0x18>
 80043e4:	6a03      	ldr	r3, [r0, #32]
 80043e6:	b90b      	cbnz	r3, 80043ec <_vfiprintf_r+0x18>
 80043e8:	f7ff fdca 	bl	8003f80 <__sinit>
 80043ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80043ee:	07d9      	lsls	r1, r3, #31
 80043f0:	d405      	bmi.n	80043fe <_vfiprintf_r+0x2a>
 80043f2:	89ab      	ldrh	r3, [r5, #12]
 80043f4:	059a      	lsls	r2, r3, #22
 80043f6:	d402      	bmi.n	80043fe <_vfiprintf_r+0x2a>
 80043f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80043fa:	f7ff fec6 	bl	800418a <__retarget_lock_acquire_recursive>
 80043fe:	89ab      	ldrh	r3, [r5, #12]
 8004400:	071b      	lsls	r3, r3, #28
 8004402:	d501      	bpl.n	8004408 <_vfiprintf_r+0x34>
 8004404:	692b      	ldr	r3, [r5, #16]
 8004406:	b99b      	cbnz	r3, 8004430 <_vfiprintf_r+0x5c>
 8004408:	4629      	mov	r1, r5
 800440a:	4630      	mov	r0, r6
 800440c:	f000 fb72 	bl	8004af4 <__swsetup_r>
 8004410:	b170      	cbz	r0, 8004430 <_vfiprintf_r+0x5c>
 8004412:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004414:	07dc      	lsls	r4, r3, #31
 8004416:	d504      	bpl.n	8004422 <_vfiprintf_r+0x4e>
 8004418:	f04f 30ff 	mov.w	r0, #4294967295
 800441c:	b01d      	add	sp, #116	@ 0x74
 800441e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004422:	89ab      	ldrh	r3, [r5, #12]
 8004424:	0598      	lsls	r0, r3, #22
 8004426:	d4f7      	bmi.n	8004418 <_vfiprintf_r+0x44>
 8004428:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800442a:	f7ff feaf 	bl	800418c <__retarget_lock_release_recursive>
 800442e:	e7f3      	b.n	8004418 <_vfiprintf_r+0x44>
 8004430:	2300      	movs	r3, #0
 8004432:	9309      	str	r3, [sp, #36]	@ 0x24
 8004434:	2320      	movs	r3, #32
 8004436:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800443a:	f8cd 800c 	str.w	r8, [sp, #12]
 800443e:	2330      	movs	r3, #48	@ 0x30
 8004440:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80045f0 <_vfiprintf_r+0x21c>
 8004444:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004448:	f04f 0901 	mov.w	r9, #1
 800444c:	4623      	mov	r3, r4
 800444e:	469a      	mov	sl, r3
 8004450:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004454:	b10a      	cbz	r2, 800445a <_vfiprintf_r+0x86>
 8004456:	2a25      	cmp	r2, #37	@ 0x25
 8004458:	d1f9      	bne.n	800444e <_vfiprintf_r+0x7a>
 800445a:	ebba 0b04 	subs.w	fp, sl, r4
 800445e:	d00b      	beq.n	8004478 <_vfiprintf_r+0xa4>
 8004460:	465b      	mov	r3, fp
 8004462:	4622      	mov	r2, r4
 8004464:	4629      	mov	r1, r5
 8004466:	4630      	mov	r0, r6
 8004468:	f7ff ffa1 	bl	80043ae <__sfputs_r>
 800446c:	3001      	adds	r0, #1
 800446e:	f000 80a7 	beq.w	80045c0 <_vfiprintf_r+0x1ec>
 8004472:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004474:	445a      	add	r2, fp
 8004476:	9209      	str	r2, [sp, #36]	@ 0x24
 8004478:	f89a 3000 	ldrb.w	r3, [sl]
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 809f 	beq.w	80045c0 <_vfiprintf_r+0x1ec>
 8004482:	2300      	movs	r3, #0
 8004484:	f04f 32ff 	mov.w	r2, #4294967295
 8004488:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800448c:	f10a 0a01 	add.w	sl, sl, #1
 8004490:	9304      	str	r3, [sp, #16]
 8004492:	9307      	str	r3, [sp, #28]
 8004494:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004498:	931a      	str	r3, [sp, #104]	@ 0x68
 800449a:	4654      	mov	r4, sl
 800449c:	2205      	movs	r2, #5
 800449e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044a2:	4853      	ldr	r0, [pc, #332]	@ (80045f0 <_vfiprintf_r+0x21c>)
 80044a4:	f7fb fe9c 	bl	80001e0 <memchr>
 80044a8:	9a04      	ldr	r2, [sp, #16]
 80044aa:	b9d8      	cbnz	r0, 80044e4 <_vfiprintf_r+0x110>
 80044ac:	06d1      	lsls	r1, r2, #27
 80044ae:	bf44      	itt	mi
 80044b0:	2320      	movmi	r3, #32
 80044b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80044b6:	0713      	lsls	r3, r2, #28
 80044b8:	bf44      	itt	mi
 80044ba:	232b      	movmi	r3, #43	@ 0x2b
 80044bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80044c0:	f89a 3000 	ldrb.w	r3, [sl]
 80044c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80044c6:	d015      	beq.n	80044f4 <_vfiprintf_r+0x120>
 80044c8:	9a07      	ldr	r2, [sp, #28]
 80044ca:	4654      	mov	r4, sl
 80044cc:	2000      	movs	r0, #0
 80044ce:	f04f 0c0a 	mov.w	ip, #10
 80044d2:	4621      	mov	r1, r4
 80044d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044d8:	3b30      	subs	r3, #48	@ 0x30
 80044da:	2b09      	cmp	r3, #9
 80044dc:	d94b      	bls.n	8004576 <_vfiprintf_r+0x1a2>
 80044de:	b1b0      	cbz	r0, 800450e <_vfiprintf_r+0x13a>
 80044e0:	9207      	str	r2, [sp, #28]
 80044e2:	e014      	b.n	800450e <_vfiprintf_r+0x13a>
 80044e4:	eba0 0308 	sub.w	r3, r0, r8
 80044e8:	fa09 f303 	lsl.w	r3, r9, r3
 80044ec:	4313      	orrs	r3, r2
 80044ee:	9304      	str	r3, [sp, #16]
 80044f0:	46a2      	mov	sl, r4
 80044f2:	e7d2      	b.n	800449a <_vfiprintf_r+0xc6>
 80044f4:	9b03      	ldr	r3, [sp, #12]
 80044f6:	1d19      	adds	r1, r3, #4
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	9103      	str	r1, [sp, #12]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	bfbb      	ittet	lt
 8004500:	425b      	neglt	r3, r3
 8004502:	f042 0202 	orrlt.w	r2, r2, #2
 8004506:	9307      	strge	r3, [sp, #28]
 8004508:	9307      	strlt	r3, [sp, #28]
 800450a:	bfb8      	it	lt
 800450c:	9204      	strlt	r2, [sp, #16]
 800450e:	7823      	ldrb	r3, [r4, #0]
 8004510:	2b2e      	cmp	r3, #46	@ 0x2e
 8004512:	d10a      	bne.n	800452a <_vfiprintf_r+0x156>
 8004514:	7863      	ldrb	r3, [r4, #1]
 8004516:	2b2a      	cmp	r3, #42	@ 0x2a
 8004518:	d132      	bne.n	8004580 <_vfiprintf_r+0x1ac>
 800451a:	9b03      	ldr	r3, [sp, #12]
 800451c:	1d1a      	adds	r2, r3, #4
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	9203      	str	r2, [sp, #12]
 8004522:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004526:	3402      	adds	r4, #2
 8004528:	9305      	str	r3, [sp, #20]
 800452a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004600 <_vfiprintf_r+0x22c>
 800452e:	7821      	ldrb	r1, [r4, #0]
 8004530:	2203      	movs	r2, #3
 8004532:	4650      	mov	r0, sl
 8004534:	f7fb fe54 	bl	80001e0 <memchr>
 8004538:	b138      	cbz	r0, 800454a <_vfiprintf_r+0x176>
 800453a:	9b04      	ldr	r3, [sp, #16]
 800453c:	eba0 000a 	sub.w	r0, r0, sl
 8004540:	2240      	movs	r2, #64	@ 0x40
 8004542:	4082      	lsls	r2, r0
 8004544:	4313      	orrs	r3, r2
 8004546:	3401      	adds	r4, #1
 8004548:	9304      	str	r3, [sp, #16]
 800454a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800454e:	4829      	ldr	r0, [pc, #164]	@ (80045f4 <_vfiprintf_r+0x220>)
 8004550:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004554:	2206      	movs	r2, #6
 8004556:	f7fb fe43 	bl	80001e0 <memchr>
 800455a:	2800      	cmp	r0, #0
 800455c:	d03f      	beq.n	80045de <_vfiprintf_r+0x20a>
 800455e:	4b26      	ldr	r3, [pc, #152]	@ (80045f8 <_vfiprintf_r+0x224>)
 8004560:	bb1b      	cbnz	r3, 80045aa <_vfiprintf_r+0x1d6>
 8004562:	9b03      	ldr	r3, [sp, #12]
 8004564:	3307      	adds	r3, #7
 8004566:	f023 0307 	bic.w	r3, r3, #7
 800456a:	3308      	adds	r3, #8
 800456c:	9303      	str	r3, [sp, #12]
 800456e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004570:	443b      	add	r3, r7
 8004572:	9309      	str	r3, [sp, #36]	@ 0x24
 8004574:	e76a      	b.n	800444c <_vfiprintf_r+0x78>
 8004576:	fb0c 3202 	mla	r2, ip, r2, r3
 800457a:	460c      	mov	r4, r1
 800457c:	2001      	movs	r0, #1
 800457e:	e7a8      	b.n	80044d2 <_vfiprintf_r+0xfe>
 8004580:	2300      	movs	r3, #0
 8004582:	3401      	adds	r4, #1
 8004584:	9305      	str	r3, [sp, #20]
 8004586:	4619      	mov	r1, r3
 8004588:	f04f 0c0a 	mov.w	ip, #10
 800458c:	4620      	mov	r0, r4
 800458e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004592:	3a30      	subs	r2, #48	@ 0x30
 8004594:	2a09      	cmp	r2, #9
 8004596:	d903      	bls.n	80045a0 <_vfiprintf_r+0x1cc>
 8004598:	2b00      	cmp	r3, #0
 800459a:	d0c6      	beq.n	800452a <_vfiprintf_r+0x156>
 800459c:	9105      	str	r1, [sp, #20]
 800459e:	e7c4      	b.n	800452a <_vfiprintf_r+0x156>
 80045a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80045a4:	4604      	mov	r4, r0
 80045a6:	2301      	movs	r3, #1
 80045a8:	e7f0      	b.n	800458c <_vfiprintf_r+0x1b8>
 80045aa:	ab03      	add	r3, sp, #12
 80045ac:	9300      	str	r3, [sp, #0]
 80045ae:	462a      	mov	r2, r5
 80045b0:	4b12      	ldr	r3, [pc, #72]	@ (80045fc <_vfiprintf_r+0x228>)
 80045b2:	a904      	add	r1, sp, #16
 80045b4:	4630      	mov	r0, r6
 80045b6:	f3af 8000 	nop.w
 80045ba:	4607      	mov	r7, r0
 80045bc:	1c78      	adds	r0, r7, #1
 80045be:	d1d6      	bne.n	800456e <_vfiprintf_r+0x19a>
 80045c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80045c2:	07d9      	lsls	r1, r3, #31
 80045c4:	d405      	bmi.n	80045d2 <_vfiprintf_r+0x1fe>
 80045c6:	89ab      	ldrh	r3, [r5, #12]
 80045c8:	059a      	lsls	r2, r3, #22
 80045ca:	d402      	bmi.n	80045d2 <_vfiprintf_r+0x1fe>
 80045cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80045ce:	f7ff fddd 	bl	800418c <__retarget_lock_release_recursive>
 80045d2:	89ab      	ldrh	r3, [r5, #12]
 80045d4:	065b      	lsls	r3, r3, #25
 80045d6:	f53f af1f 	bmi.w	8004418 <_vfiprintf_r+0x44>
 80045da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80045dc:	e71e      	b.n	800441c <_vfiprintf_r+0x48>
 80045de:	ab03      	add	r3, sp, #12
 80045e0:	9300      	str	r3, [sp, #0]
 80045e2:	462a      	mov	r2, r5
 80045e4:	4b05      	ldr	r3, [pc, #20]	@ (80045fc <_vfiprintf_r+0x228>)
 80045e6:	a904      	add	r1, sp, #16
 80045e8:	4630      	mov	r0, r6
 80045ea:	f000 f879 	bl	80046e0 <_printf_i>
 80045ee:	e7e4      	b.n	80045ba <_vfiprintf_r+0x1e6>
 80045f0:	08004d40 	.word	0x08004d40
 80045f4:	08004d4a 	.word	0x08004d4a
 80045f8:	00000000 	.word	0x00000000
 80045fc:	080043af 	.word	0x080043af
 8004600:	08004d46 	.word	0x08004d46

08004604 <_printf_common>:
 8004604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004608:	4616      	mov	r6, r2
 800460a:	4698      	mov	r8, r3
 800460c:	688a      	ldr	r2, [r1, #8]
 800460e:	690b      	ldr	r3, [r1, #16]
 8004610:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004614:	4293      	cmp	r3, r2
 8004616:	bfb8      	it	lt
 8004618:	4613      	movlt	r3, r2
 800461a:	6033      	str	r3, [r6, #0]
 800461c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004620:	4607      	mov	r7, r0
 8004622:	460c      	mov	r4, r1
 8004624:	b10a      	cbz	r2, 800462a <_printf_common+0x26>
 8004626:	3301      	adds	r3, #1
 8004628:	6033      	str	r3, [r6, #0]
 800462a:	6823      	ldr	r3, [r4, #0]
 800462c:	0699      	lsls	r1, r3, #26
 800462e:	bf42      	ittt	mi
 8004630:	6833      	ldrmi	r3, [r6, #0]
 8004632:	3302      	addmi	r3, #2
 8004634:	6033      	strmi	r3, [r6, #0]
 8004636:	6825      	ldr	r5, [r4, #0]
 8004638:	f015 0506 	ands.w	r5, r5, #6
 800463c:	d106      	bne.n	800464c <_printf_common+0x48>
 800463e:	f104 0a19 	add.w	sl, r4, #25
 8004642:	68e3      	ldr	r3, [r4, #12]
 8004644:	6832      	ldr	r2, [r6, #0]
 8004646:	1a9b      	subs	r3, r3, r2
 8004648:	42ab      	cmp	r3, r5
 800464a:	dc26      	bgt.n	800469a <_printf_common+0x96>
 800464c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004650:	6822      	ldr	r2, [r4, #0]
 8004652:	3b00      	subs	r3, #0
 8004654:	bf18      	it	ne
 8004656:	2301      	movne	r3, #1
 8004658:	0692      	lsls	r2, r2, #26
 800465a:	d42b      	bmi.n	80046b4 <_printf_common+0xb0>
 800465c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004660:	4641      	mov	r1, r8
 8004662:	4638      	mov	r0, r7
 8004664:	47c8      	blx	r9
 8004666:	3001      	adds	r0, #1
 8004668:	d01e      	beq.n	80046a8 <_printf_common+0xa4>
 800466a:	6823      	ldr	r3, [r4, #0]
 800466c:	6922      	ldr	r2, [r4, #16]
 800466e:	f003 0306 	and.w	r3, r3, #6
 8004672:	2b04      	cmp	r3, #4
 8004674:	bf02      	ittt	eq
 8004676:	68e5      	ldreq	r5, [r4, #12]
 8004678:	6833      	ldreq	r3, [r6, #0]
 800467a:	1aed      	subeq	r5, r5, r3
 800467c:	68a3      	ldr	r3, [r4, #8]
 800467e:	bf0c      	ite	eq
 8004680:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004684:	2500      	movne	r5, #0
 8004686:	4293      	cmp	r3, r2
 8004688:	bfc4      	itt	gt
 800468a:	1a9b      	subgt	r3, r3, r2
 800468c:	18ed      	addgt	r5, r5, r3
 800468e:	2600      	movs	r6, #0
 8004690:	341a      	adds	r4, #26
 8004692:	42b5      	cmp	r5, r6
 8004694:	d11a      	bne.n	80046cc <_printf_common+0xc8>
 8004696:	2000      	movs	r0, #0
 8004698:	e008      	b.n	80046ac <_printf_common+0xa8>
 800469a:	2301      	movs	r3, #1
 800469c:	4652      	mov	r2, sl
 800469e:	4641      	mov	r1, r8
 80046a0:	4638      	mov	r0, r7
 80046a2:	47c8      	blx	r9
 80046a4:	3001      	adds	r0, #1
 80046a6:	d103      	bne.n	80046b0 <_printf_common+0xac>
 80046a8:	f04f 30ff 	mov.w	r0, #4294967295
 80046ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046b0:	3501      	adds	r5, #1
 80046b2:	e7c6      	b.n	8004642 <_printf_common+0x3e>
 80046b4:	18e1      	adds	r1, r4, r3
 80046b6:	1c5a      	adds	r2, r3, #1
 80046b8:	2030      	movs	r0, #48	@ 0x30
 80046ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80046be:	4422      	add	r2, r4
 80046c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80046c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80046c8:	3302      	adds	r3, #2
 80046ca:	e7c7      	b.n	800465c <_printf_common+0x58>
 80046cc:	2301      	movs	r3, #1
 80046ce:	4622      	mov	r2, r4
 80046d0:	4641      	mov	r1, r8
 80046d2:	4638      	mov	r0, r7
 80046d4:	47c8      	blx	r9
 80046d6:	3001      	adds	r0, #1
 80046d8:	d0e6      	beq.n	80046a8 <_printf_common+0xa4>
 80046da:	3601      	adds	r6, #1
 80046dc:	e7d9      	b.n	8004692 <_printf_common+0x8e>
	...

080046e0 <_printf_i>:
 80046e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046e4:	7e0f      	ldrb	r7, [r1, #24]
 80046e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80046e8:	2f78      	cmp	r7, #120	@ 0x78
 80046ea:	4691      	mov	r9, r2
 80046ec:	4680      	mov	r8, r0
 80046ee:	460c      	mov	r4, r1
 80046f0:	469a      	mov	sl, r3
 80046f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80046f6:	d807      	bhi.n	8004708 <_printf_i+0x28>
 80046f8:	2f62      	cmp	r7, #98	@ 0x62
 80046fa:	d80a      	bhi.n	8004712 <_printf_i+0x32>
 80046fc:	2f00      	cmp	r7, #0
 80046fe:	f000 80d2 	beq.w	80048a6 <_printf_i+0x1c6>
 8004702:	2f58      	cmp	r7, #88	@ 0x58
 8004704:	f000 80b9 	beq.w	800487a <_printf_i+0x19a>
 8004708:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800470c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004710:	e03a      	b.n	8004788 <_printf_i+0xa8>
 8004712:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004716:	2b15      	cmp	r3, #21
 8004718:	d8f6      	bhi.n	8004708 <_printf_i+0x28>
 800471a:	a101      	add	r1, pc, #4	@ (adr r1, 8004720 <_printf_i+0x40>)
 800471c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004720:	08004779 	.word	0x08004779
 8004724:	0800478d 	.word	0x0800478d
 8004728:	08004709 	.word	0x08004709
 800472c:	08004709 	.word	0x08004709
 8004730:	08004709 	.word	0x08004709
 8004734:	08004709 	.word	0x08004709
 8004738:	0800478d 	.word	0x0800478d
 800473c:	08004709 	.word	0x08004709
 8004740:	08004709 	.word	0x08004709
 8004744:	08004709 	.word	0x08004709
 8004748:	08004709 	.word	0x08004709
 800474c:	0800488d 	.word	0x0800488d
 8004750:	080047b7 	.word	0x080047b7
 8004754:	08004847 	.word	0x08004847
 8004758:	08004709 	.word	0x08004709
 800475c:	08004709 	.word	0x08004709
 8004760:	080048af 	.word	0x080048af
 8004764:	08004709 	.word	0x08004709
 8004768:	080047b7 	.word	0x080047b7
 800476c:	08004709 	.word	0x08004709
 8004770:	08004709 	.word	0x08004709
 8004774:	0800484f 	.word	0x0800484f
 8004778:	6833      	ldr	r3, [r6, #0]
 800477a:	1d1a      	adds	r2, r3, #4
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	6032      	str	r2, [r6, #0]
 8004780:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004784:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004788:	2301      	movs	r3, #1
 800478a:	e09d      	b.n	80048c8 <_printf_i+0x1e8>
 800478c:	6833      	ldr	r3, [r6, #0]
 800478e:	6820      	ldr	r0, [r4, #0]
 8004790:	1d19      	adds	r1, r3, #4
 8004792:	6031      	str	r1, [r6, #0]
 8004794:	0606      	lsls	r6, r0, #24
 8004796:	d501      	bpl.n	800479c <_printf_i+0xbc>
 8004798:	681d      	ldr	r5, [r3, #0]
 800479a:	e003      	b.n	80047a4 <_printf_i+0xc4>
 800479c:	0645      	lsls	r5, r0, #25
 800479e:	d5fb      	bpl.n	8004798 <_printf_i+0xb8>
 80047a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80047a4:	2d00      	cmp	r5, #0
 80047a6:	da03      	bge.n	80047b0 <_printf_i+0xd0>
 80047a8:	232d      	movs	r3, #45	@ 0x2d
 80047aa:	426d      	negs	r5, r5
 80047ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047b0:	4859      	ldr	r0, [pc, #356]	@ (8004918 <_printf_i+0x238>)
 80047b2:	230a      	movs	r3, #10
 80047b4:	e011      	b.n	80047da <_printf_i+0xfa>
 80047b6:	6821      	ldr	r1, [r4, #0]
 80047b8:	6833      	ldr	r3, [r6, #0]
 80047ba:	0608      	lsls	r0, r1, #24
 80047bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80047c0:	d402      	bmi.n	80047c8 <_printf_i+0xe8>
 80047c2:	0649      	lsls	r1, r1, #25
 80047c4:	bf48      	it	mi
 80047c6:	b2ad      	uxthmi	r5, r5
 80047c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80047ca:	4853      	ldr	r0, [pc, #332]	@ (8004918 <_printf_i+0x238>)
 80047cc:	6033      	str	r3, [r6, #0]
 80047ce:	bf14      	ite	ne
 80047d0:	230a      	movne	r3, #10
 80047d2:	2308      	moveq	r3, #8
 80047d4:	2100      	movs	r1, #0
 80047d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80047da:	6866      	ldr	r6, [r4, #4]
 80047dc:	60a6      	str	r6, [r4, #8]
 80047de:	2e00      	cmp	r6, #0
 80047e0:	bfa2      	ittt	ge
 80047e2:	6821      	ldrge	r1, [r4, #0]
 80047e4:	f021 0104 	bicge.w	r1, r1, #4
 80047e8:	6021      	strge	r1, [r4, #0]
 80047ea:	b90d      	cbnz	r5, 80047f0 <_printf_i+0x110>
 80047ec:	2e00      	cmp	r6, #0
 80047ee:	d04b      	beq.n	8004888 <_printf_i+0x1a8>
 80047f0:	4616      	mov	r6, r2
 80047f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80047f6:	fb03 5711 	mls	r7, r3, r1, r5
 80047fa:	5dc7      	ldrb	r7, [r0, r7]
 80047fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004800:	462f      	mov	r7, r5
 8004802:	42bb      	cmp	r3, r7
 8004804:	460d      	mov	r5, r1
 8004806:	d9f4      	bls.n	80047f2 <_printf_i+0x112>
 8004808:	2b08      	cmp	r3, #8
 800480a:	d10b      	bne.n	8004824 <_printf_i+0x144>
 800480c:	6823      	ldr	r3, [r4, #0]
 800480e:	07df      	lsls	r7, r3, #31
 8004810:	d508      	bpl.n	8004824 <_printf_i+0x144>
 8004812:	6923      	ldr	r3, [r4, #16]
 8004814:	6861      	ldr	r1, [r4, #4]
 8004816:	4299      	cmp	r1, r3
 8004818:	bfde      	ittt	le
 800481a:	2330      	movle	r3, #48	@ 0x30
 800481c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004820:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004824:	1b92      	subs	r2, r2, r6
 8004826:	6122      	str	r2, [r4, #16]
 8004828:	f8cd a000 	str.w	sl, [sp]
 800482c:	464b      	mov	r3, r9
 800482e:	aa03      	add	r2, sp, #12
 8004830:	4621      	mov	r1, r4
 8004832:	4640      	mov	r0, r8
 8004834:	f7ff fee6 	bl	8004604 <_printf_common>
 8004838:	3001      	adds	r0, #1
 800483a:	d14a      	bne.n	80048d2 <_printf_i+0x1f2>
 800483c:	f04f 30ff 	mov.w	r0, #4294967295
 8004840:	b004      	add	sp, #16
 8004842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004846:	6823      	ldr	r3, [r4, #0]
 8004848:	f043 0320 	orr.w	r3, r3, #32
 800484c:	6023      	str	r3, [r4, #0]
 800484e:	4833      	ldr	r0, [pc, #204]	@ (800491c <_printf_i+0x23c>)
 8004850:	2778      	movs	r7, #120	@ 0x78
 8004852:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004856:	6823      	ldr	r3, [r4, #0]
 8004858:	6831      	ldr	r1, [r6, #0]
 800485a:	061f      	lsls	r7, r3, #24
 800485c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004860:	d402      	bmi.n	8004868 <_printf_i+0x188>
 8004862:	065f      	lsls	r7, r3, #25
 8004864:	bf48      	it	mi
 8004866:	b2ad      	uxthmi	r5, r5
 8004868:	6031      	str	r1, [r6, #0]
 800486a:	07d9      	lsls	r1, r3, #31
 800486c:	bf44      	itt	mi
 800486e:	f043 0320 	orrmi.w	r3, r3, #32
 8004872:	6023      	strmi	r3, [r4, #0]
 8004874:	b11d      	cbz	r5, 800487e <_printf_i+0x19e>
 8004876:	2310      	movs	r3, #16
 8004878:	e7ac      	b.n	80047d4 <_printf_i+0xf4>
 800487a:	4827      	ldr	r0, [pc, #156]	@ (8004918 <_printf_i+0x238>)
 800487c:	e7e9      	b.n	8004852 <_printf_i+0x172>
 800487e:	6823      	ldr	r3, [r4, #0]
 8004880:	f023 0320 	bic.w	r3, r3, #32
 8004884:	6023      	str	r3, [r4, #0]
 8004886:	e7f6      	b.n	8004876 <_printf_i+0x196>
 8004888:	4616      	mov	r6, r2
 800488a:	e7bd      	b.n	8004808 <_printf_i+0x128>
 800488c:	6833      	ldr	r3, [r6, #0]
 800488e:	6825      	ldr	r5, [r4, #0]
 8004890:	6961      	ldr	r1, [r4, #20]
 8004892:	1d18      	adds	r0, r3, #4
 8004894:	6030      	str	r0, [r6, #0]
 8004896:	062e      	lsls	r6, r5, #24
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	d501      	bpl.n	80048a0 <_printf_i+0x1c0>
 800489c:	6019      	str	r1, [r3, #0]
 800489e:	e002      	b.n	80048a6 <_printf_i+0x1c6>
 80048a0:	0668      	lsls	r0, r5, #25
 80048a2:	d5fb      	bpl.n	800489c <_printf_i+0x1bc>
 80048a4:	8019      	strh	r1, [r3, #0]
 80048a6:	2300      	movs	r3, #0
 80048a8:	6123      	str	r3, [r4, #16]
 80048aa:	4616      	mov	r6, r2
 80048ac:	e7bc      	b.n	8004828 <_printf_i+0x148>
 80048ae:	6833      	ldr	r3, [r6, #0]
 80048b0:	1d1a      	adds	r2, r3, #4
 80048b2:	6032      	str	r2, [r6, #0]
 80048b4:	681e      	ldr	r6, [r3, #0]
 80048b6:	6862      	ldr	r2, [r4, #4]
 80048b8:	2100      	movs	r1, #0
 80048ba:	4630      	mov	r0, r6
 80048bc:	f7fb fc90 	bl	80001e0 <memchr>
 80048c0:	b108      	cbz	r0, 80048c6 <_printf_i+0x1e6>
 80048c2:	1b80      	subs	r0, r0, r6
 80048c4:	6060      	str	r0, [r4, #4]
 80048c6:	6863      	ldr	r3, [r4, #4]
 80048c8:	6123      	str	r3, [r4, #16]
 80048ca:	2300      	movs	r3, #0
 80048cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048d0:	e7aa      	b.n	8004828 <_printf_i+0x148>
 80048d2:	6923      	ldr	r3, [r4, #16]
 80048d4:	4632      	mov	r2, r6
 80048d6:	4649      	mov	r1, r9
 80048d8:	4640      	mov	r0, r8
 80048da:	47d0      	blx	sl
 80048dc:	3001      	adds	r0, #1
 80048de:	d0ad      	beq.n	800483c <_printf_i+0x15c>
 80048e0:	6823      	ldr	r3, [r4, #0]
 80048e2:	079b      	lsls	r3, r3, #30
 80048e4:	d413      	bmi.n	800490e <_printf_i+0x22e>
 80048e6:	68e0      	ldr	r0, [r4, #12]
 80048e8:	9b03      	ldr	r3, [sp, #12]
 80048ea:	4298      	cmp	r0, r3
 80048ec:	bfb8      	it	lt
 80048ee:	4618      	movlt	r0, r3
 80048f0:	e7a6      	b.n	8004840 <_printf_i+0x160>
 80048f2:	2301      	movs	r3, #1
 80048f4:	4632      	mov	r2, r6
 80048f6:	4649      	mov	r1, r9
 80048f8:	4640      	mov	r0, r8
 80048fa:	47d0      	blx	sl
 80048fc:	3001      	adds	r0, #1
 80048fe:	d09d      	beq.n	800483c <_printf_i+0x15c>
 8004900:	3501      	adds	r5, #1
 8004902:	68e3      	ldr	r3, [r4, #12]
 8004904:	9903      	ldr	r1, [sp, #12]
 8004906:	1a5b      	subs	r3, r3, r1
 8004908:	42ab      	cmp	r3, r5
 800490a:	dcf2      	bgt.n	80048f2 <_printf_i+0x212>
 800490c:	e7eb      	b.n	80048e6 <_printf_i+0x206>
 800490e:	2500      	movs	r5, #0
 8004910:	f104 0619 	add.w	r6, r4, #25
 8004914:	e7f5      	b.n	8004902 <_printf_i+0x222>
 8004916:	bf00      	nop
 8004918:	08004d51 	.word	0x08004d51
 800491c:	08004d62 	.word	0x08004d62

08004920 <__sflush_r>:
 8004920:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004928:	0716      	lsls	r6, r2, #28
 800492a:	4605      	mov	r5, r0
 800492c:	460c      	mov	r4, r1
 800492e:	d454      	bmi.n	80049da <__sflush_r+0xba>
 8004930:	684b      	ldr	r3, [r1, #4]
 8004932:	2b00      	cmp	r3, #0
 8004934:	dc02      	bgt.n	800493c <__sflush_r+0x1c>
 8004936:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004938:	2b00      	cmp	r3, #0
 800493a:	dd48      	ble.n	80049ce <__sflush_r+0xae>
 800493c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800493e:	2e00      	cmp	r6, #0
 8004940:	d045      	beq.n	80049ce <__sflush_r+0xae>
 8004942:	2300      	movs	r3, #0
 8004944:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004948:	682f      	ldr	r7, [r5, #0]
 800494a:	6a21      	ldr	r1, [r4, #32]
 800494c:	602b      	str	r3, [r5, #0]
 800494e:	d030      	beq.n	80049b2 <__sflush_r+0x92>
 8004950:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004952:	89a3      	ldrh	r3, [r4, #12]
 8004954:	0759      	lsls	r1, r3, #29
 8004956:	d505      	bpl.n	8004964 <__sflush_r+0x44>
 8004958:	6863      	ldr	r3, [r4, #4]
 800495a:	1ad2      	subs	r2, r2, r3
 800495c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800495e:	b10b      	cbz	r3, 8004964 <__sflush_r+0x44>
 8004960:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004962:	1ad2      	subs	r2, r2, r3
 8004964:	2300      	movs	r3, #0
 8004966:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004968:	6a21      	ldr	r1, [r4, #32]
 800496a:	4628      	mov	r0, r5
 800496c:	47b0      	blx	r6
 800496e:	1c43      	adds	r3, r0, #1
 8004970:	89a3      	ldrh	r3, [r4, #12]
 8004972:	d106      	bne.n	8004982 <__sflush_r+0x62>
 8004974:	6829      	ldr	r1, [r5, #0]
 8004976:	291d      	cmp	r1, #29
 8004978:	d82b      	bhi.n	80049d2 <__sflush_r+0xb2>
 800497a:	4a2a      	ldr	r2, [pc, #168]	@ (8004a24 <__sflush_r+0x104>)
 800497c:	410a      	asrs	r2, r1
 800497e:	07d6      	lsls	r6, r2, #31
 8004980:	d427      	bmi.n	80049d2 <__sflush_r+0xb2>
 8004982:	2200      	movs	r2, #0
 8004984:	6062      	str	r2, [r4, #4]
 8004986:	04d9      	lsls	r1, r3, #19
 8004988:	6922      	ldr	r2, [r4, #16]
 800498a:	6022      	str	r2, [r4, #0]
 800498c:	d504      	bpl.n	8004998 <__sflush_r+0x78>
 800498e:	1c42      	adds	r2, r0, #1
 8004990:	d101      	bne.n	8004996 <__sflush_r+0x76>
 8004992:	682b      	ldr	r3, [r5, #0]
 8004994:	b903      	cbnz	r3, 8004998 <__sflush_r+0x78>
 8004996:	6560      	str	r0, [r4, #84]	@ 0x54
 8004998:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800499a:	602f      	str	r7, [r5, #0]
 800499c:	b1b9      	cbz	r1, 80049ce <__sflush_r+0xae>
 800499e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80049a2:	4299      	cmp	r1, r3
 80049a4:	d002      	beq.n	80049ac <__sflush_r+0x8c>
 80049a6:	4628      	mov	r0, r5
 80049a8:	f7ff fbf2 	bl	8004190 <_free_r>
 80049ac:	2300      	movs	r3, #0
 80049ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80049b0:	e00d      	b.n	80049ce <__sflush_r+0xae>
 80049b2:	2301      	movs	r3, #1
 80049b4:	4628      	mov	r0, r5
 80049b6:	47b0      	blx	r6
 80049b8:	4602      	mov	r2, r0
 80049ba:	1c50      	adds	r0, r2, #1
 80049bc:	d1c9      	bne.n	8004952 <__sflush_r+0x32>
 80049be:	682b      	ldr	r3, [r5, #0]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d0c6      	beq.n	8004952 <__sflush_r+0x32>
 80049c4:	2b1d      	cmp	r3, #29
 80049c6:	d001      	beq.n	80049cc <__sflush_r+0xac>
 80049c8:	2b16      	cmp	r3, #22
 80049ca:	d11e      	bne.n	8004a0a <__sflush_r+0xea>
 80049cc:	602f      	str	r7, [r5, #0]
 80049ce:	2000      	movs	r0, #0
 80049d0:	e022      	b.n	8004a18 <__sflush_r+0xf8>
 80049d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049d6:	b21b      	sxth	r3, r3
 80049d8:	e01b      	b.n	8004a12 <__sflush_r+0xf2>
 80049da:	690f      	ldr	r7, [r1, #16]
 80049dc:	2f00      	cmp	r7, #0
 80049de:	d0f6      	beq.n	80049ce <__sflush_r+0xae>
 80049e0:	0793      	lsls	r3, r2, #30
 80049e2:	680e      	ldr	r6, [r1, #0]
 80049e4:	bf08      	it	eq
 80049e6:	694b      	ldreq	r3, [r1, #20]
 80049e8:	600f      	str	r7, [r1, #0]
 80049ea:	bf18      	it	ne
 80049ec:	2300      	movne	r3, #0
 80049ee:	eba6 0807 	sub.w	r8, r6, r7
 80049f2:	608b      	str	r3, [r1, #8]
 80049f4:	f1b8 0f00 	cmp.w	r8, #0
 80049f8:	dde9      	ble.n	80049ce <__sflush_r+0xae>
 80049fa:	6a21      	ldr	r1, [r4, #32]
 80049fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80049fe:	4643      	mov	r3, r8
 8004a00:	463a      	mov	r2, r7
 8004a02:	4628      	mov	r0, r5
 8004a04:	47b0      	blx	r6
 8004a06:	2800      	cmp	r0, #0
 8004a08:	dc08      	bgt.n	8004a1c <__sflush_r+0xfc>
 8004a0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a12:	81a3      	strh	r3, [r4, #12]
 8004a14:	f04f 30ff 	mov.w	r0, #4294967295
 8004a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a1c:	4407      	add	r7, r0
 8004a1e:	eba8 0800 	sub.w	r8, r8, r0
 8004a22:	e7e7      	b.n	80049f4 <__sflush_r+0xd4>
 8004a24:	dfbffffe 	.word	0xdfbffffe

08004a28 <_fflush_r>:
 8004a28:	b538      	push	{r3, r4, r5, lr}
 8004a2a:	690b      	ldr	r3, [r1, #16]
 8004a2c:	4605      	mov	r5, r0
 8004a2e:	460c      	mov	r4, r1
 8004a30:	b913      	cbnz	r3, 8004a38 <_fflush_r+0x10>
 8004a32:	2500      	movs	r5, #0
 8004a34:	4628      	mov	r0, r5
 8004a36:	bd38      	pop	{r3, r4, r5, pc}
 8004a38:	b118      	cbz	r0, 8004a42 <_fflush_r+0x1a>
 8004a3a:	6a03      	ldr	r3, [r0, #32]
 8004a3c:	b90b      	cbnz	r3, 8004a42 <_fflush_r+0x1a>
 8004a3e:	f7ff fa9f 	bl	8003f80 <__sinit>
 8004a42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d0f3      	beq.n	8004a32 <_fflush_r+0xa>
 8004a4a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004a4c:	07d0      	lsls	r0, r2, #31
 8004a4e:	d404      	bmi.n	8004a5a <_fflush_r+0x32>
 8004a50:	0599      	lsls	r1, r3, #22
 8004a52:	d402      	bmi.n	8004a5a <_fflush_r+0x32>
 8004a54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a56:	f7ff fb98 	bl	800418a <__retarget_lock_acquire_recursive>
 8004a5a:	4628      	mov	r0, r5
 8004a5c:	4621      	mov	r1, r4
 8004a5e:	f7ff ff5f 	bl	8004920 <__sflush_r>
 8004a62:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a64:	07da      	lsls	r2, r3, #31
 8004a66:	4605      	mov	r5, r0
 8004a68:	d4e4      	bmi.n	8004a34 <_fflush_r+0xc>
 8004a6a:	89a3      	ldrh	r3, [r4, #12]
 8004a6c:	059b      	lsls	r3, r3, #22
 8004a6e:	d4e1      	bmi.n	8004a34 <_fflush_r+0xc>
 8004a70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a72:	f7ff fb8b 	bl	800418c <__retarget_lock_release_recursive>
 8004a76:	e7dd      	b.n	8004a34 <_fflush_r+0xc>

08004a78 <__swbuf_r>:
 8004a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a7a:	460e      	mov	r6, r1
 8004a7c:	4614      	mov	r4, r2
 8004a7e:	4605      	mov	r5, r0
 8004a80:	b118      	cbz	r0, 8004a8a <__swbuf_r+0x12>
 8004a82:	6a03      	ldr	r3, [r0, #32]
 8004a84:	b90b      	cbnz	r3, 8004a8a <__swbuf_r+0x12>
 8004a86:	f7ff fa7b 	bl	8003f80 <__sinit>
 8004a8a:	69a3      	ldr	r3, [r4, #24]
 8004a8c:	60a3      	str	r3, [r4, #8]
 8004a8e:	89a3      	ldrh	r3, [r4, #12]
 8004a90:	071a      	lsls	r2, r3, #28
 8004a92:	d501      	bpl.n	8004a98 <__swbuf_r+0x20>
 8004a94:	6923      	ldr	r3, [r4, #16]
 8004a96:	b943      	cbnz	r3, 8004aaa <__swbuf_r+0x32>
 8004a98:	4621      	mov	r1, r4
 8004a9a:	4628      	mov	r0, r5
 8004a9c:	f000 f82a 	bl	8004af4 <__swsetup_r>
 8004aa0:	b118      	cbz	r0, 8004aaa <__swbuf_r+0x32>
 8004aa2:	f04f 37ff 	mov.w	r7, #4294967295
 8004aa6:	4638      	mov	r0, r7
 8004aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004aaa:	6823      	ldr	r3, [r4, #0]
 8004aac:	6922      	ldr	r2, [r4, #16]
 8004aae:	1a98      	subs	r0, r3, r2
 8004ab0:	6963      	ldr	r3, [r4, #20]
 8004ab2:	b2f6      	uxtb	r6, r6
 8004ab4:	4283      	cmp	r3, r0
 8004ab6:	4637      	mov	r7, r6
 8004ab8:	dc05      	bgt.n	8004ac6 <__swbuf_r+0x4e>
 8004aba:	4621      	mov	r1, r4
 8004abc:	4628      	mov	r0, r5
 8004abe:	f7ff ffb3 	bl	8004a28 <_fflush_r>
 8004ac2:	2800      	cmp	r0, #0
 8004ac4:	d1ed      	bne.n	8004aa2 <__swbuf_r+0x2a>
 8004ac6:	68a3      	ldr	r3, [r4, #8]
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	60a3      	str	r3, [r4, #8]
 8004acc:	6823      	ldr	r3, [r4, #0]
 8004ace:	1c5a      	adds	r2, r3, #1
 8004ad0:	6022      	str	r2, [r4, #0]
 8004ad2:	701e      	strb	r6, [r3, #0]
 8004ad4:	6962      	ldr	r2, [r4, #20]
 8004ad6:	1c43      	adds	r3, r0, #1
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d004      	beq.n	8004ae6 <__swbuf_r+0x6e>
 8004adc:	89a3      	ldrh	r3, [r4, #12]
 8004ade:	07db      	lsls	r3, r3, #31
 8004ae0:	d5e1      	bpl.n	8004aa6 <__swbuf_r+0x2e>
 8004ae2:	2e0a      	cmp	r6, #10
 8004ae4:	d1df      	bne.n	8004aa6 <__swbuf_r+0x2e>
 8004ae6:	4621      	mov	r1, r4
 8004ae8:	4628      	mov	r0, r5
 8004aea:	f7ff ff9d 	bl	8004a28 <_fflush_r>
 8004aee:	2800      	cmp	r0, #0
 8004af0:	d0d9      	beq.n	8004aa6 <__swbuf_r+0x2e>
 8004af2:	e7d6      	b.n	8004aa2 <__swbuf_r+0x2a>

08004af4 <__swsetup_r>:
 8004af4:	b538      	push	{r3, r4, r5, lr}
 8004af6:	4b29      	ldr	r3, [pc, #164]	@ (8004b9c <__swsetup_r+0xa8>)
 8004af8:	4605      	mov	r5, r0
 8004afa:	6818      	ldr	r0, [r3, #0]
 8004afc:	460c      	mov	r4, r1
 8004afe:	b118      	cbz	r0, 8004b08 <__swsetup_r+0x14>
 8004b00:	6a03      	ldr	r3, [r0, #32]
 8004b02:	b90b      	cbnz	r3, 8004b08 <__swsetup_r+0x14>
 8004b04:	f7ff fa3c 	bl	8003f80 <__sinit>
 8004b08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b0c:	0719      	lsls	r1, r3, #28
 8004b0e:	d422      	bmi.n	8004b56 <__swsetup_r+0x62>
 8004b10:	06da      	lsls	r2, r3, #27
 8004b12:	d407      	bmi.n	8004b24 <__swsetup_r+0x30>
 8004b14:	2209      	movs	r2, #9
 8004b16:	602a      	str	r2, [r5, #0]
 8004b18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b1c:	81a3      	strh	r3, [r4, #12]
 8004b1e:	f04f 30ff 	mov.w	r0, #4294967295
 8004b22:	e033      	b.n	8004b8c <__swsetup_r+0x98>
 8004b24:	0758      	lsls	r0, r3, #29
 8004b26:	d512      	bpl.n	8004b4e <__swsetup_r+0x5a>
 8004b28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004b2a:	b141      	cbz	r1, 8004b3e <__swsetup_r+0x4a>
 8004b2c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004b30:	4299      	cmp	r1, r3
 8004b32:	d002      	beq.n	8004b3a <__swsetup_r+0x46>
 8004b34:	4628      	mov	r0, r5
 8004b36:	f7ff fb2b 	bl	8004190 <_free_r>
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	6363      	str	r3, [r4, #52]	@ 0x34
 8004b3e:	89a3      	ldrh	r3, [r4, #12]
 8004b40:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004b44:	81a3      	strh	r3, [r4, #12]
 8004b46:	2300      	movs	r3, #0
 8004b48:	6063      	str	r3, [r4, #4]
 8004b4a:	6923      	ldr	r3, [r4, #16]
 8004b4c:	6023      	str	r3, [r4, #0]
 8004b4e:	89a3      	ldrh	r3, [r4, #12]
 8004b50:	f043 0308 	orr.w	r3, r3, #8
 8004b54:	81a3      	strh	r3, [r4, #12]
 8004b56:	6923      	ldr	r3, [r4, #16]
 8004b58:	b94b      	cbnz	r3, 8004b6e <__swsetup_r+0x7a>
 8004b5a:	89a3      	ldrh	r3, [r4, #12]
 8004b5c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004b60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b64:	d003      	beq.n	8004b6e <__swsetup_r+0x7a>
 8004b66:	4621      	mov	r1, r4
 8004b68:	4628      	mov	r0, r5
 8004b6a:	f000 f84f 	bl	8004c0c <__smakebuf_r>
 8004b6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b72:	f013 0201 	ands.w	r2, r3, #1
 8004b76:	d00a      	beq.n	8004b8e <__swsetup_r+0x9a>
 8004b78:	2200      	movs	r2, #0
 8004b7a:	60a2      	str	r2, [r4, #8]
 8004b7c:	6962      	ldr	r2, [r4, #20]
 8004b7e:	4252      	negs	r2, r2
 8004b80:	61a2      	str	r2, [r4, #24]
 8004b82:	6922      	ldr	r2, [r4, #16]
 8004b84:	b942      	cbnz	r2, 8004b98 <__swsetup_r+0xa4>
 8004b86:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004b8a:	d1c5      	bne.n	8004b18 <__swsetup_r+0x24>
 8004b8c:	bd38      	pop	{r3, r4, r5, pc}
 8004b8e:	0799      	lsls	r1, r3, #30
 8004b90:	bf58      	it	pl
 8004b92:	6962      	ldrpl	r2, [r4, #20]
 8004b94:	60a2      	str	r2, [r4, #8]
 8004b96:	e7f4      	b.n	8004b82 <__swsetup_r+0x8e>
 8004b98:	2000      	movs	r0, #0
 8004b9a:	e7f7      	b.n	8004b8c <__swsetup_r+0x98>
 8004b9c:	20000038 	.word	0x20000038

08004ba0 <_sbrk_r>:
 8004ba0:	b538      	push	{r3, r4, r5, lr}
 8004ba2:	4d06      	ldr	r5, [pc, #24]	@ (8004bbc <_sbrk_r+0x1c>)
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	4604      	mov	r4, r0
 8004ba8:	4608      	mov	r0, r1
 8004baa:	602b      	str	r3, [r5, #0]
 8004bac:	f7fb ffaa 	bl	8000b04 <_sbrk>
 8004bb0:	1c43      	adds	r3, r0, #1
 8004bb2:	d102      	bne.n	8004bba <_sbrk_r+0x1a>
 8004bb4:	682b      	ldr	r3, [r5, #0]
 8004bb6:	b103      	cbz	r3, 8004bba <_sbrk_r+0x1a>
 8004bb8:	6023      	str	r3, [r4, #0]
 8004bba:	bd38      	pop	{r3, r4, r5, pc}
 8004bbc:	2000027c 	.word	0x2000027c

08004bc0 <__swhatbuf_r>:
 8004bc0:	b570      	push	{r4, r5, r6, lr}
 8004bc2:	460c      	mov	r4, r1
 8004bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bc8:	2900      	cmp	r1, #0
 8004bca:	b096      	sub	sp, #88	@ 0x58
 8004bcc:	4615      	mov	r5, r2
 8004bce:	461e      	mov	r6, r3
 8004bd0:	da0d      	bge.n	8004bee <__swhatbuf_r+0x2e>
 8004bd2:	89a3      	ldrh	r3, [r4, #12]
 8004bd4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004bd8:	f04f 0100 	mov.w	r1, #0
 8004bdc:	bf14      	ite	ne
 8004bde:	2340      	movne	r3, #64	@ 0x40
 8004be0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004be4:	2000      	movs	r0, #0
 8004be6:	6031      	str	r1, [r6, #0]
 8004be8:	602b      	str	r3, [r5, #0]
 8004bea:	b016      	add	sp, #88	@ 0x58
 8004bec:	bd70      	pop	{r4, r5, r6, pc}
 8004bee:	466a      	mov	r2, sp
 8004bf0:	f000 f848 	bl	8004c84 <_fstat_r>
 8004bf4:	2800      	cmp	r0, #0
 8004bf6:	dbec      	blt.n	8004bd2 <__swhatbuf_r+0x12>
 8004bf8:	9901      	ldr	r1, [sp, #4]
 8004bfa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004bfe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004c02:	4259      	negs	r1, r3
 8004c04:	4159      	adcs	r1, r3
 8004c06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c0a:	e7eb      	b.n	8004be4 <__swhatbuf_r+0x24>

08004c0c <__smakebuf_r>:
 8004c0c:	898b      	ldrh	r3, [r1, #12]
 8004c0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c10:	079d      	lsls	r5, r3, #30
 8004c12:	4606      	mov	r6, r0
 8004c14:	460c      	mov	r4, r1
 8004c16:	d507      	bpl.n	8004c28 <__smakebuf_r+0x1c>
 8004c18:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004c1c:	6023      	str	r3, [r4, #0]
 8004c1e:	6123      	str	r3, [r4, #16]
 8004c20:	2301      	movs	r3, #1
 8004c22:	6163      	str	r3, [r4, #20]
 8004c24:	b003      	add	sp, #12
 8004c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c28:	ab01      	add	r3, sp, #4
 8004c2a:	466a      	mov	r2, sp
 8004c2c:	f7ff ffc8 	bl	8004bc0 <__swhatbuf_r>
 8004c30:	9f00      	ldr	r7, [sp, #0]
 8004c32:	4605      	mov	r5, r0
 8004c34:	4639      	mov	r1, r7
 8004c36:	4630      	mov	r0, r6
 8004c38:	f7ff fb16 	bl	8004268 <_malloc_r>
 8004c3c:	b948      	cbnz	r0, 8004c52 <__smakebuf_r+0x46>
 8004c3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c42:	059a      	lsls	r2, r3, #22
 8004c44:	d4ee      	bmi.n	8004c24 <__smakebuf_r+0x18>
 8004c46:	f023 0303 	bic.w	r3, r3, #3
 8004c4a:	f043 0302 	orr.w	r3, r3, #2
 8004c4e:	81a3      	strh	r3, [r4, #12]
 8004c50:	e7e2      	b.n	8004c18 <__smakebuf_r+0xc>
 8004c52:	89a3      	ldrh	r3, [r4, #12]
 8004c54:	6020      	str	r0, [r4, #0]
 8004c56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c5a:	81a3      	strh	r3, [r4, #12]
 8004c5c:	9b01      	ldr	r3, [sp, #4]
 8004c5e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004c62:	b15b      	cbz	r3, 8004c7c <__smakebuf_r+0x70>
 8004c64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c68:	4630      	mov	r0, r6
 8004c6a:	f000 f81d 	bl	8004ca8 <_isatty_r>
 8004c6e:	b128      	cbz	r0, 8004c7c <__smakebuf_r+0x70>
 8004c70:	89a3      	ldrh	r3, [r4, #12]
 8004c72:	f023 0303 	bic.w	r3, r3, #3
 8004c76:	f043 0301 	orr.w	r3, r3, #1
 8004c7a:	81a3      	strh	r3, [r4, #12]
 8004c7c:	89a3      	ldrh	r3, [r4, #12]
 8004c7e:	431d      	orrs	r5, r3
 8004c80:	81a5      	strh	r5, [r4, #12]
 8004c82:	e7cf      	b.n	8004c24 <__smakebuf_r+0x18>

08004c84 <_fstat_r>:
 8004c84:	b538      	push	{r3, r4, r5, lr}
 8004c86:	4d07      	ldr	r5, [pc, #28]	@ (8004ca4 <_fstat_r+0x20>)
 8004c88:	2300      	movs	r3, #0
 8004c8a:	4604      	mov	r4, r0
 8004c8c:	4608      	mov	r0, r1
 8004c8e:	4611      	mov	r1, r2
 8004c90:	602b      	str	r3, [r5, #0]
 8004c92:	f7fb ff0e 	bl	8000ab2 <_fstat>
 8004c96:	1c43      	adds	r3, r0, #1
 8004c98:	d102      	bne.n	8004ca0 <_fstat_r+0x1c>
 8004c9a:	682b      	ldr	r3, [r5, #0]
 8004c9c:	b103      	cbz	r3, 8004ca0 <_fstat_r+0x1c>
 8004c9e:	6023      	str	r3, [r4, #0]
 8004ca0:	bd38      	pop	{r3, r4, r5, pc}
 8004ca2:	bf00      	nop
 8004ca4:	2000027c 	.word	0x2000027c

08004ca8 <_isatty_r>:
 8004ca8:	b538      	push	{r3, r4, r5, lr}
 8004caa:	4d06      	ldr	r5, [pc, #24]	@ (8004cc4 <_isatty_r+0x1c>)
 8004cac:	2300      	movs	r3, #0
 8004cae:	4604      	mov	r4, r0
 8004cb0:	4608      	mov	r0, r1
 8004cb2:	602b      	str	r3, [r5, #0]
 8004cb4:	f7fb ff0d 	bl	8000ad2 <_isatty>
 8004cb8:	1c43      	adds	r3, r0, #1
 8004cba:	d102      	bne.n	8004cc2 <_isatty_r+0x1a>
 8004cbc:	682b      	ldr	r3, [r5, #0]
 8004cbe:	b103      	cbz	r3, 8004cc2 <_isatty_r+0x1a>
 8004cc0:	6023      	str	r3, [r4, #0]
 8004cc2:	bd38      	pop	{r3, r4, r5, pc}
 8004cc4:	2000027c 	.word	0x2000027c

08004cc8 <_init>:
 8004cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cca:	bf00      	nop
 8004ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cce:	bc08      	pop	{r3}
 8004cd0:	469e      	mov	lr, r3
 8004cd2:	4770      	bx	lr

08004cd4 <_fini>:
 8004cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cd6:	bf00      	nop
 8004cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cda:	bc08      	pop	{r3}
 8004cdc:	469e      	mov	lr, r3
 8004cde:	4770      	bx	lr
