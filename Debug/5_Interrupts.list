
5_Interrupts.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005198  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08005328  08005328  00006328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053c4  080053c4  00007088  2**0
                  CONTENTS
  4 .ARM          00000008  080053c4  080053c4  000063c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053cc  080053cc  00007088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053cc  080053cc  000063cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080053d0  080053d0  000063d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  080053d4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  20000088  0800545c  00007088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002e4  0800545c  000072e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d397  00000000  00000000  000070b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021ad  00000000  00000000  0001444f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b38  00000000  00000000  00016600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000884  00000000  00000000  00017138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026ba1  00000000  00000000  000179bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d9ba  00000000  00000000  0003e55d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e99ec  00000000  00000000  0004bf17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00135903  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003410  00000000  00000000  00135948  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00138d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005310 	.word	0x08005310

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08005310 	.word	0x08005310

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]

	if (ch == '\n') {
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2b0a      	cmp	r3, #10
 800059c:	d102      	bne.n	80005a4 <__io_putchar+0x14>
		__io_putchar('\r');
 800059e:	200d      	movs	r0, #13
 80005a0:	f7ff fff6 	bl	8000590 <__io_putchar>
	}

	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80005a4:	1d39      	adds	r1, r7, #4
 80005a6:	f04f 33ff 	mov.w	r3, #4294967295
 80005aa:	2201      	movs	r2, #1
 80005ac:	4803      	ldr	r0, [pc, #12]	@ (80005bc <__io_putchar+0x2c>)
 80005ae:	f002 faf5 	bl	8002b9c <HAL_UART_Transmit>

	return 1;
 80005b2:	2301      	movs	r3, #1
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	200000a4 	.word	0x200000a4

080005c0 <HAL_GPIO_EXTI_Callback>:
//stała, której wartość wynosi zero. Taki program nie działałby poprawnie. Użycie volatile sprawia
//, że optymalizator nie próbuje swoich sztuczek w odniesieniu do tej zmiennej.
volatile uint32_t push_counter;

//Obsługa przerwania od pinów (w naszym przypadku przycisk b1):
HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == USER_BUTTON_Pin) {
 80005ca:	88fb      	ldrh	r3, [r7, #6]
 80005cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80005d0:	d104      	bne.n	80005dc <HAL_GPIO_EXTI_Callback+0x1c>
		push_counter++;
 80005d2:	4b05      	ldr	r3, [pc, #20]	@ (80005e8 <HAL_GPIO_EXTI_Callback+0x28>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	3301      	adds	r3, #1
 80005d8:	4a03      	ldr	r2, [pc, #12]	@ (80005e8 <HAL_GPIO_EXTI_Callback+0x28>)
 80005da:	6013      	str	r3, [r2, #0]
	}

}
 80005dc:	bf00      	nop
 80005de:	370c      	adds	r7, #12
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr
 80005e8:	2000012c 	.word	0x2000012c

080005ec <send_text_message>:

sender_state message_number = MESSAGE_1;

void send_text_message(void) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0

	static char message[] = "Hello world!\r\n";
	static char message2[] = "Wiadomosc 2!\r\n";

	switch(message_number) {
 80005f0:	4b12      	ldr	r3, [pc, #72]	@ (800063c <send_text_message+0x50>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d002      	beq.n	80005fe <send_text_message+0x12>
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	d00e      	beq.n	800061a <send_text_message+0x2e>
	case MESSAGE_2:
		HAL_UART_Transmit_IT(&huart2, (uint8_t*)message2, strlen(message2));
		message_number = 2;
		break;
	default:
		break;
 80005fc:	e01b      	b.n	8000636 <send_text_message+0x4a>
		HAL_UART_Transmit_IT(&huart2, (uint8_t*)message, strlen(message));
 80005fe:	4810      	ldr	r0, [pc, #64]	@ (8000640 <send_text_message+0x54>)
 8000600:	f7ff fdf0 	bl	80001e4 <strlen>
 8000604:	4603      	mov	r3, r0
 8000606:	b29b      	uxth	r3, r3
 8000608:	461a      	mov	r2, r3
 800060a:	490d      	ldr	r1, [pc, #52]	@ (8000640 <send_text_message+0x54>)
 800060c:	480d      	ldr	r0, [pc, #52]	@ (8000644 <send_text_message+0x58>)
 800060e:	f002 fb4f 	bl	8002cb0 <HAL_UART_Transmit_IT>
		message_number = 1;
 8000612:	4b0a      	ldr	r3, [pc, #40]	@ (800063c <send_text_message+0x50>)
 8000614:	2201      	movs	r2, #1
 8000616:	701a      	strb	r2, [r3, #0]
		break;
 8000618:	e00d      	b.n	8000636 <send_text_message+0x4a>
		HAL_UART_Transmit_IT(&huart2, (uint8_t*)message2, strlen(message2));
 800061a:	480b      	ldr	r0, [pc, #44]	@ (8000648 <send_text_message+0x5c>)
 800061c:	f7ff fde2 	bl	80001e4 <strlen>
 8000620:	4603      	mov	r3, r0
 8000622:	b29b      	uxth	r3, r3
 8000624:	461a      	mov	r2, r3
 8000626:	4908      	ldr	r1, [pc, #32]	@ (8000648 <send_text_message+0x5c>)
 8000628:	4806      	ldr	r0, [pc, #24]	@ (8000644 <send_text_message+0x58>)
 800062a:	f002 fb41 	bl	8002cb0 <HAL_UART_Transmit_IT>
		message_number = 2;
 800062e:	4b03      	ldr	r3, [pc, #12]	@ (800063c <send_text_message+0x50>)
 8000630:	2202      	movs	r2, #2
 8000632:	701a      	strb	r2, [r3, #0]
		break;
 8000634:	bf00      	nop
	}
}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20000130 	.word	0x20000130
 8000640:	20000000 	.word	0x20000000
 8000644:	200000a4 	.word	0x200000a4
 8000648:	20000010 	.word	0x20000010

0800064c <HAL_UART_TxCpltCallback>:

//Funkcja wywolywana po wyslaniu danych przez UART:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]

	if(huart == &huart2) {
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	4a04      	ldr	r2, [pc, #16]	@ (8000668 <HAL_UART_TxCpltCallback+0x1c>)
 8000658:	4293      	cmp	r3, r2
 800065a:	d101      	bne.n	8000660 <HAL_UART_TxCpltCallback+0x14>
		send_text_message();
 800065c:	f7ff ffc6 	bl	80005ec <send_text_message>
	}

}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	200000a4 	.word	0x200000a4

0800066c <line_append>:

static char line_buffer[LINE_MAX_LENGTH + 1];
static uint32_t line_length;

void line_append(uint8_t value)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	71fb      	strb	r3, [r7, #7]
  if (value == '\r' || value == '\n') {
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	2b0d      	cmp	r3, #13
 800067a:	d002      	beq.n	8000682 <line_append+0x16>
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	2b0a      	cmp	r3, #10
 8000680:	d127      	bne.n	80006d2 <line_append+0x66>
    // odebraliśmy znak końca linii
    if (line_length > 0) {
 8000682:	4b1e      	ldr	r3, [pc, #120]	@ (80006fc <line_append+0x90>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d033      	beq.n	80006f2 <line_append+0x86>
      // dodajemy 0 na końcu linii
      line_buffer[line_length] = '\0';
 800068a:	4b1c      	ldr	r3, [pc, #112]	@ (80006fc <line_append+0x90>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a1c      	ldr	r2, [pc, #112]	@ (8000700 <line_append+0x94>)
 8000690:	2100      	movs	r1, #0
 8000692:	54d1      	strb	r1, [r2, r3]
      // przetwarzamy dane
      if (strcmp(line_buffer, "on") == 0) {
 8000694:	491b      	ldr	r1, [pc, #108]	@ (8000704 <line_append+0x98>)
 8000696:	481a      	ldr	r0, [pc, #104]	@ (8000700 <line_append+0x94>)
 8000698:	f7ff fd9a 	bl	80001d0 <strcmp>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d106      	bne.n	80006b0 <line_append+0x44>
        HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80006a2:	2201      	movs	r2, #1
 80006a4:	2120      	movs	r1, #32
 80006a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006aa:	f000 feb9 	bl	8001420 <HAL_GPIO_WritePin>
 80006ae:	e00c      	b.n	80006ca <line_append+0x5e>
      } else if (strcmp(line_buffer, "off") == 0) {
 80006b0:	4915      	ldr	r1, [pc, #84]	@ (8000708 <line_append+0x9c>)
 80006b2:	4813      	ldr	r0, [pc, #76]	@ (8000700 <line_append+0x94>)
 80006b4:	f7ff fd8c 	bl	80001d0 <strcmp>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d105      	bne.n	80006ca <line_append+0x5e>
        HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	2120      	movs	r1, #32
 80006c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006c6:	f000 feab 	bl	8001420 <HAL_GPIO_WritePin>
      }

      // zaczynamy zbieranie danych od nowa
      line_length = 0;
 80006ca:	4b0c      	ldr	r3, [pc, #48]	@ (80006fc <line_append+0x90>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
    if (line_length > 0) {
 80006d0:	e00f      	b.n	80006f2 <line_append+0x86>
    }
  }
  else {
    if (line_length >= LINE_MAX_LENGTH) {
 80006d2:	4b0a      	ldr	r3, [pc, #40]	@ (80006fc <line_append+0x90>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	2b4f      	cmp	r3, #79	@ 0x4f
 80006d8:	d902      	bls.n	80006e0 <line_append+0x74>
      // za dużo danych, usuwamy wszystko co odebraliśmy dotychczas
      line_length = 0;
 80006da:	4b08      	ldr	r3, [pc, #32]	@ (80006fc <line_append+0x90>)
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
    }
    // dopisujemy wartość do bufora
    line_buffer[line_length++] = value;
 80006e0:	4b06      	ldr	r3, [pc, #24]	@ (80006fc <line_append+0x90>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	1c5a      	adds	r2, r3, #1
 80006e6:	4905      	ldr	r1, [pc, #20]	@ (80006fc <line_append+0x90>)
 80006e8:	600a      	str	r2, [r1, #0]
 80006ea:	4905      	ldr	r1, [pc, #20]	@ (8000700 <line_append+0x94>)
 80006ec:	79fa      	ldrb	r2, [r7, #7]
 80006ee:	54ca      	strb	r2, [r1, r3]
  }
}
 80006f0:	bf00      	nop
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20000188 	.word	0x20000188
 8000700:	20000134 	.word	0x20000134
 8000704:	08005328 	.word	0x08005328
 8000708:	0800532c 	.word	0x0800532c

0800070c <HAL_UART_RxCpltCallback>:

uint8_t uart_rx_buffer;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]

	if(huart == &huart2) {
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4a08      	ldr	r2, [pc, #32]	@ (8000738 <HAL_UART_RxCpltCallback+0x2c>)
 8000718:	4293      	cmp	r3, r2
 800071a:	d109      	bne.n	8000730 <HAL_UART_RxCpltCallback+0x24>
		line_append(uart_rx_buffer);
 800071c:	4b07      	ldr	r3, [pc, #28]	@ (800073c <HAL_UART_RxCpltCallback+0x30>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff ffa3 	bl	800066c <line_append>
		HAL_UART_Receive_IT(&huart2, &uart_rx_buffer, 1);
 8000726:	2201      	movs	r2, #1
 8000728:	4904      	ldr	r1, [pc, #16]	@ (800073c <HAL_UART_RxCpltCallback+0x30>)
 800072a:	4803      	ldr	r0, [pc, #12]	@ (8000738 <HAL_UART_RxCpltCallback+0x2c>)
 800072c:	f002 fb1e 	bl	8002d6c <HAL_UART_Receive_IT>
	}
}
 8000730:	bf00      	nop
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	200000a4 	.word	0x200000a4
 800073c:	2000018c 	.word	0x2000018c

08000740 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000746:	f000 fabc 	bl	8000cc2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800074a:	f000 f823 	bl	8000794 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800074e:	f000 f8b3 	bl	80008b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000752:	f000 f881 	bl	8000858 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //Rozpoczecie transmisji przez UART z przerwaniamiL
  send_text_message();
 8000756:	f7ff ff49 	bl	80005ec <send_text_message>

  HAL_UART_Receive_IT(&huart2, &uart_rx_buffer, 1);
 800075a:	2201      	movs	r2, #1
 800075c:	4909      	ldr	r1, [pc, #36]	@ (8000784 <main+0x44>)
 800075e:	480a      	ldr	r0, [pc, #40]	@ (8000788 <main+0x48>)
 8000760:	f002 fb04 	bl	8002d6c <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t old_push_counter = push_counter;
 8000764:	4b09      	ldr	r3, [pc, #36]	@ (800078c <main+0x4c>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	607b      	str	r3, [r7, #4]
  while (1)
  {
	  if(push_counter != old_push_counter) {
 800076a:	4b08      	ldr	r3, [pc, #32]	@ (800078c <main+0x4c>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	687a      	ldr	r2, [r7, #4]
 8000770:	429a      	cmp	r2, r3
 8000772:	d0fa      	beq.n	800076a <main+0x2a>
		  old_push_counter = push_counter;
 8000774:	4b05      	ldr	r3, [pc, #20]	@ (800078c <main+0x4c>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	607b      	str	r3, [r7, #4]
		  printf("button counter: %lu\n", old_push_counter);
 800077a:	6879      	ldr	r1, [r7, #4]
 800077c:	4804      	ldr	r0, [pc, #16]	@ (8000790 <main+0x50>)
 800077e:	f003 ff59 	bl	8004634 <iprintf>
	  if(push_counter != old_push_counter) {
 8000782:	e7f2      	b.n	800076a <main+0x2a>
 8000784:	2000018c 	.word	0x2000018c
 8000788:	200000a4 	.word	0x200000a4
 800078c:	2000012c 	.word	0x2000012c
 8000790:	08005330 	.word	0x08005330

08000794 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b096      	sub	sp, #88	@ 0x58
 8000798:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079a:	f107 0314 	add.w	r3, r7, #20
 800079e:	2244      	movs	r2, #68	@ 0x44
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f003 ff9b 	bl	80046de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a8:	463b      	mov	r3, r7
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
 80007b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007b6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80007ba:	f000 fe7f 	bl	80014bc <HAL_PWREx_ControlVoltageScaling>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007c4:	f000 f8ce 	bl	8000964 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007c8:	f000 fe5a 	bl	8001480 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80007cc:	4b21      	ldr	r3, [pc, #132]	@ (8000854 <SystemClock_Config+0xc0>)
 80007ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80007d2:	4a20      	ldr	r2, [pc, #128]	@ (8000854 <SystemClock_Config+0xc0>)
 80007d4:	f023 0318 	bic.w	r3, r3, #24
 80007d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80007dc:	2314      	movs	r3, #20
 80007de:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007e0:	2301      	movs	r3, #1
 80007e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007e4:	2301      	movs	r3, #1
 80007e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007ec:	2360      	movs	r3, #96	@ 0x60
 80007ee:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f0:	2302      	movs	r3, #2
 80007f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80007f4:	2301      	movs	r3, #1
 80007f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007f8:	2301      	movs	r3, #1
 80007fa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80007fc:	2328      	movs	r3, #40	@ 0x28
 80007fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000800:	2307      	movs	r3, #7
 8000802:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000804:	2302      	movs	r3, #2
 8000806:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000808:	2302      	movs	r3, #2
 800080a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	4618      	mov	r0, r3
 8000812:	f000 fea9 	bl	8001568 <HAL_RCC_OscConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800081c:	f000 f8a2 	bl	8000964 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000820:	230f      	movs	r3, #15
 8000822:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000824:	2303      	movs	r3, #3
 8000826:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000828:	2300      	movs	r3, #0
 800082a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000830:	2300      	movs	r3, #0
 8000832:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000834:	463b      	mov	r3, r7
 8000836:	2104      	movs	r1, #4
 8000838:	4618      	mov	r0, r3
 800083a:	f001 fa71 	bl	8001d20 <HAL_RCC_ClockConfig>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000844:	f000 f88e 	bl	8000964 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000848:	f001 ff78 	bl	800273c <HAL_RCCEx_EnableMSIPLLMode>
}
 800084c:	bf00      	nop
 800084e:	3758      	adds	r7, #88	@ 0x58
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40021000 	.word	0x40021000

08000858 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800085c:	4b14      	ldr	r3, [pc, #80]	@ (80008b0 <MX_USART2_UART_Init+0x58>)
 800085e:	4a15      	ldr	r2, [pc, #84]	@ (80008b4 <MX_USART2_UART_Init+0x5c>)
 8000860:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000862:	4b13      	ldr	r3, [pc, #76]	@ (80008b0 <MX_USART2_UART_Init+0x58>)
 8000864:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000868:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800086a:	4b11      	ldr	r3, [pc, #68]	@ (80008b0 <MX_USART2_UART_Init+0x58>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000870:	4b0f      	ldr	r3, [pc, #60]	@ (80008b0 <MX_USART2_UART_Init+0x58>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000876:	4b0e      	ldr	r3, [pc, #56]	@ (80008b0 <MX_USART2_UART_Init+0x58>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800087c:	4b0c      	ldr	r3, [pc, #48]	@ (80008b0 <MX_USART2_UART_Init+0x58>)
 800087e:	220c      	movs	r2, #12
 8000880:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000882:	4b0b      	ldr	r3, [pc, #44]	@ (80008b0 <MX_USART2_UART_Init+0x58>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000888:	4b09      	ldr	r3, [pc, #36]	@ (80008b0 <MX_USART2_UART_Init+0x58>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800088e:	4b08      	ldr	r3, [pc, #32]	@ (80008b0 <MX_USART2_UART_Init+0x58>)
 8000890:	2200      	movs	r2, #0
 8000892:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000894:	4b06      	ldr	r3, [pc, #24]	@ (80008b0 <MX_USART2_UART_Init+0x58>)
 8000896:	2200      	movs	r2, #0
 8000898:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800089a:	4805      	ldr	r0, [pc, #20]	@ (80008b0 <MX_USART2_UART_Init+0x58>)
 800089c:	f002 f930 	bl	8002b00 <HAL_UART_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008a6:	f000 f85d 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	200000a4 	.word	0x200000a4
 80008b4:	40004400 	.word	0x40004400

080008b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b088      	sub	sp, #32
 80008bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008be:	f107 030c 	add.w	r3, r7, #12
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ce:	4b23      	ldr	r3, [pc, #140]	@ (800095c <MX_GPIO_Init+0xa4>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008d2:	4a22      	ldr	r2, [pc, #136]	@ (800095c <MX_GPIO_Init+0xa4>)
 80008d4:	f043 0304 	orr.w	r3, r3, #4
 80008d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008da:	4b20      	ldr	r3, [pc, #128]	@ (800095c <MX_GPIO_Init+0xa4>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008de:	f003 0304 	and.w	r3, r3, #4
 80008e2:	60bb      	str	r3, [r7, #8]
 80008e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e6:	4b1d      	ldr	r3, [pc, #116]	@ (800095c <MX_GPIO_Init+0xa4>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ea:	4a1c      	ldr	r2, [pc, #112]	@ (800095c <MX_GPIO_Init+0xa4>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008f2:	4b1a      	ldr	r3, [pc, #104]	@ (800095c <MX_GPIO_Init+0xa4>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	2120      	movs	r1, #32
 8000902:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000906:	f000 fd8b 	bl	8001420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 800090a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800090e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000910:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000914:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800091a:	f107 030c 	add.w	r3, r7, #12
 800091e:	4619      	mov	r1, r3
 8000920:	480f      	ldr	r0, [pc, #60]	@ (8000960 <MX_GPIO_Init+0xa8>)
 8000922:	f000 fbd3 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000926:	2320      	movs	r3, #32
 8000928:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092a:	2301      	movs	r3, #1
 800092c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	2300      	movs	r3, #0
 8000934:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 030c 	add.w	r3, r7, #12
 800093a:	4619      	mov	r1, r3
 800093c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000940:	f000 fbc4 	bl	80010cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 8, 0);
 8000944:	2200      	movs	r2, #0
 8000946:	2108      	movs	r1, #8
 8000948:	2028      	movs	r0, #40	@ 0x28
 800094a:	f000 fb0a 	bl	8000f62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800094e:	2028      	movs	r0, #40	@ 0x28
 8000950:	f000 fb23 	bl	8000f9a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000954:	bf00      	nop
 8000956:	3720      	adds	r7, #32
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40021000 	.word	0x40021000
 8000960:	48000800 	.word	0x48000800

08000964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000968:	b672      	cpsid	i
}
 800096a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <Error_Handler+0x8>

08000970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000976:	4b0f      	ldr	r3, [pc, #60]	@ (80009b4 <HAL_MspInit+0x44>)
 8000978:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800097a:	4a0e      	ldr	r2, [pc, #56]	@ (80009b4 <HAL_MspInit+0x44>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	6613      	str	r3, [r2, #96]	@ 0x60
 8000982:	4b0c      	ldr	r3, [pc, #48]	@ (80009b4 <HAL_MspInit+0x44>)
 8000984:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800098e:	4b09      	ldr	r3, [pc, #36]	@ (80009b4 <HAL_MspInit+0x44>)
 8000990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000992:	4a08      	ldr	r2, [pc, #32]	@ (80009b4 <HAL_MspInit+0x44>)
 8000994:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000998:	6593      	str	r3, [r2, #88]	@ 0x58
 800099a:	4b06      	ldr	r3, [pc, #24]	@ (80009b4 <HAL_MspInit+0x44>)
 800099c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800099e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009a2:	603b      	str	r3, [r7, #0]
 80009a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a6:	bf00      	nop
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	40021000 	.word	0x40021000

080009b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b0ac      	sub	sp, #176	@ 0xb0
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	2288      	movs	r2, #136	@ 0x88
 80009d6:	2100      	movs	r1, #0
 80009d8:	4618      	mov	r0, r3
 80009da:	f003 fe80 	bl	80046de <memset>
  if(huart->Instance==USART2)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a25      	ldr	r2, [pc, #148]	@ (8000a78 <HAL_UART_MspInit+0xc0>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d143      	bne.n	8000a70 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009e8:	2302      	movs	r3, #2
 80009ea:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009ec:	2300      	movs	r3, #0
 80009ee:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	4618      	mov	r0, r3
 80009f6:	f001 fbb7 	bl	8002168 <HAL_RCCEx_PeriphCLKConfig>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a00:	f7ff ffb0 	bl	8000964 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a04:	4b1d      	ldr	r3, [pc, #116]	@ (8000a7c <HAL_UART_MspInit+0xc4>)
 8000a06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a08:	4a1c      	ldr	r2, [pc, #112]	@ (8000a7c <HAL_UART_MspInit+0xc4>)
 8000a0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a10:	4b1a      	ldr	r3, [pc, #104]	@ (8000a7c <HAL_UART_MspInit+0xc4>)
 8000a12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a18:	613b      	str	r3, [r7, #16]
 8000a1a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1c:	4b17      	ldr	r3, [pc, #92]	@ (8000a7c <HAL_UART_MspInit+0xc4>)
 8000a1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a20:	4a16      	ldr	r2, [pc, #88]	@ (8000a7c <HAL_UART_MspInit+0xc4>)
 8000a22:	f043 0301 	orr.w	r3, r3, #1
 8000a26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a28:	4b14      	ldr	r3, [pc, #80]	@ (8000a7c <HAL_UART_MspInit+0xc4>)
 8000a2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a2c:	f003 0301 	and.w	r3, r3, #1
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a34:	230c      	movs	r3, #12
 8000a36:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a46:	2303      	movs	r3, #3
 8000a48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a4c:	2307      	movs	r3, #7
 8000a4e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a52:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a56:	4619      	mov	r1, r3
 8000a58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a5c:	f000 fb36 	bl	80010cc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 12, 0);
 8000a60:	2200      	movs	r2, #0
 8000a62:	210c      	movs	r1, #12
 8000a64:	2026      	movs	r0, #38	@ 0x26
 8000a66:	f000 fa7c 	bl	8000f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a6a:	2026      	movs	r0, #38	@ 0x26
 8000a6c:	f000 fa95 	bl	8000f9a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a70:	bf00      	nop
 8000a72:	37b0      	adds	r7, #176	@ 0xb0
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40004400 	.word	0x40004400
 8000a7c:	40021000 	.word	0x40021000

08000a80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a84:	bf00      	nop
 8000a86:	e7fd      	b.n	8000a84 <NMI_Handler+0x4>

08000a88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <HardFault_Handler+0x4>

08000a90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <MemManage_Handler+0x4>

08000a98 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <BusFault_Handler+0x4>

08000aa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <UsageFault_Handler+0x4>

08000aa8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	af00      	add	r7, sp, #0
	//	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	//	clk_div = 0;
	//}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ad6:	f000 f949 	bl	8000d6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
	...

08000ae0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ae4:	4802      	ldr	r0, [pc, #8]	@ (8000af0 <USART2_IRQHandler+0x10>)
 8000ae6:	f002 f98d 	bl	8002e04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	200000a4 	.word	0x200000a4

08000af4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 8000af8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000afc:	f000 fca8 	bl	8001450 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b10:	2300      	movs	r3, #0
 8000b12:	617b      	str	r3, [r7, #20]
 8000b14:	e00a      	b.n	8000b2c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b16:	f3af 8000 	nop.w
 8000b1a:	4601      	mov	r1, r0
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	1c5a      	adds	r2, r3, #1
 8000b20:	60ba      	str	r2, [r7, #8]
 8000b22:	b2ca      	uxtb	r2, r1
 8000b24:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	617b      	str	r3, [r7, #20]
 8000b2c:	697a      	ldr	r2, [r7, #20]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	dbf0      	blt.n	8000b16 <_read+0x12>
  }

  return len;
 8000b34:	687b      	ldr	r3, [r7, #4]
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3718      	adds	r7, #24
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b086      	sub	sp, #24
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	60f8      	str	r0, [r7, #12]
 8000b46:	60b9      	str	r1, [r7, #8]
 8000b48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	617b      	str	r3, [r7, #20]
 8000b4e:	e009      	b.n	8000b64 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	1c5a      	adds	r2, r3, #1
 8000b54:	60ba      	str	r2, [r7, #8]
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff fd19 	bl	8000590 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	3301      	adds	r3, #1
 8000b62:	617b      	str	r3, [r7, #20]
 8000b64:	697a      	ldr	r2, [r7, #20]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	dbf1      	blt.n	8000b50 <_write+0x12>
  }
  return len;
 8000b6c:	687b      	ldr	r3, [r7, #4]
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3718      	adds	r7, #24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <_close>:

int _close(int file)
{
 8000b76:	b480      	push	{r7}
 8000b78:	b083      	sub	sp, #12
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	b083      	sub	sp, #12
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
 8000b96:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b9e:	605a      	str	r2, [r3, #4]
  return 0;
 8000ba0:	2300      	movs	r3, #0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <_isatty>:

int _isatty(int file)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	b083      	sub	sp, #12
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bb6:	2301      	movs	r3, #1
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bd0:	2300      	movs	r3, #0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3714      	adds	r7, #20
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
	...

08000be0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000be8:	4a14      	ldr	r2, [pc, #80]	@ (8000c3c <_sbrk+0x5c>)
 8000bea:	4b15      	ldr	r3, [pc, #84]	@ (8000c40 <_sbrk+0x60>)
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bf4:	4b13      	ldr	r3, [pc, #76]	@ (8000c44 <_sbrk+0x64>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d102      	bne.n	8000c02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bfc:	4b11      	ldr	r3, [pc, #68]	@ (8000c44 <_sbrk+0x64>)
 8000bfe:	4a12      	ldr	r2, [pc, #72]	@ (8000c48 <_sbrk+0x68>)
 8000c00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c02:	4b10      	ldr	r3, [pc, #64]	@ (8000c44 <_sbrk+0x64>)
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4413      	add	r3, r2
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d207      	bcs.n	8000c20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c10:	f003 fdb4 	bl	800477c <__errno>
 8000c14:	4603      	mov	r3, r0
 8000c16:	220c      	movs	r2, #12
 8000c18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1e:	e009      	b.n	8000c34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c20:	4b08      	ldr	r3, [pc, #32]	@ (8000c44 <_sbrk+0x64>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c26:	4b07      	ldr	r3, [pc, #28]	@ (8000c44 <_sbrk+0x64>)
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	4a05      	ldr	r2, [pc, #20]	@ (8000c44 <_sbrk+0x64>)
 8000c30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c32:	68fb      	ldr	r3, [r7, #12]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3718      	adds	r7, #24
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20018000 	.word	0x20018000
 8000c40:	00000400 	.word	0x00000400
 8000c44:	20000190 	.word	0x20000190
 8000c48:	200002e8 	.word	0x200002e8

08000c4c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c50:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <SystemInit+0x20>)
 8000c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c56:	4a05      	ldr	r2, [pc, #20]	@ (8000c6c <SystemInit+0x20>)
 8000c58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ca8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c74:	f7ff ffea 	bl	8000c4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c78:	480c      	ldr	r0, [pc, #48]	@ (8000cac <LoopForever+0x6>)
  ldr r1, =_edata
 8000c7a:	490d      	ldr	r1, [pc, #52]	@ (8000cb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb4 <LoopForever+0xe>)
  movs r3, #0
 8000c7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c80:	e002      	b.n	8000c88 <LoopCopyDataInit>

08000c82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c86:	3304      	adds	r3, #4

08000c88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c8c:	d3f9      	bcc.n	8000c82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c90:	4c0a      	ldr	r4, [pc, #40]	@ (8000cbc <LoopForever+0x16>)
  movs r3, #0
 8000c92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c94:	e001      	b.n	8000c9a <LoopFillZerobss>

08000c96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c98:	3204      	adds	r2, #4

08000c9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c9c:	d3fb      	bcc.n	8000c96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c9e:	f003 fd73 	bl	8004788 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ca2:	f7ff fd4d 	bl	8000740 <main>

08000ca6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ca6:	e7fe      	b.n	8000ca6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ca8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000cac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb0:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000cb4:	080053d4 	.word	0x080053d4
  ldr r2, =_sbss
 8000cb8:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000cbc:	200002e4 	.word	0x200002e4

08000cc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cc0:	e7fe      	b.n	8000cc0 <ADC1_2_IRQHandler>

08000cc2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b082      	sub	sp, #8
 8000cc6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ccc:	2003      	movs	r0, #3
 8000cce:	f000 f93d 	bl	8000f4c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cd2:	2000      	movs	r0, #0
 8000cd4:	f000 f80e 	bl	8000cf4 <HAL_InitTick>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d002      	beq.n	8000ce4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	71fb      	strb	r3, [r7, #7]
 8000ce2:	e001      	b.n	8000ce8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ce4:	f7ff fe44 	bl	8000970 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
	...

08000cf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d00:	4b17      	ldr	r3, [pc, #92]	@ (8000d60 <HAL_InitTick+0x6c>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d023      	beq.n	8000d50 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d08:	4b16      	ldr	r3, [pc, #88]	@ (8000d64 <HAL_InitTick+0x70>)
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	4b14      	ldr	r3, [pc, #80]	@ (8000d60 <HAL_InitTick+0x6c>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	4619      	mov	r1, r3
 8000d12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f000 f949 	bl	8000fb6 <HAL_SYSTICK_Config>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d10f      	bne.n	8000d4a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2b0f      	cmp	r3, #15
 8000d2e:	d809      	bhi.n	8000d44 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d30:	2200      	movs	r2, #0
 8000d32:	6879      	ldr	r1, [r7, #4]
 8000d34:	f04f 30ff 	mov.w	r0, #4294967295
 8000d38:	f000 f913 	bl	8000f62 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d3c:	4a0a      	ldr	r2, [pc, #40]	@ (8000d68 <HAL_InitTick+0x74>)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6013      	str	r3, [r2, #0]
 8000d42:	e007      	b.n	8000d54 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d44:	2301      	movs	r3, #1
 8000d46:	73fb      	strb	r3, [r7, #15]
 8000d48:	e004      	b.n	8000d54 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	73fb      	strb	r3, [r7, #15]
 8000d4e:	e001      	b.n	8000d54 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d50:	2301      	movs	r3, #1
 8000d52:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000028 	.word	0x20000028
 8000d64:	20000020 	.word	0x20000020
 8000d68:	20000024 	.word	0x20000024

08000d6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d70:	4b06      	ldr	r3, [pc, #24]	@ (8000d8c <HAL_IncTick+0x20>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	461a      	mov	r2, r3
 8000d76:	4b06      	ldr	r3, [pc, #24]	@ (8000d90 <HAL_IncTick+0x24>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	4a04      	ldr	r2, [pc, #16]	@ (8000d90 <HAL_IncTick+0x24>)
 8000d7e:	6013      	str	r3, [r2, #0]
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	20000028 	.word	0x20000028
 8000d90:	20000194 	.word	0x20000194

08000d94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  return uwTick;
 8000d98:	4b03      	ldr	r3, [pc, #12]	@ (8000da8 <HAL_GetTick+0x14>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	20000194 	.word	0x20000194

08000dac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000df0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dc2:	68ba      	ldr	r2, [r7, #8]
 8000dc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dc8:	4013      	ands	r3, r2
 8000dca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ddc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dde:	4a04      	ldr	r2, [pc, #16]	@ (8000df0 <__NVIC_SetPriorityGrouping+0x44>)
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	60d3      	str	r3, [r2, #12]
}
 8000de4:	bf00      	nop
 8000de6:	3714      	adds	r7, #20
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df8:	4b04      	ldr	r3, [pc, #16]	@ (8000e0c <__NVIC_GetPriorityGrouping+0x18>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	0a1b      	lsrs	r3, r3, #8
 8000dfe:	f003 0307 	and.w	r3, r3, #7
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	db0b      	blt.n	8000e3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	f003 021f 	and.w	r2, r3, #31
 8000e28:	4907      	ldr	r1, [pc, #28]	@ (8000e48 <__NVIC_EnableIRQ+0x38>)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	095b      	lsrs	r3, r3, #5
 8000e30:	2001      	movs	r0, #1
 8000e32:	fa00 f202 	lsl.w	r2, r0, r2
 8000e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e3a:	bf00      	nop
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	e000e100 	.word	0xe000e100

08000e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	6039      	str	r1, [r7, #0]
 8000e56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	db0a      	blt.n	8000e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	b2da      	uxtb	r2, r3
 8000e64:	490c      	ldr	r1, [pc, #48]	@ (8000e98 <__NVIC_SetPriority+0x4c>)
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	0112      	lsls	r2, r2, #4
 8000e6c:	b2d2      	uxtb	r2, r2
 8000e6e:	440b      	add	r3, r1
 8000e70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e74:	e00a      	b.n	8000e8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	4908      	ldr	r1, [pc, #32]	@ (8000e9c <__NVIC_SetPriority+0x50>)
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	f003 030f 	and.w	r3, r3, #15
 8000e82:	3b04      	subs	r3, #4
 8000e84:	0112      	lsls	r2, r2, #4
 8000e86:	b2d2      	uxtb	r2, r2
 8000e88:	440b      	add	r3, r1
 8000e8a:	761a      	strb	r2, [r3, #24]
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000e100 	.word	0xe000e100
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b089      	sub	sp, #36	@ 0x24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	f1c3 0307 	rsb	r3, r3, #7
 8000eba:	2b04      	cmp	r3, #4
 8000ebc:	bf28      	it	cs
 8000ebe:	2304      	movcs	r3, #4
 8000ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	3304      	adds	r3, #4
 8000ec6:	2b06      	cmp	r3, #6
 8000ec8:	d902      	bls.n	8000ed0 <NVIC_EncodePriority+0x30>
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	3b03      	subs	r3, #3
 8000ece:	e000      	b.n	8000ed2 <NVIC_EncodePriority+0x32>
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43da      	mvns	r2, r3
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	401a      	ands	r2, r3
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef2:	43d9      	mvns	r1, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef8:	4313      	orrs	r3, r2
         );
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3724      	adds	r7, #36	@ 0x24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
	...

08000f08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f18:	d301      	bcc.n	8000f1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e00f      	b.n	8000f3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f48 <SysTick_Config+0x40>)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f26:	210f      	movs	r1, #15
 8000f28:	f04f 30ff 	mov.w	r0, #4294967295
 8000f2c:	f7ff ff8e 	bl	8000e4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f30:	4b05      	ldr	r3, [pc, #20]	@ (8000f48 <SysTick_Config+0x40>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f36:	4b04      	ldr	r3, [pc, #16]	@ (8000f48 <SysTick_Config+0x40>)
 8000f38:	2207      	movs	r2, #7
 8000f3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	e000e010 	.word	0xe000e010

08000f4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f7ff ff29 	bl	8000dac <__NVIC_SetPriorityGrouping>
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b086      	sub	sp, #24
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	4603      	mov	r3, r0
 8000f6a:	60b9      	str	r1, [r7, #8]
 8000f6c:	607a      	str	r2, [r7, #4]
 8000f6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f74:	f7ff ff3e 	bl	8000df4 <__NVIC_GetPriorityGrouping>
 8000f78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	68b9      	ldr	r1, [r7, #8]
 8000f7e:	6978      	ldr	r0, [r7, #20]
 8000f80:	f7ff ff8e 	bl	8000ea0 <NVIC_EncodePriority>
 8000f84:	4602      	mov	r2, r0
 8000f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f8a:	4611      	mov	r1, r2
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff ff5d 	bl	8000e4c <__NVIC_SetPriority>
}
 8000f92:	bf00      	nop
 8000f94:	3718      	adds	r7, #24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff ff31 	bl	8000e10 <__NVIC_EnableIRQ>
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b082      	sub	sp, #8
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff ffa2 	bl	8000f08 <SysTick_Config>
 8000fc4:	4603      	mov	r3, r0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	b085      	sub	sp, #20
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d008      	beq.n	8000ff8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2204      	movs	r2, #4
 8000fea:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e022      	b.n	800103e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f022 020e 	bic.w	r2, r2, #14
 8001006:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f022 0201 	bic.w	r2, r2, #1
 8001016:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800101c:	f003 021c 	and.w	r2, r3, #28
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001024:	2101      	movs	r1, #1
 8001026:	fa01 f202 	lsl.w	r2, r1, r2
 800102a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2201      	movs	r2, #1
 8001030:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2200      	movs	r2, #0
 8001038:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800103c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800103e:	4618      	mov	r0, r3
 8001040:	3714      	adds	r7, #20
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b084      	sub	sp, #16
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001052:	2300      	movs	r3, #0
 8001054:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800105c:	b2db      	uxtb	r3, r3
 800105e:	2b02      	cmp	r3, #2
 8001060:	d005      	beq.n	800106e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2204      	movs	r2, #4
 8001066:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	73fb      	strb	r3, [r7, #15]
 800106c:	e029      	b.n	80010c2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f022 020e 	bic.w	r2, r2, #14
 800107c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f022 0201 	bic.w	r2, r2, #1
 800108c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001092:	f003 021c 	and.w	r2, r3, #28
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109a:	2101      	movs	r1, #1
 800109c:	fa01 f202 	lsl.w	r2, r1, r2
 80010a0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2201      	movs	r2, #1
 80010a6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d003      	beq.n	80010c2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	4798      	blx	r3
    }
  }
  return status;
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b087      	sub	sp, #28
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010da:	e17f      	b.n	80013dc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	2101      	movs	r1, #1
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	fa01 f303 	lsl.w	r3, r1, r3
 80010e8:	4013      	ands	r3, r2
 80010ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	f000 8171 	beq.w	80013d6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f003 0303 	and.w	r3, r3, #3
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d005      	beq.n	800110c <HAL_GPIO_Init+0x40>
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f003 0303 	and.w	r3, r3, #3
 8001108:	2b02      	cmp	r3, #2
 800110a:	d130      	bne.n	800116e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	2203      	movs	r2, #3
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	4013      	ands	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	68da      	ldr	r2, [r3, #12]
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	4313      	orrs	r3, r2
 8001134:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001142:	2201      	movs	r2, #1
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43db      	mvns	r3, r3
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	4013      	ands	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	091b      	lsrs	r3, r3, #4
 8001158:	f003 0201 	and.w	r2, r3, #1
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	4313      	orrs	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f003 0303 	and.w	r3, r3, #3
 8001176:	2b03      	cmp	r3, #3
 8001178:	d118      	bne.n	80011ac <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800117e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001180:	2201      	movs	r2, #1
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	4013      	ands	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	08db      	lsrs	r3, r3, #3
 8001196:	f003 0201 	and.w	r2, r3, #1
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	2b03      	cmp	r3, #3
 80011b6:	d017      	beq.n	80011e8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	2203      	movs	r2, #3
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	4013      	ands	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	689a      	ldr	r2, [r3, #8]
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	4313      	orrs	r3, r2
 80011e0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 0303 	and.w	r3, r3, #3
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d123      	bne.n	800123c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	08da      	lsrs	r2, r3, #3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3208      	adds	r2, #8
 80011fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001200:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	f003 0307 	and.w	r3, r3, #7
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	220f      	movs	r2, #15
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	4013      	ands	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	691a      	ldr	r2, [r3, #16]
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	4313      	orrs	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	08da      	lsrs	r2, r3, #3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	3208      	adds	r2, #8
 8001236:	6939      	ldr	r1, [r7, #16]
 8001238:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	2203      	movs	r2, #3
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	4013      	ands	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 0203 	and.w	r2, r3, #3
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	4313      	orrs	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001278:	2b00      	cmp	r3, #0
 800127a:	f000 80ac 	beq.w	80013d6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127e:	4b5f      	ldr	r3, [pc, #380]	@ (80013fc <HAL_GPIO_Init+0x330>)
 8001280:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001282:	4a5e      	ldr	r2, [pc, #376]	@ (80013fc <HAL_GPIO_Init+0x330>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	6613      	str	r3, [r2, #96]	@ 0x60
 800128a:	4b5c      	ldr	r3, [pc, #368]	@ (80013fc <HAL_GPIO_Init+0x330>)
 800128c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001296:	4a5a      	ldr	r2, [pc, #360]	@ (8001400 <HAL_GPIO_Init+0x334>)
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	089b      	lsrs	r3, r3, #2
 800129c:	3302      	adds	r3, #2
 800129e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	f003 0303 	and.w	r3, r3, #3
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	220f      	movs	r2, #15
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43db      	mvns	r3, r3
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	4013      	ands	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80012c0:	d025      	beq.n	800130e <HAL_GPIO_Init+0x242>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a4f      	ldr	r2, [pc, #316]	@ (8001404 <HAL_GPIO_Init+0x338>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d01f      	beq.n	800130a <HAL_GPIO_Init+0x23e>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a4e      	ldr	r2, [pc, #312]	@ (8001408 <HAL_GPIO_Init+0x33c>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d019      	beq.n	8001306 <HAL_GPIO_Init+0x23a>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a4d      	ldr	r2, [pc, #308]	@ (800140c <HAL_GPIO_Init+0x340>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d013      	beq.n	8001302 <HAL_GPIO_Init+0x236>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a4c      	ldr	r2, [pc, #304]	@ (8001410 <HAL_GPIO_Init+0x344>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d00d      	beq.n	80012fe <HAL_GPIO_Init+0x232>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a4b      	ldr	r2, [pc, #300]	@ (8001414 <HAL_GPIO_Init+0x348>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d007      	beq.n	80012fa <HAL_GPIO_Init+0x22e>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a4a      	ldr	r2, [pc, #296]	@ (8001418 <HAL_GPIO_Init+0x34c>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d101      	bne.n	80012f6 <HAL_GPIO_Init+0x22a>
 80012f2:	2306      	movs	r3, #6
 80012f4:	e00c      	b.n	8001310 <HAL_GPIO_Init+0x244>
 80012f6:	2307      	movs	r3, #7
 80012f8:	e00a      	b.n	8001310 <HAL_GPIO_Init+0x244>
 80012fa:	2305      	movs	r3, #5
 80012fc:	e008      	b.n	8001310 <HAL_GPIO_Init+0x244>
 80012fe:	2304      	movs	r3, #4
 8001300:	e006      	b.n	8001310 <HAL_GPIO_Init+0x244>
 8001302:	2303      	movs	r3, #3
 8001304:	e004      	b.n	8001310 <HAL_GPIO_Init+0x244>
 8001306:	2302      	movs	r3, #2
 8001308:	e002      	b.n	8001310 <HAL_GPIO_Init+0x244>
 800130a:	2301      	movs	r3, #1
 800130c:	e000      	b.n	8001310 <HAL_GPIO_Init+0x244>
 800130e:	2300      	movs	r3, #0
 8001310:	697a      	ldr	r2, [r7, #20]
 8001312:	f002 0203 	and.w	r2, r2, #3
 8001316:	0092      	lsls	r2, r2, #2
 8001318:	4093      	lsls	r3, r2
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	4313      	orrs	r3, r2
 800131e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001320:	4937      	ldr	r1, [pc, #220]	@ (8001400 <HAL_GPIO_Init+0x334>)
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	089b      	lsrs	r3, r3, #2
 8001326:	3302      	adds	r3, #2
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800132e:	4b3b      	ldr	r3, [pc, #236]	@ (800141c <HAL_GPIO_Init+0x350>)
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	43db      	mvns	r3, r3
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	4013      	ands	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d003      	beq.n	8001352 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	4313      	orrs	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001352:	4a32      	ldr	r2, [pc, #200]	@ (800141c <HAL_GPIO_Init+0x350>)
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001358:	4b30      	ldr	r3, [pc, #192]	@ (800141c <HAL_GPIO_Init+0x350>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	43db      	mvns	r3, r3
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	4013      	ands	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d003      	beq.n	800137c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	4313      	orrs	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800137c:	4a27      	ldr	r2, [pc, #156]	@ (800141c <HAL_GPIO_Init+0x350>)
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001382:	4b26      	ldr	r3, [pc, #152]	@ (800141c <HAL_GPIO_Init+0x350>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	43db      	mvns	r3, r3
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	4013      	ands	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d003      	beq.n	80013a6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013a6:	4a1d      	ldr	r2, [pc, #116]	@ (800141c <HAL_GPIO_Init+0x350>)
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80013ac:	4b1b      	ldr	r3, [pc, #108]	@ (800141c <HAL_GPIO_Init+0x350>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	43db      	mvns	r3, r3
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	4013      	ands	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d003      	beq.n	80013d0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013d0:	4a12      	ldr	r2, [pc, #72]	@ (800141c <HAL_GPIO_Init+0x350>)
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	3301      	adds	r3, #1
 80013da:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	fa22 f303 	lsr.w	r3, r2, r3
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f47f ae78 	bne.w	80010dc <HAL_GPIO_Init+0x10>
  }
}
 80013ec:	bf00      	nop
 80013ee:	bf00      	nop
 80013f0:	371c      	adds	r7, #28
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	40021000 	.word	0x40021000
 8001400:	40010000 	.word	0x40010000
 8001404:	48000400 	.word	0x48000400
 8001408:	48000800 	.word	0x48000800
 800140c:	48000c00 	.word	0x48000c00
 8001410:	48001000 	.word	0x48001000
 8001414:	48001400 	.word	0x48001400
 8001418:	48001800 	.word	0x48001800
 800141c:	40010400 	.word	0x40010400

08001420 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	460b      	mov	r3, r1
 800142a:	807b      	strh	r3, [r7, #2]
 800142c:	4613      	mov	r3, r2
 800142e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001430:	787b      	ldrb	r3, [r7, #1]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001436:	887a      	ldrh	r2, [r7, #2]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800143c:	e002      	b.n	8001444 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800143e:	887a      	ldrh	r2, [r7, #2]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800145a:	4b08      	ldr	r3, [pc, #32]	@ (800147c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800145c:	695a      	ldr	r2, [r3, #20]
 800145e:	88fb      	ldrh	r3, [r7, #6]
 8001460:	4013      	ands	r3, r2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d006      	beq.n	8001474 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001466:	4a05      	ldr	r2, [pc, #20]	@ (800147c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001468:	88fb      	ldrh	r3, [r7, #6]
 800146a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800146c:	88fb      	ldrh	r3, [r7, #6]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff f8a6 	bl	80005c0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001474:	bf00      	nop
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40010400 	.word	0x40010400

08001480 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001484:	4b05      	ldr	r3, [pc, #20]	@ (800149c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a04      	ldr	r2, [pc, #16]	@ (800149c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800148a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800148e:	6013      	str	r3, [r2, #0]
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	40007000 	.word	0x40007000

080014a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80014a4:	4b04      	ldr	r3, [pc, #16]	@ (80014b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	40007000 	.word	0x40007000

080014bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80014ca:	d130      	bne.n	800152e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80014cc:	4b23      	ldr	r3, [pc, #140]	@ (800155c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80014d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80014d8:	d038      	beq.n	800154c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014da:	4b20      	ldr	r3, [pc, #128]	@ (800155c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80014e2:	4a1e      	ldr	r2, [pc, #120]	@ (800155c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014e4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014e8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001560 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2232      	movs	r2, #50	@ 0x32
 80014f0:	fb02 f303 	mul.w	r3, r2, r3
 80014f4:	4a1b      	ldr	r2, [pc, #108]	@ (8001564 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80014f6:	fba2 2303 	umull	r2, r3, r2, r3
 80014fa:	0c9b      	lsrs	r3, r3, #18
 80014fc:	3301      	adds	r3, #1
 80014fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001500:	e002      	b.n	8001508 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	3b01      	subs	r3, #1
 8001506:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001508:	4b14      	ldr	r3, [pc, #80]	@ (800155c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800150a:	695b      	ldr	r3, [r3, #20]
 800150c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001510:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001514:	d102      	bne.n	800151c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d1f2      	bne.n	8001502 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800151c:	4b0f      	ldr	r3, [pc, #60]	@ (800155c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800151e:	695b      	ldr	r3, [r3, #20]
 8001520:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001524:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001528:	d110      	bne.n	800154c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e00f      	b.n	800154e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800152e:	4b0b      	ldr	r3, [pc, #44]	@ (800155c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001536:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800153a:	d007      	beq.n	800154c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800153c:	4b07      	ldr	r3, [pc, #28]	@ (800155c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001544:	4a05      	ldr	r2, [pc, #20]	@ (800155c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001546:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800154a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3714      	adds	r7, #20
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	40007000 	.word	0x40007000
 8001560:	20000020 	.word	0x20000020
 8001564:	431bde83 	.word	0x431bde83

08001568 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b088      	sub	sp, #32
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d101      	bne.n	800157a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e3ca      	b.n	8001d10 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800157a:	4b97      	ldr	r3, [pc, #604]	@ (80017d8 <HAL_RCC_OscConfig+0x270>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f003 030c 	and.w	r3, r3, #12
 8001582:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001584:	4b94      	ldr	r3, [pc, #592]	@ (80017d8 <HAL_RCC_OscConfig+0x270>)
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	f003 0303 	and.w	r3, r3, #3
 800158c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0310 	and.w	r3, r3, #16
 8001596:	2b00      	cmp	r3, #0
 8001598:	f000 80e4 	beq.w	8001764 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d007      	beq.n	80015b2 <HAL_RCC_OscConfig+0x4a>
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	2b0c      	cmp	r3, #12
 80015a6:	f040 808b 	bne.w	80016c0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	f040 8087 	bne.w	80016c0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015b2:	4b89      	ldr	r3, [pc, #548]	@ (80017d8 <HAL_RCC_OscConfig+0x270>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d005      	beq.n	80015ca <HAL_RCC_OscConfig+0x62>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d101      	bne.n	80015ca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e3a2      	b.n	8001d10 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a1a      	ldr	r2, [r3, #32]
 80015ce:	4b82      	ldr	r3, [pc, #520]	@ (80017d8 <HAL_RCC_OscConfig+0x270>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0308 	and.w	r3, r3, #8
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d004      	beq.n	80015e4 <HAL_RCC_OscConfig+0x7c>
 80015da:	4b7f      	ldr	r3, [pc, #508]	@ (80017d8 <HAL_RCC_OscConfig+0x270>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80015e2:	e005      	b.n	80015f0 <HAL_RCC_OscConfig+0x88>
 80015e4:	4b7c      	ldr	r3, [pc, #496]	@ (80017d8 <HAL_RCC_OscConfig+0x270>)
 80015e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015ea:	091b      	lsrs	r3, r3, #4
 80015ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d223      	bcs.n	800163c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a1b      	ldr	r3, [r3, #32]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f000 fd55 	bl	80020a8 <RCC_SetFlashLatencyFromMSIRange>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e383      	b.n	8001d10 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001608:	4b73      	ldr	r3, [pc, #460]	@ (80017d8 <HAL_RCC_OscConfig+0x270>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a72      	ldr	r2, [pc, #456]	@ (80017d8 <HAL_RCC_OscConfig+0x270>)
 800160e:	f043 0308 	orr.w	r3, r3, #8
 8001612:	6013      	str	r3, [r2, #0]
 8001614:	4b70      	ldr	r3, [pc, #448]	@ (80017d8 <HAL_RCC_OscConfig+0x270>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a1b      	ldr	r3, [r3, #32]
 8001620:	496d      	ldr	r1, [pc, #436]	@ (80017d8 <HAL_RCC_OscConfig+0x270>)
 8001622:	4313      	orrs	r3, r2
 8001624:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001626:	4b6c      	ldr	r3, [pc, #432]	@ (80017d8 <HAL_RCC_OscConfig+0x270>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	021b      	lsls	r3, r3, #8
 8001634:	4968      	ldr	r1, [pc, #416]	@ (80017d8 <HAL_RCC_OscConfig+0x270>)
 8001636:	4313      	orrs	r3, r2
 8001638:	604b      	str	r3, [r1, #4]
 800163a:	e025      	b.n	8001688 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800163c:	4b66      	ldr	r3, [pc, #408]	@ (80017d8 <HAL_RCC_OscConfig+0x270>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a65      	ldr	r2, [pc, #404]	@ (80017d8 <HAL_RCC_OscConfig+0x270>)
 8001642:	f043 0308 	orr.w	r3, r3, #8
 8001646:	6013      	str	r3, [r2, #0]
 8001648:	4b63      	ldr	r3, [pc, #396]	@ (80017d8 <HAL_RCC_OscConfig+0x270>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a1b      	ldr	r3, [r3, #32]
 8001654:	4960      	ldr	r1, [pc, #384]	@ (80017d8 <HAL_RCC_OscConfig+0x270>)
 8001656:	4313      	orrs	r3, r2
 8001658:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800165a:	4b5f      	ldr	r3, [pc, #380]	@ (80017d8 <HAL_RCC_OscConfig+0x270>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	021b      	lsls	r3, r3, #8
 8001668:	495b      	ldr	r1, [pc, #364]	@ (80017d8 <HAL_RCC_OscConfig+0x270>)
 800166a:	4313      	orrs	r3, r2
 800166c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d109      	bne.n	8001688 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a1b      	ldr	r3, [r3, #32]
 8001678:	4618      	mov	r0, r3
 800167a:	f000 fd15 	bl	80020a8 <RCC_SetFlashLatencyFromMSIRange>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e343      	b.n	8001d10 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001688:	f000 fc4a 	bl	8001f20 <HAL_RCC_GetSysClockFreq>
 800168c:	4602      	mov	r2, r0
 800168e:	4b52      	ldr	r3, [pc, #328]	@ (80017d8 <HAL_RCC_OscConfig+0x270>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	091b      	lsrs	r3, r3, #4
 8001694:	f003 030f 	and.w	r3, r3, #15
 8001698:	4950      	ldr	r1, [pc, #320]	@ (80017dc <HAL_RCC_OscConfig+0x274>)
 800169a:	5ccb      	ldrb	r3, [r1, r3]
 800169c:	f003 031f 	and.w	r3, r3, #31
 80016a0:	fa22 f303 	lsr.w	r3, r2, r3
 80016a4:	4a4e      	ldr	r2, [pc, #312]	@ (80017e0 <HAL_RCC_OscConfig+0x278>)
 80016a6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016a8:	4b4e      	ldr	r3, [pc, #312]	@ (80017e4 <HAL_RCC_OscConfig+0x27c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff fb21 	bl	8000cf4 <HAL_InitTick>
 80016b2:	4603      	mov	r3, r0
 80016b4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80016b6:	7bfb      	ldrb	r3, [r7, #15]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d052      	beq.n	8001762 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80016bc:	7bfb      	ldrb	r3, [r7, #15]
 80016be:	e327      	b.n	8001d10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d032      	beq.n	800172e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80016c8:	4b43      	ldr	r3, [pc, #268]	@ (80017d8 <HAL_RCC_OscConfig+0x270>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a42      	ldr	r2, [pc, #264]	@ (80017d8 <HAL_RCC_OscConfig+0x270>)
 80016ce:	f043 0301 	orr.w	r3, r3, #1
 80016d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016d4:	f7ff fb5e 	bl	8000d94 <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016dc:	f7ff fb5a 	bl	8000d94 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e310      	b.n	8001d10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016ee:	4b3a      	ldr	r3, [pc, #232]	@ (80017d8 <HAL_RCC_OscConfig+0x270>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d0f0      	beq.n	80016dc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016fa:	4b37      	ldr	r3, [pc, #220]	@ (80017d8 <HAL_RCC_OscConfig+0x270>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a36      	ldr	r2, [pc, #216]	@ (80017d8 <HAL_RCC_OscConfig+0x270>)
 8001700:	f043 0308 	orr.w	r3, r3, #8
 8001704:	6013      	str	r3, [r2, #0]
 8001706:	4b34      	ldr	r3, [pc, #208]	@ (80017d8 <HAL_RCC_OscConfig+0x270>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a1b      	ldr	r3, [r3, #32]
 8001712:	4931      	ldr	r1, [pc, #196]	@ (80017d8 <HAL_RCC_OscConfig+0x270>)
 8001714:	4313      	orrs	r3, r2
 8001716:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001718:	4b2f      	ldr	r3, [pc, #188]	@ (80017d8 <HAL_RCC_OscConfig+0x270>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	69db      	ldr	r3, [r3, #28]
 8001724:	021b      	lsls	r3, r3, #8
 8001726:	492c      	ldr	r1, [pc, #176]	@ (80017d8 <HAL_RCC_OscConfig+0x270>)
 8001728:	4313      	orrs	r3, r2
 800172a:	604b      	str	r3, [r1, #4]
 800172c:	e01a      	b.n	8001764 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800172e:	4b2a      	ldr	r3, [pc, #168]	@ (80017d8 <HAL_RCC_OscConfig+0x270>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a29      	ldr	r2, [pc, #164]	@ (80017d8 <HAL_RCC_OscConfig+0x270>)
 8001734:	f023 0301 	bic.w	r3, r3, #1
 8001738:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800173a:	f7ff fb2b 	bl	8000d94 <HAL_GetTick>
 800173e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001740:	e008      	b.n	8001754 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001742:	f7ff fb27 	bl	8000d94 <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e2dd      	b.n	8001d10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001754:	4b20      	ldr	r3, [pc, #128]	@ (80017d8 <HAL_RCC_OscConfig+0x270>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d1f0      	bne.n	8001742 <HAL_RCC_OscConfig+0x1da>
 8001760:	e000      	b.n	8001764 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001762:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	2b00      	cmp	r3, #0
 800176e:	d074      	beq.n	800185a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	2b08      	cmp	r3, #8
 8001774:	d005      	beq.n	8001782 <HAL_RCC_OscConfig+0x21a>
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	2b0c      	cmp	r3, #12
 800177a:	d10e      	bne.n	800179a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	2b03      	cmp	r3, #3
 8001780:	d10b      	bne.n	800179a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001782:	4b15      	ldr	r3, [pc, #84]	@ (80017d8 <HAL_RCC_OscConfig+0x270>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d064      	beq.n	8001858 <HAL_RCC_OscConfig+0x2f0>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d160      	bne.n	8001858 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e2ba      	b.n	8001d10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017a2:	d106      	bne.n	80017b2 <HAL_RCC_OscConfig+0x24a>
 80017a4:	4b0c      	ldr	r3, [pc, #48]	@ (80017d8 <HAL_RCC_OscConfig+0x270>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a0b      	ldr	r2, [pc, #44]	@ (80017d8 <HAL_RCC_OscConfig+0x270>)
 80017aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017ae:	6013      	str	r3, [r2, #0]
 80017b0:	e026      	b.n	8001800 <HAL_RCC_OscConfig+0x298>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017ba:	d115      	bne.n	80017e8 <HAL_RCC_OscConfig+0x280>
 80017bc:	4b06      	ldr	r3, [pc, #24]	@ (80017d8 <HAL_RCC_OscConfig+0x270>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a05      	ldr	r2, [pc, #20]	@ (80017d8 <HAL_RCC_OscConfig+0x270>)
 80017c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017c6:	6013      	str	r3, [r2, #0]
 80017c8:	4b03      	ldr	r3, [pc, #12]	@ (80017d8 <HAL_RCC_OscConfig+0x270>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a02      	ldr	r2, [pc, #8]	@ (80017d8 <HAL_RCC_OscConfig+0x270>)
 80017ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017d2:	6013      	str	r3, [r2, #0]
 80017d4:	e014      	b.n	8001800 <HAL_RCC_OscConfig+0x298>
 80017d6:	bf00      	nop
 80017d8:	40021000 	.word	0x40021000
 80017dc:	08005348 	.word	0x08005348
 80017e0:	20000020 	.word	0x20000020
 80017e4:	20000024 	.word	0x20000024
 80017e8:	4ba0      	ldr	r3, [pc, #640]	@ (8001a6c <HAL_RCC_OscConfig+0x504>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a9f      	ldr	r2, [pc, #636]	@ (8001a6c <HAL_RCC_OscConfig+0x504>)
 80017ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017f2:	6013      	str	r3, [r2, #0]
 80017f4:	4b9d      	ldr	r3, [pc, #628]	@ (8001a6c <HAL_RCC_OscConfig+0x504>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a9c      	ldr	r2, [pc, #624]	@ (8001a6c <HAL_RCC_OscConfig+0x504>)
 80017fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d013      	beq.n	8001830 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001808:	f7ff fac4 	bl	8000d94 <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001810:	f7ff fac0 	bl	8000d94 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b64      	cmp	r3, #100	@ 0x64
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e276      	b.n	8001d10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001822:	4b92      	ldr	r3, [pc, #584]	@ (8001a6c <HAL_RCC_OscConfig+0x504>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d0f0      	beq.n	8001810 <HAL_RCC_OscConfig+0x2a8>
 800182e:	e014      	b.n	800185a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001830:	f7ff fab0 	bl	8000d94 <HAL_GetTick>
 8001834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001838:	f7ff faac 	bl	8000d94 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b64      	cmp	r3, #100	@ 0x64
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e262      	b.n	8001d10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800184a:	4b88      	ldr	r3, [pc, #544]	@ (8001a6c <HAL_RCC_OscConfig+0x504>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d1f0      	bne.n	8001838 <HAL_RCC_OscConfig+0x2d0>
 8001856:	e000      	b.n	800185a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001858:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d060      	beq.n	8001928 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	2b04      	cmp	r3, #4
 800186a:	d005      	beq.n	8001878 <HAL_RCC_OscConfig+0x310>
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	2b0c      	cmp	r3, #12
 8001870:	d119      	bne.n	80018a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	2b02      	cmp	r3, #2
 8001876:	d116      	bne.n	80018a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001878:	4b7c      	ldr	r3, [pc, #496]	@ (8001a6c <HAL_RCC_OscConfig+0x504>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001880:	2b00      	cmp	r3, #0
 8001882:	d005      	beq.n	8001890 <HAL_RCC_OscConfig+0x328>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d101      	bne.n	8001890 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e23f      	b.n	8001d10 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001890:	4b76      	ldr	r3, [pc, #472]	@ (8001a6c <HAL_RCC_OscConfig+0x504>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	061b      	lsls	r3, r3, #24
 800189e:	4973      	ldr	r1, [pc, #460]	@ (8001a6c <HAL_RCC_OscConfig+0x504>)
 80018a0:	4313      	orrs	r3, r2
 80018a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018a4:	e040      	b.n	8001928 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d023      	beq.n	80018f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018ae:	4b6f      	ldr	r3, [pc, #444]	@ (8001a6c <HAL_RCC_OscConfig+0x504>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a6e      	ldr	r2, [pc, #440]	@ (8001a6c <HAL_RCC_OscConfig+0x504>)
 80018b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ba:	f7ff fa6b 	bl	8000d94 <HAL_GetTick>
 80018be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018c2:	f7ff fa67 	bl	8000d94 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e21d      	b.n	8001d10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018d4:	4b65      	ldr	r3, [pc, #404]	@ (8001a6c <HAL_RCC_OscConfig+0x504>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d0f0      	beq.n	80018c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e0:	4b62      	ldr	r3, [pc, #392]	@ (8001a6c <HAL_RCC_OscConfig+0x504>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	061b      	lsls	r3, r3, #24
 80018ee:	495f      	ldr	r1, [pc, #380]	@ (8001a6c <HAL_RCC_OscConfig+0x504>)
 80018f0:	4313      	orrs	r3, r2
 80018f2:	604b      	str	r3, [r1, #4]
 80018f4:	e018      	b.n	8001928 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018f6:	4b5d      	ldr	r3, [pc, #372]	@ (8001a6c <HAL_RCC_OscConfig+0x504>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a5c      	ldr	r2, [pc, #368]	@ (8001a6c <HAL_RCC_OscConfig+0x504>)
 80018fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001900:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001902:	f7ff fa47 	bl	8000d94 <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001908:	e008      	b.n	800191c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800190a:	f7ff fa43 	bl	8000d94 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e1f9      	b.n	8001d10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800191c:	4b53      	ldr	r3, [pc, #332]	@ (8001a6c <HAL_RCC_OscConfig+0x504>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001924:	2b00      	cmp	r3, #0
 8001926:	d1f0      	bne.n	800190a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0308 	and.w	r3, r3, #8
 8001930:	2b00      	cmp	r3, #0
 8001932:	d03c      	beq.n	80019ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	695b      	ldr	r3, [r3, #20]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d01c      	beq.n	8001976 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800193c:	4b4b      	ldr	r3, [pc, #300]	@ (8001a6c <HAL_RCC_OscConfig+0x504>)
 800193e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001942:	4a4a      	ldr	r2, [pc, #296]	@ (8001a6c <HAL_RCC_OscConfig+0x504>)
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800194c:	f7ff fa22 	bl	8000d94 <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001954:	f7ff fa1e 	bl	8000d94 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e1d4      	b.n	8001d10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001966:	4b41      	ldr	r3, [pc, #260]	@ (8001a6c <HAL_RCC_OscConfig+0x504>)
 8001968:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d0ef      	beq.n	8001954 <HAL_RCC_OscConfig+0x3ec>
 8001974:	e01b      	b.n	80019ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001976:	4b3d      	ldr	r3, [pc, #244]	@ (8001a6c <HAL_RCC_OscConfig+0x504>)
 8001978:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800197c:	4a3b      	ldr	r2, [pc, #236]	@ (8001a6c <HAL_RCC_OscConfig+0x504>)
 800197e:	f023 0301 	bic.w	r3, r3, #1
 8001982:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001986:	f7ff fa05 	bl	8000d94 <HAL_GetTick>
 800198a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800198c:	e008      	b.n	80019a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800198e:	f7ff fa01 	bl	8000d94 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e1b7      	b.n	8001d10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019a0:	4b32      	ldr	r3, [pc, #200]	@ (8001a6c <HAL_RCC_OscConfig+0x504>)
 80019a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1ef      	bne.n	800198e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0304 	and.w	r3, r3, #4
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f000 80a6 	beq.w	8001b08 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019bc:	2300      	movs	r3, #0
 80019be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80019c0:	4b2a      	ldr	r3, [pc, #168]	@ (8001a6c <HAL_RCC_OscConfig+0x504>)
 80019c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d10d      	bne.n	80019e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019cc:	4b27      	ldr	r3, [pc, #156]	@ (8001a6c <HAL_RCC_OscConfig+0x504>)
 80019ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019d0:	4a26      	ldr	r2, [pc, #152]	@ (8001a6c <HAL_RCC_OscConfig+0x504>)
 80019d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80019d8:	4b24      	ldr	r3, [pc, #144]	@ (8001a6c <HAL_RCC_OscConfig+0x504>)
 80019da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019e0:	60bb      	str	r3, [r7, #8]
 80019e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019e4:	2301      	movs	r3, #1
 80019e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019e8:	4b21      	ldr	r3, [pc, #132]	@ (8001a70 <HAL_RCC_OscConfig+0x508>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d118      	bne.n	8001a26 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001a70 <HAL_RCC_OscConfig+0x508>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001a70 <HAL_RCC_OscConfig+0x508>)
 80019fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a00:	f7ff f9c8 	bl	8000d94 <HAL_GetTick>
 8001a04:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a08:	f7ff f9c4 	bl	8000d94 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e17a      	b.n	8001d10 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a1a:	4b15      	ldr	r3, [pc, #84]	@ (8001a70 <HAL_RCC_OscConfig+0x508>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d0f0      	beq.n	8001a08 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d108      	bne.n	8001a40 <HAL_RCC_OscConfig+0x4d8>
 8001a2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a6c <HAL_RCC_OscConfig+0x504>)
 8001a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a34:	4a0d      	ldr	r2, [pc, #52]	@ (8001a6c <HAL_RCC_OscConfig+0x504>)
 8001a36:	f043 0301 	orr.w	r3, r3, #1
 8001a3a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a3e:	e029      	b.n	8001a94 <HAL_RCC_OscConfig+0x52c>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	2b05      	cmp	r3, #5
 8001a46:	d115      	bne.n	8001a74 <HAL_RCC_OscConfig+0x50c>
 8001a48:	4b08      	ldr	r3, [pc, #32]	@ (8001a6c <HAL_RCC_OscConfig+0x504>)
 8001a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a4e:	4a07      	ldr	r2, [pc, #28]	@ (8001a6c <HAL_RCC_OscConfig+0x504>)
 8001a50:	f043 0304 	orr.w	r3, r3, #4
 8001a54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a58:	4b04      	ldr	r3, [pc, #16]	@ (8001a6c <HAL_RCC_OscConfig+0x504>)
 8001a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a5e:	4a03      	ldr	r2, [pc, #12]	@ (8001a6c <HAL_RCC_OscConfig+0x504>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a68:	e014      	b.n	8001a94 <HAL_RCC_OscConfig+0x52c>
 8001a6a:	bf00      	nop
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	40007000 	.word	0x40007000
 8001a74:	4b9c      	ldr	r3, [pc, #624]	@ (8001ce8 <HAL_RCC_OscConfig+0x780>)
 8001a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a7a:	4a9b      	ldr	r2, [pc, #620]	@ (8001ce8 <HAL_RCC_OscConfig+0x780>)
 8001a7c:	f023 0301 	bic.w	r3, r3, #1
 8001a80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a84:	4b98      	ldr	r3, [pc, #608]	@ (8001ce8 <HAL_RCC_OscConfig+0x780>)
 8001a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a8a:	4a97      	ldr	r2, [pc, #604]	@ (8001ce8 <HAL_RCC_OscConfig+0x780>)
 8001a8c:	f023 0304 	bic.w	r3, r3, #4
 8001a90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d016      	beq.n	8001aca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a9c:	f7ff f97a 	bl	8000d94 <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aa2:	e00a      	b.n	8001aba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aa4:	f7ff f976 	bl	8000d94 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e12a      	b.n	8001d10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aba:	4b8b      	ldr	r3, [pc, #556]	@ (8001ce8 <HAL_RCC_OscConfig+0x780>)
 8001abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d0ed      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x53c>
 8001ac8:	e015      	b.n	8001af6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aca:	f7ff f963 	bl	8000d94 <HAL_GetTick>
 8001ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ad0:	e00a      	b.n	8001ae8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ad2:	f7ff f95f 	bl	8000d94 <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e113      	b.n	8001d10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ae8:	4b7f      	ldr	r3, [pc, #508]	@ (8001ce8 <HAL_RCC_OscConfig+0x780>)
 8001aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1ed      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001af6:	7ffb      	ldrb	r3, [r7, #31]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d105      	bne.n	8001b08 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001afc:	4b7a      	ldr	r3, [pc, #488]	@ (8001ce8 <HAL_RCC_OscConfig+0x780>)
 8001afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b00:	4a79      	ldr	r2, [pc, #484]	@ (8001ce8 <HAL_RCC_OscConfig+0x780>)
 8001b02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b06:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f000 80fe 	beq.w	8001d0e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	f040 80d0 	bne.w	8001cbc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b1c:	4b72      	ldr	r3, [pc, #456]	@ (8001ce8 <HAL_RCC_OscConfig+0x780>)
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	f003 0203 	and.w	r2, r3, #3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d130      	bne.n	8001b92 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d127      	bne.n	8001b92 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b4c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d11f      	bne.n	8001b92 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001b5c:	2a07      	cmp	r2, #7
 8001b5e:	bf14      	ite	ne
 8001b60:	2201      	movne	r2, #1
 8001b62:	2200      	moveq	r2, #0
 8001b64:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d113      	bne.n	8001b92 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b74:	085b      	lsrs	r3, r3, #1
 8001b76:	3b01      	subs	r3, #1
 8001b78:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d109      	bne.n	8001b92 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b88:	085b      	lsrs	r3, r3, #1
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d06e      	beq.n	8001c70 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	2b0c      	cmp	r3, #12
 8001b96:	d069      	beq.n	8001c6c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b98:	4b53      	ldr	r3, [pc, #332]	@ (8001ce8 <HAL_RCC_OscConfig+0x780>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d105      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001ba4:	4b50      	ldr	r3, [pc, #320]	@ (8001ce8 <HAL_RCC_OscConfig+0x780>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e0ad      	b.n	8001d10 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001bb4:	4b4c      	ldr	r3, [pc, #304]	@ (8001ce8 <HAL_RCC_OscConfig+0x780>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a4b      	ldr	r2, [pc, #300]	@ (8001ce8 <HAL_RCC_OscConfig+0x780>)
 8001bba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001bbe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bc0:	f7ff f8e8 	bl	8000d94 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bc8:	f7ff f8e4 	bl	8000d94 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e09a      	b.n	8001d10 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bda:	4b43      	ldr	r3, [pc, #268]	@ (8001ce8 <HAL_RCC_OscConfig+0x780>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1f0      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001be6:	4b40      	ldr	r3, [pc, #256]	@ (8001ce8 <HAL_RCC_OscConfig+0x780>)
 8001be8:	68da      	ldr	r2, [r3, #12]
 8001bea:	4b40      	ldr	r3, [pc, #256]	@ (8001cec <HAL_RCC_OscConfig+0x784>)
 8001bec:	4013      	ands	r3, r2
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001bf6:	3a01      	subs	r2, #1
 8001bf8:	0112      	lsls	r2, r2, #4
 8001bfa:	4311      	orrs	r1, r2
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001c00:	0212      	lsls	r2, r2, #8
 8001c02:	4311      	orrs	r1, r2
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001c08:	0852      	lsrs	r2, r2, #1
 8001c0a:	3a01      	subs	r2, #1
 8001c0c:	0552      	lsls	r2, r2, #21
 8001c0e:	4311      	orrs	r1, r2
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001c14:	0852      	lsrs	r2, r2, #1
 8001c16:	3a01      	subs	r2, #1
 8001c18:	0652      	lsls	r2, r2, #25
 8001c1a:	4311      	orrs	r1, r2
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001c20:	0912      	lsrs	r2, r2, #4
 8001c22:	0452      	lsls	r2, r2, #17
 8001c24:	430a      	orrs	r2, r1
 8001c26:	4930      	ldr	r1, [pc, #192]	@ (8001ce8 <HAL_RCC_OscConfig+0x780>)
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c2c:	4b2e      	ldr	r3, [pc, #184]	@ (8001ce8 <HAL_RCC_OscConfig+0x780>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a2d      	ldr	r2, [pc, #180]	@ (8001ce8 <HAL_RCC_OscConfig+0x780>)
 8001c32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c36:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c38:	4b2b      	ldr	r3, [pc, #172]	@ (8001ce8 <HAL_RCC_OscConfig+0x780>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	4a2a      	ldr	r2, [pc, #168]	@ (8001ce8 <HAL_RCC_OscConfig+0x780>)
 8001c3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c42:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c44:	f7ff f8a6 	bl	8000d94 <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c4c:	f7ff f8a2 	bl	8000d94 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e058      	b.n	8001d10 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c5e:	4b22      	ldr	r3, [pc, #136]	@ (8001ce8 <HAL_RCC_OscConfig+0x780>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d0f0      	beq.n	8001c4c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c6a:	e050      	b.n	8001d0e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e04f      	b.n	8001d10 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c70:	4b1d      	ldr	r3, [pc, #116]	@ (8001ce8 <HAL_RCC_OscConfig+0x780>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d148      	bne.n	8001d0e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ce8 <HAL_RCC_OscConfig+0x780>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a19      	ldr	r2, [pc, #100]	@ (8001ce8 <HAL_RCC_OscConfig+0x780>)
 8001c82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c86:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c88:	4b17      	ldr	r3, [pc, #92]	@ (8001ce8 <HAL_RCC_OscConfig+0x780>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	4a16      	ldr	r2, [pc, #88]	@ (8001ce8 <HAL_RCC_OscConfig+0x780>)
 8001c8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c92:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c94:	f7ff f87e 	bl	8000d94 <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c9c:	f7ff f87a 	bl	8000d94 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e030      	b.n	8001d10 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cae:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce8 <HAL_RCC_OscConfig+0x780>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d0f0      	beq.n	8001c9c <HAL_RCC_OscConfig+0x734>
 8001cba:	e028      	b.n	8001d0e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	2b0c      	cmp	r3, #12
 8001cc0:	d023      	beq.n	8001d0a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cc2:	4b09      	ldr	r3, [pc, #36]	@ (8001ce8 <HAL_RCC_OscConfig+0x780>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a08      	ldr	r2, [pc, #32]	@ (8001ce8 <HAL_RCC_OscConfig+0x780>)
 8001cc8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ccc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cce:	f7ff f861 	bl	8000d94 <HAL_GetTick>
 8001cd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cd4:	e00c      	b.n	8001cf0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd6:	f7ff f85d 	bl	8000d94 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d905      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e013      	b.n	8001d10 <HAL_RCC_OscConfig+0x7a8>
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cf0:	4b09      	ldr	r3, [pc, #36]	@ (8001d18 <HAL_RCC_OscConfig+0x7b0>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d1ec      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001cfc:	4b06      	ldr	r3, [pc, #24]	@ (8001d18 <HAL_RCC_OscConfig+0x7b0>)
 8001cfe:	68da      	ldr	r2, [r3, #12]
 8001d00:	4905      	ldr	r1, [pc, #20]	@ (8001d18 <HAL_RCC_OscConfig+0x7b0>)
 8001d02:	4b06      	ldr	r3, [pc, #24]	@ (8001d1c <HAL_RCC_OscConfig+0x7b4>)
 8001d04:	4013      	ands	r3, r2
 8001d06:	60cb      	str	r3, [r1, #12]
 8001d08:	e001      	b.n	8001d0e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e000      	b.n	8001d10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3720      	adds	r7, #32
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	feeefffc 	.word	0xfeeefffc

08001d20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d101      	bne.n	8001d34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e0e7      	b.n	8001f04 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d34:	4b75      	ldr	r3, [pc, #468]	@ (8001f0c <HAL_RCC_ClockConfig+0x1ec>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d910      	bls.n	8001d64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d42:	4b72      	ldr	r3, [pc, #456]	@ (8001f0c <HAL_RCC_ClockConfig+0x1ec>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f023 0207 	bic.w	r2, r3, #7
 8001d4a:	4970      	ldr	r1, [pc, #448]	@ (8001f0c <HAL_RCC_ClockConfig+0x1ec>)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d52:	4b6e      	ldr	r3, [pc, #440]	@ (8001f0c <HAL_RCC_ClockConfig+0x1ec>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	683a      	ldr	r2, [r7, #0]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d001      	beq.n	8001d64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e0cf      	b.n	8001f04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d010      	beq.n	8001d92 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	4b66      	ldr	r3, [pc, #408]	@ (8001f10 <HAL_RCC_ClockConfig+0x1f0>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d908      	bls.n	8001d92 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d80:	4b63      	ldr	r3, [pc, #396]	@ (8001f10 <HAL_RCC_ClockConfig+0x1f0>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	4960      	ldr	r1, [pc, #384]	@ (8001f10 <HAL_RCC_ClockConfig+0x1f0>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d04c      	beq.n	8001e38 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	2b03      	cmp	r3, #3
 8001da4:	d107      	bne.n	8001db6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001da6:	4b5a      	ldr	r3, [pc, #360]	@ (8001f10 <HAL_RCC_ClockConfig+0x1f0>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d121      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e0a6      	b.n	8001f04 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d107      	bne.n	8001dce <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dbe:	4b54      	ldr	r3, [pc, #336]	@ (8001f10 <HAL_RCC_ClockConfig+0x1f0>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d115      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e09a      	b.n	8001f04 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d107      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dd6:	4b4e      	ldr	r3, [pc, #312]	@ (8001f10 <HAL_RCC_ClockConfig+0x1f0>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d109      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e08e      	b.n	8001f04 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001de6:	4b4a      	ldr	r3, [pc, #296]	@ (8001f10 <HAL_RCC_ClockConfig+0x1f0>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e086      	b.n	8001f04 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001df6:	4b46      	ldr	r3, [pc, #280]	@ (8001f10 <HAL_RCC_ClockConfig+0x1f0>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f023 0203 	bic.w	r2, r3, #3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	4943      	ldr	r1, [pc, #268]	@ (8001f10 <HAL_RCC_ClockConfig+0x1f0>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e08:	f7fe ffc4 	bl	8000d94 <HAL_GetTick>
 8001e0c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e0e:	e00a      	b.n	8001e26 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e10:	f7fe ffc0 	bl	8000d94 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e06e      	b.n	8001f04 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e26:	4b3a      	ldr	r3, [pc, #232]	@ (8001f10 <HAL_RCC_ClockConfig+0x1f0>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 020c 	and.w	r2, r3, #12
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d1eb      	bne.n	8001e10 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d010      	beq.n	8001e66 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689a      	ldr	r2, [r3, #8]
 8001e48:	4b31      	ldr	r3, [pc, #196]	@ (8001f10 <HAL_RCC_ClockConfig+0x1f0>)
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d208      	bcs.n	8001e66 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e54:	4b2e      	ldr	r3, [pc, #184]	@ (8001f10 <HAL_RCC_ClockConfig+0x1f0>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	492b      	ldr	r1, [pc, #172]	@ (8001f10 <HAL_RCC_ClockConfig+0x1f0>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e66:	4b29      	ldr	r3, [pc, #164]	@ (8001f0c <HAL_RCC_ClockConfig+0x1ec>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d210      	bcs.n	8001e96 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e74:	4b25      	ldr	r3, [pc, #148]	@ (8001f0c <HAL_RCC_ClockConfig+0x1ec>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f023 0207 	bic.w	r2, r3, #7
 8001e7c:	4923      	ldr	r1, [pc, #140]	@ (8001f0c <HAL_RCC_ClockConfig+0x1ec>)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e84:	4b21      	ldr	r3, [pc, #132]	@ (8001f0c <HAL_RCC_ClockConfig+0x1ec>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d001      	beq.n	8001e96 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e036      	b.n	8001f04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0304 	and.w	r3, r3, #4
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d008      	beq.n	8001eb4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ea2:	4b1b      	ldr	r3, [pc, #108]	@ (8001f10 <HAL_RCC_ClockConfig+0x1f0>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	4918      	ldr	r1, [pc, #96]	@ (8001f10 <HAL_RCC_ClockConfig+0x1f0>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0308 	and.w	r3, r3, #8
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d009      	beq.n	8001ed4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ec0:	4b13      	ldr	r3, [pc, #76]	@ (8001f10 <HAL_RCC_ClockConfig+0x1f0>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	4910      	ldr	r1, [pc, #64]	@ (8001f10 <HAL_RCC_ClockConfig+0x1f0>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ed4:	f000 f824 	bl	8001f20 <HAL_RCC_GetSysClockFreq>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	4b0d      	ldr	r3, [pc, #52]	@ (8001f10 <HAL_RCC_ClockConfig+0x1f0>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	091b      	lsrs	r3, r3, #4
 8001ee0:	f003 030f 	and.w	r3, r3, #15
 8001ee4:	490b      	ldr	r1, [pc, #44]	@ (8001f14 <HAL_RCC_ClockConfig+0x1f4>)
 8001ee6:	5ccb      	ldrb	r3, [r1, r3]
 8001ee8:	f003 031f 	and.w	r3, r3, #31
 8001eec:	fa22 f303 	lsr.w	r3, r2, r3
 8001ef0:	4a09      	ldr	r2, [pc, #36]	@ (8001f18 <HAL_RCC_ClockConfig+0x1f8>)
 8001ef2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ef4:	4b09      	ldr	r3, [pc, #36]	@ (8001f1c <HAL_RCC_ClockConfig+0x1fc>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7fe fefb 	bl	8000cf4 <HAL_InitTick>
 8001efe:	4603      	mov	r3, r0
 8001f00:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f02:	7afb      	ldrb	r3, [r7, #11]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3710      	adds	r7, #16
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40022000 	.word	0x40022000
 8001f10:	40021000 	.word	0x40021000
 8001f14:	08005348 	.word	0x08005348
 8001f18:	20000020 	.word	0x20000020
 8001f1c:	20000024 	.word	0x20000024

08001f20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b089      	sub	sp, #36	@ 0x24
 8001f24:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f26:	2300      	movs	r3, #0
 8001f28:	61fb      	str	r3, [r7, #28]
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f2e:	4b3e      	ldr	r3, [pc, #248]	@ (8002028 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f003 030c 	and.w	r3, r3, #12
 8001f36:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f38:	4b3b      	ldr	r3, [pc, #236]	@ (8002028 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	f003 0303 	and.w	r3, r3, #3
 8001f40:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d005      	beq.n	8001f54 <HAL_RCC_GetSysClockFreq+0x34>
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	2b0c      	cmp	r3, #12
 8001f4c:	d121      	bne.n	8001f92 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d11e      	bne.n	8001f92 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f54:	4b34      	ldr	r3, [pc, #208]	@ (8002028 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0308 	and.w	r3, r3, #8
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d107      	bne.n	8001f70 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f60:	4b31      	ldr	r3, [pc, #196]	@ (8002028 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f66:	0a1b      	lsrs	r3, r3, #8
 8001f68:	f003 030f 	and.w	r3, r3, #15
 8001f6c:	61fb      	str	r3, [r7, #28]
 8001f6e:	e005      	b.n	8001f7c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f70:	4b2d      	ldr	r3, [pc, #180]	@ (8002028 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	091b      	lsrs	r3, r3, #4
 8001f76:	f003 030f 	and.w	r3, r3, #15
 8001f7a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f7c:	4a2b      	ldr	r2, [pc, #172]	@ (800202c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f84:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d10d      	bne.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f90:	e00a      	b.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	2b04      	cmp	r3, #4
 8001f96:	d102      	bne.n	8001f9e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f98:	4b25      	ldr	r3, [pc, #148]	@ (8002030 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f9a:	61bb      	str	r3, [r7, #24]
 8001f9c:	e004      	b.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	2b08      	cmp	r3, #8
 8001fa2:	d101      	bne.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fa4:	4b23      	ldr	r3, [pc, #140]	@ (8002034 <HAL_RCC_GetSysClockFreq+0x114>)
 8001fa6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	2b0c      	cmp	r3, #12
 8001fac:	d134      	bne.n	8002018 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fae:	4b1e      	ldr	r3, [pc, #120]	@ (8002028 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	f003 0303 	and.w	r3, r3, #3
 8001fb6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d003      	beq.n	8001fc6 <HAL_RCC_GetSysClockFreq+0xa6>
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	2b03      	cmp	r3, #3
 8001fc2:	d003      	beq.n	8001fcc <HAL_RCC_GetSysClockFreq+0xac>
 8001fc4:	e005      	b.n	8001fd2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001fc6:	4b1a      	ldr	r3, [pc, #104]	@ (8002030 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fc8:	617b      	str	r3, [r7, #20]
      break;
 8001fca:	e005      	b.n	8001fd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001fcc:	4b19      	ldr	r3, [pc, #100]	@ (8002034 <HAL_RCC_GetSysClockFreq+0x114>)
 8001fce:	617b      	str	r3, [r7, #20]
      break;
 8001fd0:	e002      	b.n	8001fd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	617b      	str	r3, [r7, #20]
      break;
 8001fd6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fd8:	4b13      	ldr	r3, [pc, #76]	@ (8002028 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	091b      	lsrs	r3, r3, #4
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001fe6:	4b10      	ldr	r3, [pc, #64]	@ (8002028 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	0a1b      	lsrs	r3, r3, #8
 8001fec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	fb03 f202 	mul.w	r2, r3, r2
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ffc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8002028 <HAL_RCC_GetSysClockFreq+0x108>)
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	0e5b      	lsrs	r3, r3, #25
 8002004:	f003 0303 	and.w	r3, r3, #3
 8002008:	3301      	adds	r3, #1
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	fbb2 f3f3 	udiv	r3, r2, r3
 8002016:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002018:	69bb      	ldr	r3, [r7, #24]
}
 800201a:	4618      	mov	r0, r3
 800201c:	3724      	adds	r7, #36	@ 0x24
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	40021000 	.word	0x40021000
 800202c:	08005360 	.word	0x08005360
 8002030:	00f42400 	.word	0x00f42400
 8002034:	007a1200 	.word	0x007a1200

08002038 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800203c:	4b03      	ldr	r3, [pc, #12]	@ (800204c <HAL_RCC_GetHCLKFreq+0x14>)
 800203e:	681b      	ldr	r3, [r3, #0]
}
 8002040:	4618      	mov	r0, r3
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	20000020 	.word	0x20000020

08002050 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002054:	f7ff fff0 	bl	8002038 <HAL_RCC_GetHCLKFreq>
 8002058:	4602      	mov	r2, r0
 800205a:	4b06      	ldr	r3, [pc, #24]	@ (8002074 <HAL_RCC_GetPCLK1Freq+0x24>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	0a1b      	lsrs	r3, r3, #8
 8002060:	f003 0307 	and.w	r3, r3, #7
 8002064:	4904      	ldr	r1, [pc, #16]	@ (8002078 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002066:	5ccb      	ldrb	r3, [r1, r3]
 8002068:	f003 031f 	and.w	r3, r3, #31
 800206c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002070:	4618      	mov	r0, r3
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40021000 	.word	0x40021000
 8002078:	08005358 	.word	0x08005358

0800207c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002080:	f7ff ffda 	bl	8002038 <HAL_RCC_GetHCLKFreq>
 8002084:	4602      	mov	r2, r0
 8002086:	4b06      	ldr	r3, [pc, #24]	@ (80020a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	0adb      	lsrs	r3, r3, #11
 800208c:	f003 0307 	and.w	r3, r3, #7
 8002090:	4904      	ldr	r1, [pc, #16]	@ (80020a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002092:	5ccb      	ldrb	r3, [r1, r3]
 8002094:	f003 031f 	and.w	r3, r3, #31
 8002098:	fa22 f303 	lsr.w	r3, r2, r3
}
 800209c:	4618      	mov	r0, r3
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40021000 	.word	0x40021000
 80020a4:	08005358 	.word	0x08005358

080020a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80020b0:	2300      	movs	r3, #0
 80020b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80020b4:	4b2a      	ldr	r3, [pc, #168]	@ (8002160 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80020c0:	f7ff f9ee 	bl	80014a0 <HAL_PWREx_GetVoltageRange>
 80020c4:	6178      	str	r0, [r7, #20]
 80020c6:	e014      	b.n	80020f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020c8:	4b25      	ldr	r3, [pc, #148]	@ (8002160 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020cc:	4a24      	ldr	r2, [pc, #144]	@ (8002160 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80020d4:	4b22      	ldr	r3, [pc, #136]	@ (8002160 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020dc:	60fb      	str	r3, [r7, #12]
 80020de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80020e0:	f7ff f9de 	bl	80014a0 <HAL_PWREx_GetVoltageRange>
 80020e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80020e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002160 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ea:	4a1d      	ldr	r2, [pc, #116]	@ (8002160 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020f0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020f8:	d10b      	bne.n	8002112 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2b80      	cmp	r3, #128	@ 0x80
 80020fe:	d919      	bls.n	8002134 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2ba0      	cmp	r3, #160	@ 0xa0
 8002104:	d902      	bls.n	800210c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002106:	2302      	movs	r3, #2
 8002108:	613b      	str	r3, [r7, #16]
 800210a:	e013      	b.n	8002134 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800210c:	2301      	movs	r3, #1
 800210e:	613b      	str	r3, [r7, #16]
 8002110:	e010      	b.n	8002134 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2b80      	cmp	r3, #128	@ 0x80
 8002116:	d902      	bls.n	800211e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002118:	2303      	movs	r3, #3
 800211a:	613b      	str	r3, [r7, #16]
 800211c:	e00a      	b.n	8002134 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2b80      	cmp	r3, #128	@ 0x80
 8002122:	d102      	bne.n	800212a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002124:	2302      	movs	r3, #2
 8002126:	613b      	str	r3, [r7, #16]
 8002128:	e004      	b.n	8002134 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2b70      	cmp	r3, #112	@ 0x70
 800212e:	d101      	bne.n	8002134 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002130:	2301      	movs	r3, #1
 8002132:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002134:	4b0b      	ldr	r3, [pc, #44]	@ (8002164 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f023 0207 	bic.w	r2, r3, #7
 800213c:	4909      	ldr	r1, [pc, #36]	@ (8002164 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	4313      	orrs	r3, r2
 8002142:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002144:	4b07      	ldr	r3, [pc, #28]	@ (8002164 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0307 	and.w	r3, r3, #7
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	429a      	cmp	r2, r3
 8002150:	d001      	beq.n	8002156 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e000      	b.n	8002158 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3718      	adds	r7, #24
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40021000 	.word	0x40021000
 8002164:	40022000 	.word	0x40022000

08002168 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002170:	2300      	movs	r3, #0
 8002172:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002174:	2300      	movs	r3, #0
 8002176:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002180:	2b00      	cmp	r3, #0
 8002182:	d041      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002188:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800218c:	d02a      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800218e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002192:	d824      	bhi.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002194:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002198:	d008      	beq.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x44>
 800219a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800219e:	d81e      	bhi.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x76>
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d00a      	beq.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x52>
 80021a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021a8:	d010      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80021aa:	e018      	b.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80021ac:	4b86      	ldr	r3, [pc, #536]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	4a85      	ldr	r2, [pc, #532]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021b6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021b8:	e015      	b.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	3304      	adds	r3, #4
 80021be:	2100      	movs	r1, #0
 80021c0:	4618      	mov	r0, r3
 80021c2:	f000 facb 	bl	800275c <RCCEx_PLLSAI1_Config>
 80021c6:	4603      	mov	r3, r0
 80021c8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021ca:	e00c      	b.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3320      	adds	r3, #32
 80021d0:	2100      	movs	r1, #0
 80021d2:	4618      	mov	r0, r3
 80021d4:	f000 fbb6 	bl	8002944 <RCCEx_PLLSAI2_Config>
 80021d8:	4603      	mov	r3, r0
 80021da:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021dc:	e003      	b.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	74fb      	strb	r3, [r7, #19]
      break;
 80021e2:	e000      	b.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80021e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021e6:	7cfb      	ldrb	r3, [r7, #19]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d10b      	bne.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021ec:	4b76      	ldr	r3, [pc, #472]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021f2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80021fa:	4973      	ldr	r1, [pc, #460]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002202:	e001      	b.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002204:	7cfb      	ldrb	r3, [r7, #19]
 8002206:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d041      	beq.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002218:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800221c:	d02a      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800221e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002222:	d824      	bhi.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002224:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002228:	d008      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800222a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800222e:	d81e      	bhi.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002230:	2b00      	cmp	r3, #0
 8002232:	d00a      	beq.n	800224a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002234:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002238:	d010      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800223a:	e018      	b.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800223c:	4b62      	ldr	r3, [pc, #392]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	4a61      	ldr	r2, [pc, #388]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002242:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002246:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002248:	e015      	b.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	3304      	adds	r3, #4
 800224e:	2100      	movs	r1, #0
 8002250:	4618      	mov	r0, r3
 8002252:	f000 fa83 	bl	800275c <RCCEx_PLLSAI1_Config>
 8002256:	4603      	mov	r3, r0
 8002258:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800225a:	e00c      	b.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3320      	adds	r3, #32
 8002260:	2100      	movs	r1, #0
 8002262:	4618      	mov	r0, r3
 8002264:	f000 fb6e 	bl	8002944 <RCCEx_PLLSAI2_Config>
 8002268:	4603      	mov	r3, r0
 800226a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800226c:	e003      	b.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	74fb      	strb	r3, [r7, #19]
      break;
 8002272:	e000      	b.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002274:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002276:	7cfb      	ldrb	r3, [r7, #19]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d10b      	bne.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800227c:	4b52      	ldr	r3, [pc, #328]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800227e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002282:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800228a:	494f      	ldr	r1, [pc, #316]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800228c:	4313      	orrs	r3, r2
 800228e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002292:	e001      	b.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002294:	7cfb      	ldrb	r3, [r7, #19]
 8002296:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f000 80a0 	beq.w	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022a6:	2300      	movs	r3, #0
 80022a8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022aa:	4b47      	ldr	r3, [pc, #284]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x152>
 80022b6:	2301      	movs	r3, #1
 80022b8:	e000      	b.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80022ba:	2300      	movs	r3, #0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00d      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022c0:	4b41      	ldr	r3, [pc, #260]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c4:	4a40      	ldr	r2, [pc, #256]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80022cc:	4b3e      	ldr	r3, [pc, #248]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022d4:	60bb      	str	r3, [r7, #8]
 80022d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022d8:	2301      	movs	r3, #1
 80022da:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022dc:	4b3b      	ldr	r3, [pc, #236]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a3a      	ldr	r2, [pc, #232]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022e8:	f7fe fd54 	bl	8000d94 <HAL_GetTick>
 80022ec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022ee:	e009      	b.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022f0:	f7fe fd50 	bl	8000d94 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d902      	bls.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	74fb      	strb	r3, [r7, #19]
        break;
 8002302:	e005      	b.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002304:	4b31      	ldr	r3, [pc, #196]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800230c:	2b00      	cmp	r3, #0
 800230e:	d0ef      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002310:	7cfb      	ldrb	r3, [r7, #19]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d15c      	bne.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002316:	4b2c      	ldr	r3, [pc, #176]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002318:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800231c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002320:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d01f      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	429a      	cmp	r2, r3
 8002332:	d019      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002334:	4b24      	ldr	r3, [pc, #144]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800233a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800233e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002340:	4b21      	ldr	r3, [pc, #132]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002342:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002346:	4a20      	ldr	r2, [pc, #128]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002348:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800234c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002350:	4b1d      	ldr	r3, [pc, #116]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002352:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002356:	4a1c      	ldr	r2, [pc, #112]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002358:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800235c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002360:	4a19      	ldr	r2, [pc, #100]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b00      	cmp	r3, #0
 8002370:	d016      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002372:	f7fe fd0f 	bl	8000d94 <HAL_GetTick>
 8002376:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002378:	e00b      	b.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800237a:	f7fe fd0b 	bl	8000d94 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002388:	4293      	cmp	r3, r2
 800238a:	d902      	bls.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	74fb      	strb	r3, [r7, #19]
            break;
 8002390:	e006      	b.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002392:	4b0d      	ldr	r3, [pc, #52]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002394:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0ec      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80023a0:	7cfb      	ldrb	r3, [r7, #19]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10c      	bne.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023a6:	4b08      	ldr	r3, [pc, #32]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023b6:	4904      	ldr	r1, [pc, #16]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80023be:	e009      	b.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023c0:	7cfb      	ldrb	r3, [r7, #19]
 80023c2:	74bb      	strb	r3, [r7, #18]
 80023c4:	e006      	b.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80023c6:	bf00      	nop
 80023c8:	40021000 	.word	0x40021000
 80023cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023d0:	7cfb      	ldrb	r3, [r7, #19]
 80023d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023d4:	7c7b      	ldrb	r3, [r7, #17]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d105      	bne.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023da:	4b9e      	ldr	r3, [pc, #632]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023de:	4a9d      	ldr	r2, [pc, #628]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023e4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d00a      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023f2:	4b98      	ldr	r3, [pc, #608]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023f8:	f023 0203 	bic.w	r2, r3, #3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002400:	4994      	ldr	r1, [pc, #592]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002402:	4313      	orrs	r3, r2
 8002404:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00a      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002414:	4b8f      	ldr	r3, [pc, #572]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002416:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800241a:	f023 020c 	bic.w	r2, r3, #12
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002422:	498c      	ldr	r1, [pc, #560]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002424:	4313      	orrs	r3, r2
 8002426:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0304 	and.w	r3, r3, #4
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00a      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002436:	4b87      	ldr	r3, [pc, #540]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002438:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800243c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002444:	4983      	ldr	r1, [pc, #524]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002446:	4313      	orrs	r3, r2
 8002448:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0308 	and.w	r3, r3, #8
 8002454:	2b00      	cmp	r3, #0
 8002456:	d00a      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002458:	4b7e      	ldr	r3, [pc, #504]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800245a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800245e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002466:	497b      	ldr	r1, [pc, #492]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002468:	4313      	orrs	r3, r2
 800246a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0310 	and.w	r3, r3, #16
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00a      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800247a:	4b76      	ldr	r3, [pc, #472]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800247c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002480:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002488:	4972      	ldr	r1, [pc, #456]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800248a:	4313      	orrs	r3, r2
 800248c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0320 	and.w	r3, r3, #32
 8002498:	2b00      	cmp	r3, #0
 800249a:	d00a      	beq.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800249c:	4b6d      	ldr	r3, [pc, #436]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800249e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024a2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024aa:	496a      	ldr	r1, [pc, #424]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00a      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024be:	4b65      	ldr	r3, [pc, #404]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024c4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024cc:	4961      	ldr	r1, [pc, #388]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d00a      	beq.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80024e0:	4b5c      	ldr	r3, [pc, #368]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024ee:	4959      	ldr	r1, [pc, #356]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00a      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002502:	4b54      	ldr	r3, [pc, #336]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002504:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002508:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002510:	4950      	ldr	r1, [pc, #320]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002512:	4313      	orrs	r3, r2
 8002514:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00a      	beq.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002524:	4b4b      	ldr	r3, [pc, #300]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800252a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002532:	4948      	ldr	r1, [pc, #288]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002534:	4313      	orrs	r3, r2
 8002536:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00a      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002546:	4b43      	ldr	r3, [pc, #268]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800254c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002554:	493f      	ldr	r1, [pc, #252]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002556:	4313      	orrs	r3, r2
 8002558:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d028      	beq.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002568:	4b3a      	ldr	r3, [pc, #232]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800256a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800256e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002576:	4937      	ldr	r1, [pc, #220]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002578:	4313      	orrs	r3, r2
 800257a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002582:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002586:	d106      	bne.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002588:	4b32      	ldr	r3, [pc, #200]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	4a31      	ldr	r2, [pc, #196]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800258e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002592:	60d3      	str	r3, [r2, #12]
 8002594:	e011      	b.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800259a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800259e:	d10c      	bne.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3304      	adds	r3, #4
 80025a4:	2101      	movs	r1, #1
 80025a6:	4618      	mov	r0, r3
 80025a8:	f000 f8d8 	bl	800275c <RCCEx_PLLSAI1_Config>
 80025ac:	4603      	mov	r3, r0
 80025ae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80025b0:	7cfb      	ldrb	r3, [r7, #19]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80025b6:	7cfb      	ldrb	r3, [r7, #19]
 80025b8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d028      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80025c6:	4b23      	ldr	r3, [pc, #140]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025cc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025d4:	491f      	ldr	r1, [pc, #124]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80025e4:	d106      	bne.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	4a1a      	ldr	r2, [pc, #104]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80025f0:	60d3      	str	r3, [r2, #12]
 80025f2:	e011      	b.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80025fc:	d10c      	bne.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	3304      	adds	r3, #4
 8002602:	2101      	movs	r1, #1
 8002604:	4618      	mov	r0, r3
 8002606:	f000 f8a9 	bl	800275c <RCCEx_PLLSAI1_Config>
 800260a:	4603      	mov	r3, r0
 800260c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800260e:	7cfb      	ldrb	r3, [r7, #19]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002614:	7cfb      	ldrb	r3, [r7, #19]
 8002616:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d02b      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002624:	4b0b      	ldr	r3, [pc, #44]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800262a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002632:	4908      	ldr	r1, [pc, #32]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002634:	4313      	orrs	r3, r2
 8002636:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800263e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002642:	d109      	bne.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002644:	4b03      	ldr	r3, [pc, #12]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	4a02      	ldr	r2, [pc, #8]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800264a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800264e:	60d3      	str	r3, [r2, #12]
 8002650:	e014      	b.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002652:	bf00      	nop
 8002654:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800265c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002660:	d10c      	bne.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	3304      	adds	r3, #4
 8002666:	2101      	movs	r1, #1
 8002668:	4618      	mov	r0, r3
 800266a:	f000 f877 	bl	800275c <RCCEx_PLLSAI1_Config>
 800266e:	4603      	mov	r3, r0
 8002670:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002672:	7cfb      	ldrb	r3, [r7, #19]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002678:	7cfb      	ldrb	r3, [r7, #19]
 800267a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d02f      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002688:	4b2b      	ldr	r3, [pc, #172]	@ (8002738 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800268a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800268e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002696:	4928      	ldr	r1, [pc, #160]	@ (8002738 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002698:	4313      	orrs	r3, r2
 800269a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80026a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80026a6:	d10d      	bne.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3304      	adds	r3, #4
 80026ac:	2102      	movs	r1, #2
 80026ae:	4618      	mov	r0, r3
 80026b0:	f000 f854 	bl	800275c <RCCEx_PLLSAI1_Config>
 80026b4:	4603      	mov	r3, r0
 80026b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026b8:	7cfb      	ldrb	r3, [r7, #19]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d014      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80026be:	7cfb      	ldrb	r3, [r7, #19]
 80026c0:	74bb      	strb	r3, [r7, #18]
 80026c2:	e011      	b.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80026c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80026cc:	d10c      	bne.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	3320      	adds	r3, #32
 80026d2:	2102      	movs	r1, #2
 80026d4:	4618      	mov	r0, r3
 80026d6:	f000 f935 	bl	8002944 <RCCEx_PLLSAI2_Config>
 80026da:	4603      	mov	r3, r0
 80026dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026de:	7cfb      	ldrb	r3, [r7, #19]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80026e4:	7cfb      	ldrb	r3, [r7, #19]
 80026e6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00a      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80026f4:	4b10      	ldr	r3, [pc, #64]	@ (8002738 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026fa:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002702:	490d      	ldr	r1, [pc, #52]	@ (8002738 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002704:	4313      	orrs	r3, r2
 8002706:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00b      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002716:	4b08      	ldr	r3, [pc, #32]	@ (8002738 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002718:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800271c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002726:	4904      	ldr	r1, [pc, #16]	@ (8002738 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002728:	4313      	orrs	r3, r2
 800272a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800272e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002730:	4618      	mov	r0, r3
 8002732:	3718      	adds	r7, #24
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40021000 	.word	0x40021000

0800273c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002740:	4b05      	ldr	r3, [pc, #20]	@ (8002758 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a04      	ldr	r2, [pc, #16]	@ (8002758 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002746:	f043 0304 	orr.w	r3, r3, #4
 800274a:	6013      	str	r3, [r2, #0]
}
 800274c:	bf00      	nop
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	40021000 	.word	0x40021000

0800275c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002766:	2300      	movs	r3, #0
 8002768:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800276a:	4b75      	ldr	r3, [pc, #468]	@ (8002940 <RCCEx_PLLSAI1_Config+0x1e4>)
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	f003 0303 	and.w	r3, r3, #3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d018      	beq.n	80027a8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002776:	4b72      	ldr	r3, [pc, #456]	@ (8002940 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	f003 0203 	and.w	r2, r3, #3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	429a      	cmp	r2, r3
 8002784:	d10d      	bne.n	80027a2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
       ||
 800278a:	2b00      	cmp	r3, #0
 800278c:	d009      	beq.n	80027a2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800278e:	4b6c      	ldr	r3, [pc, #432]	@ (8002940 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	091b      	lsrs	r3, r3, #4
 8002794:	f003 0307 	and.w	r3, r3, #7
 8002798:	1c5a      	adds	r2, r3, #1
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
       ||
 800279e:	429a      	cmp	r2, r3
 80027a0:	d047      	beq.n	8002832 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	73fb      	strb	r3, [r7, #15]
 80027a6:	e044      	b.n	8002832 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2b03      	cmp	r3, #3
 80027ae:	d018      	beq.n	80027e2 <RCCEx_PLLSAI1_Config+0x86>
 80027b0:	2b03      	cmp	r3, #3
 80027b2:	d825      	bhi.n	8002800 <RCCEx_PLLSAI1_Config+0xa4>
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d002      	beq.n	80027be <RCCEx_PLLSAI1_Config+0x62>
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d009      	beq.n	80027d0 <RCCEx_PLLSAI1_Config+0x74>
 80027bc:	e020      	b.n	8002800 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027be:	4b60      	ldr	r3, [pc, #384]	@ (8002940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d11d      	bne.n	8002806 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027ce:	e01a      	b.n	8002806 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027d0:	4b5b      	ldr	r3, [pc, #364]	@ (8002940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d116      	bne.n	800280a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027e0:	e013      	b.n	800280a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027e2:	4b57      	ldr	r3, [pc, #348]	@ (8002940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10f      	bne.n	800280e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027ee:	4b54      	ldr	r3, [pc, #336]	@ (8002940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d109      	bne.n	800280e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80027fe:	e006      	b.n	800280e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	73fb      	strb	r3, [r7, #15]
      break;
 8002804:	e004      	b.n	8002810 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002806:	bf00      	nop
 8002808:	e002      	b.n	8002810 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800280a:	bf00      	nop
 800280c:	e000      	b.n	8002810 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800280e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002810:	7bfb      	ldrb	r3, [r7, #15]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d10d      	bne.n	8002832 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002816:	4b4a      	ldr	r3, [pc, #296]	@ (8002940 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6819      	ldr	r1, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	3b01      	subs	r3, #1
 8002828:	011b      	lsls	r3, r3, #4
 800282a:	430b      	orrs	r3, r1
 800282c:	4944      	ldr	r1, [pc, #272]	@ (8002940 <RCCEx_PLLSAI1_Config+0x1e4>)
 800282e:	4313      	orrs	r3, r2
 8002830:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002832:	7bfb      	ldrb	r3, [r7, #15]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d17d      	bne.n	8002934 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002838:	4b41      	ldr	r3, [pc, #260]	@ (8002940 <RCCEx_PLLSAI1_Config+0x1e4>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a40      	ldr	r2, [pc, #256]	@ (8002940 <RCCEx_PLLSAI1_Config+0x1e4>)
 800283e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002842:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002844:	f7fe faa6 	bl	8000d94 <HAL_GetTick>
 8002848:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800284a:	e009      	b.n	8002860 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800284c:	f7fe faa2 	bl	8000d94 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d902      	bls.n	8002860 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	73fb      	strb	r3, [r7, #15]
        break;
 800285e:	e005      	b.n	800286c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002860:	4b37      	ldr	r3, [pc, #220]	@ (8002940 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1ef      	bne.n	800284c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800286c:	7bfb      	ldrb	r3, [r7, #15]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d160      	bne.n	8002934 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d111      	bne.n	800289c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002878:	4b31      	ldr	r3, [pc, #196]	@ (8002940 <RCCEx_PLLSAI1_Config+0x1e4>)
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002880:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	6892      	ldr	r2, [r2, #8]
 8002888:	0211      	lsls	r1, r2, #8
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	68d2      	ldr	r2, [r2, #12]
 800288e:	0912      	lsrs	r2, r2, #4
 8002890:	0452      	lsls	r2, r2, #17
 8002892:	430a      	orrs	r2, r1
 8002894:	492a      	ldr	r1, [pc, #168]	@ (8002940 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002896:	4313      	orrs	r3, r2
 8002898:	610b      	str	r3, [r1, #16]
 800289a:	e027      	b.n	80028ec <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d112      	bne.n	80028c8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028a2:	4b27      	ldr	r3, [pc, #156]	@ (8002940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80028aa:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	6892      	ldr	r2, [r2, #8]
 80028b2:	0211      	lsls	r1, r2, #8
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6912      	ldr	r2, [r2, #16]
 80028b8:	0852      	lsrs	r2, r2, #1
 80028ba:	3a01      	subs	r2, #1
 80028bc:	0552      	lsls	r2, r2, #21
 80028be:	430a      	orrs	r2, r1
 80028c0:	491f      	ldr	r1, [pc, #124]	@ (8002940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	610b      	str	r3, [r1, #16]
 80028c6:	e011      	b.n	80028ec <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80028d0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	6892      	ldr	r2, [r2, #8]
 80028d8:	0211      	lsls	r1, r2, #8
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	6952      	ldr	r2, [r2, #20]
 80028de:	0852      	lsrs	r2, r2, #1
 80028e0:	3a01      	subs	r2, #1
 80028e2:	0652      	lsls	r2, r2, #25
 80028e4:	430a      	orrs	r2, r1
 80028e6:	4916      	ldr	r1, [pc, #88]	@ (8002940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80028ec:	4b14      	ldr	r3, [pc, #80]	@ (8002940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a13      	ldr	r2, [pc, #76]	@ (8002940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80028f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f8:	f7fe fa4c 	bl	8000d94 <HAL_GetTick>
 80028fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028fe:	e009      	b.n	8002914 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002900:	f7fe fa48 	bl	8000d94 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d902      	bls.n	8002914 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	73fb      	strb	r3, [r7, #15]
          break;
 8002912:	e005      	b.n	8002920 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002914:	4b0a      	ldr	r3, [pc, #40]	@ (8002940 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d0ef      	beq.n	8002900 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002920:	7bfb      	ldrb	r3, [r7, #15]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d106      	bne.n	8002934 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002926:	4b06      	ldr	r3, [pc, #24]	@ (8002940 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002928:	691a      	ldr	r2, [r3, #16]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	4904      	ldr	r1, [pc, #16]	@ (8002940 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002930:	4313      	orrs	r3, r2
 8002932:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002934:	7bfb      	ldrb	r3, [r7, #15]
}
 8002936:	4618      	mov	r0, r3
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40021000 	.word	0x40021000

08002944 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800294e:	2300      	movs	r3, #0
 8002950:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002952:	4b6a      	ldr	r3, [pc, #424]	@ (8002afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	f003 0303 	and.w	r3, r3, #3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d018      	beq.n	8002990 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800295e:	4b67      	ldr	r3, [pc, #412]	@ (8002afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	f003 0203 	and.w	r2, r3, #3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	429a      	cmp	r2, r3
 800296c:	d10d      	bne.n	800298a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
       ||
 8002972:	2b00      	cmp	r3, #0
 8002974:	d009      	beq.n	800298a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002976:	4b61      	ldr	r3, [pc, #388]	@ (8002afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	091b      	lsrs	r3, r3, #4
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	1c5a      	adds	r2, r3, #1
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
       ||
 8002986:	429a      	cmp	r2, r3
 8002988:	d047      	beq.n	8002a1a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	73fb      	strb	r3, [r7, #15]
 800298e:	e044      	b.n	8002a1a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2b03      	cmp	r3, #3
 8002996:	d018      	beq.n	80029ca <RCCEx_PLLSAI2_Config+0x86>
 8002998:	2b03      	cmp	r3, #3
 800299a:	d825      	bhi.n	80029e8 <RCCEx_PLLSAI2_Config+0xa4>
 800299c:	2b01      	cmp	r3, #1
 800299e:	d002      	beq.n	80029a6 <RCCEx_PLLSAI2_Config+0x62>
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d009      	beq.n	80029b8 <RCCEx_PLLSAI2_Config+0x74>
 80029a4:	e020      	b.n	80029e8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029a6:	4b55      	ldr	r3, [pc, #340]	@ (8002afc <RCCEx_PLLSAI2_Config+0x1b8>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d11d      	bne.n	80029ee <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029b6:	e01a      	b.n	80029ee <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029b8:	4b50      	ldr	r3, [pc, #320]	@ (8002afc <RCCEx_PLLSAI2_Config+0x1b8>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d116      	bne.n	80029f2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029c8:	e013      	b.n	80029f2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029ca:	4b4c      	ldr	r3, [pc, #304]	@ (8002afc <RCCEx_PLLSAI2_Config+0x1b8>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10f      	bne.n	80029f6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029d6:	4b49      	ldr	r3, [pc, #292]	@ (8002afc <RCCEx_PLLSAI2_Config+0x1b8>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d109      	bne.n	80029f6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029e6:	e006      	b.n	80029f6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	73fb      	strb	r3, [r7, #15]
      break;
 80029ec:	e004      	b.n	80029f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029ee:	bf00      	nop
 80029f0:	e002      	b.n	80029f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029f2:	bf00      	nop
 80029f4:	e000      	b.n	80029f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80029f8:	7bfb      	ldrb	r3, [r7, #15]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10d      	bne.n	8002a1a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029fe:	4b3f      	ldr	r3, [pc, #252]	@ (8002afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6819      	ldr	r1, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	011b      	lsls	r3, r3, #4
 8002a12:	430b      	orrs	r3, r1
 8002a14:	4939      	ldr	r1, [pc, #228]	@ (8002afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a1a:	7bfb      	ldrb	r3, [r7, #15]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d167      	bne.n	8002af0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002a20:	4b36      	ldr	r3, [pc, #216]	@ (8002afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a35      	ldr	r2, [pc, #212]	@ (8002afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a2c:	f7fe f9b2 	bl	8000d94 <HAL_GetTick>
 8002a30:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a32:	e009      	b.n	8002a48 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a34:	f7fe f9ae 	bl	8000d94 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d902      	bls.n	8002a48 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	73fb      	strb	r3, [r7, #15]
        break;
 8002a46:	e005      	b.n	8002a54 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a48:	4b2c      	ldr	r3, [pc, #176]	@ (8002afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d1ef      	bne.n	8002a34 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a54:	7bfb      	ldrb	r3, [r7, #15]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d14a      	bne.n	8002af0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d111      	bne.n	8002a84 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a60:	4b26      	ldr	r3, [pc, #152]	@ (8002afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a62:	695b      	ldr	r3, [r3, #20]
 8002a64:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002a68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	6892      	ldr	r2, [r2, #8]
 8002a70:	0211      	lsls	r1, r2, #8
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	68d2      	ldr	r2, [r2, #12]
 8002a76:	0912      	lsrs	r2, r2, #4
 8002a78:	0452      	lsls	r2, r2, #17
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	491f      	ldr	r1, [pc, #124]	@ (8002afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	614b      	str	r3, [r1, #20]
 8002a82:	e011      	b.n	8002aa8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a84:	4b1d      	ldr	r3, [pc, #116]	@ (8002afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a86:	695b      	ldr	r3, [r3, #20]
 8002a88:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002a8c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	6892      	ldr	r2, [r2, #8]
 8002a94:	0211      	lsls	r1, r2, #8
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	6912      	ldr	r2, [r2, #16]
 8002a9a:	0852      	lsrs	r2, r2, #1
 8002a9c:	3a01      	subs	r2, #1
 8002a9e:	0652      	lsls	r2, r2, #25
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	4916      	ldr	r1, [pc, #88]	@ (8002afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002aa8:	4b14      	ldr	r3, [pc, #80]	@ (8002afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a13      	ldr	r2, [pc, #76]	@ (8002afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ab2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab4:	f7fe f96e 	bl	8000d94 <HAL_GetTick>
 8002ab8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002aba:	e009      	b.n	8002ad0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002abc:	f7fe f96a 	bl	8000d94 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d902      	bls.n	8002ad0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	73fb      	strb	r3, [r7, #15]
          break;
 8002ace:	e005      	b.n	8002adc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8002afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d0ef      	beq.n	8002abc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002adc:	7bfb      	ldrb	r3, [r7, #15]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d106      	bne.n	8002af0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002ae2:	4b06      	ldr	r3, [pc, #24]	@ (8002afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ae4:	695a      	ldr	r2, [r3, #20]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	4904      	ldr	r1, [pc, #16]	@ (8002afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	40021000 	.word	0x40021000

08002b00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e040      	b.n	8002b94 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d106      	bne.n	8002b28 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7fd ff48 	bl	80009b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2224      	movs	r2, #36	@ 0x24
 8002b2c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 0201 	bic.w	r2, r2, #1
 8002b3c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d002      	beq.n	8002b4c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 ff14 	bl	8003974 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 fc59 	bl	8003404 <UART_SetConfig>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d101      	bne.n	8002b5c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e01b      	b.n	8002b94 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	685a      	ldr	r2, [r3, #4]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002b6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689a      	ldr	r2, [r3, #8]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002b7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f042 0201 	orr.w	r2, r2, #1
 8002b8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 ff93 	bl	8003ab8 <UART_CheckIdleState>
 8002b92:	4603      	mov	r3, r0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3708      	adds	r7, #8
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b08a      	sub	sp, #40	@ 0x28
 8002ba0:	af02      	add	r7, sp, #8
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	603b      	str	r3, [r7, #0]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002bb0:	2b20      	cmp	r3, #32
 8002bb2:	d177      	bne.n	8002ca4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d002      	beq.n	8002bc0 <HAL_UART_Transmit+0x24>
 8002bba:	88fb      	ldrh	r3, [r7, #6]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d101      	bne.n	8002bc4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e070      	b.n	8002ca6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2221      	movs	r2, #33	@ 0x21
 8002bd0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002bd2:	f7fe f8df 	bl	8000d94 <HAL_GetTick>
 8002bd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	88fa      	ldrh	r2, [r7, #6]
 8002bdc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	88fa      	ldrh	r2, [r7, #6]
 8002be4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bf0:	d108      	bne.n	8002c04 <HAL_UART_Transmit+0x68>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d104      	bne.n	8002c04 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	61bb      	str	r3, [r7, #24]
 8002c02:	e003      	b.n	8002c0c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c0c:	e02f      	b.n	8002c6e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	9300      	str	r3, [sp, #0]
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	2200      	movs	r2, #0
 8002c16:	2180      	movs	r1, #128	@ 0x80
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	f000 fff5 	bl	8003c08 <UART_WaitOnFlagUntilTimeout>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d004      	beq.n	8002c2e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2220      	movs	r2, #32
 8002c28:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e03b      	b.n	8002ca6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d10b      	bne.n	8002c4c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	881a      	ldrh	r2, [r3, #0]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c40:	b292      	uxth	r2, r2
 8002c42:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	3302      	adds	r3, #2
 8002c48:	61bb      	str	r3, [r7, #24]
 8002c4a:	e007      	b.n	8002c5c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	781a      	ldrb	r2, [r3, #0]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	3b01      	subs	r3, #1
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1c9      	bne.n	8002c0e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	9300      	str	r3, [sp, #0]
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	2200      	movs	r2, #0
 8002c82:	2140      	movs	r1, #64	@ 0x40
 8002c84:	68f8      	ldr	r0, [r7, #12]
 8002c86:	f000 ffbf 	bl	8003c08 <UART_WaitOnFlagUntilTimeout>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d004      	beq.n	8002c9a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2220      	movs	r2, #32
 8002c94:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e005      	b.n	8002ca6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2220      	movs	r2, #32
 8002c9e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	e000      	b.n	8002ca6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002ca4:	2302      	movs	r3, #2
  }
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3720      	adds	r7, #32
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
	...

08002cb0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b08b      	sub	sp, #44	@ 0x2c
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002cc2:	2b20      	cmp	r3, #32
 8002cc4:	d147      	bne.n	8002d56 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d002      	beq.n	8002cd2 <HAL_UART_Transmit_IT+0x22>
 8002ccc:	88fb      	ldrh	r3, [r7, #6]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d101      	bne.n	8002cd6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e040      	b.n	8002d58 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	68ba      	ldr	r2, [r7, #8]
 8002cda:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	88fa      	ldrh	r2, [r7, #6]
 8002ce0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	88fa      	ldrh	r2, [r7, #6]
 8002ce8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2221      	movs	r2, #33	@ 0x21
 8002cfe:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d08:	d107      	bne.n	8002d1a <HAL_UART_Transmit_IT+0x6a>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d103      	bne.n	8002d1a <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	4a13      	ldr	r2, [pc, #76]	@ (8002d64 <HAL_UART_Transmit_IT+0xb4>)
 8002d16:	66da      	str	r2, [r3, #108]	@ 0x6c
 8002d18:	e002      	b.n	8002d20 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	4a12      	ldr	r2, [pc, #72]	@ (8002d68 <HAL_UART_Transmit_IT+0xb8>)
 8002d1e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	e853 3f00 	ldrex	r3, [r3]
 8002d2c:	613b      	str	r3, [r7, #16]
   return(result);
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d34:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3e:	623b      	str	r3, [r7, #32]
 8002d40:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d42:	69f9      	ldr	r1, [r7, #28]
 8002d44:	6a3a      	ldr	r2, [r7, #32]
 8002d46:	e841 2300 	strex	r3, r2, [r1]
 8002d4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1e6      	bne.n	8002d20 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8002d52:	2300      	movs	r3, #0
 8002d54:	e000      	b.n	8002d58 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8002d56:	2302      	movs	r3, #2
  }
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	372c      	adds	r7, #44	@ 0x2c
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	0800400f 	.word	0x0800400f
 8002d68:	08003f59 	.word	0x08003f59

08002d6c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b08a      	sub	sp, #40	@ 0x28
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	4613      	mov	r3, r2
 8002d78:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d80:	2b20      	cmp	r3, #32
 8002d82:	d137      	bne.n	8002df4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d002      	beq.n	8002d90 <HAL_UART_Receive_IT+0x24>
 8002d8a:	88fb      	ldrh	r3, [r7, #6]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d101      	bne.n	8002d94 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e030      	b.n	8002df6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a18      	ldr	r2, [pc, #96]	@ (8002e00 <HAL_UART_Receive_IT+0x94>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d01f      	beq.n	8002de4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d018      	beq.n	8002de4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	e853 3f00 	ldrex	r3, [r3]
 8002dbe:	613b      	str	r3, [r7, #16]
   return(result);
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002dc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	461a      	mov	r2, r3
 8002dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd0:	623b      	str	r3, [r7, #32]
 8002dd2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dd4:	69f9      	ldr	r1, [r7, #28]
 8002dd6:	6a3a      	ldr	r2, [r7, #32]
 8002dd8:	e841 2300 	strex	r3, r2, [r1]
 8002ddc:	61bb      	str	r3, [r7, #24]
   return(result);
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1e6      	bne.n	8002db2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002de4:	88fb      	ldrh	r3, [r7, #6]
 8002de6:	461a      	mov	r2, r3
 8002de8:	68b9      	ldr	r1, [r7, #8]
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f000 ff74 	bl	8003cd8 <UART_Start_Receive_IT>
 8002df0:	4603      	mov	r3, r0
 8002df2:	e000      	b.n	8002df6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002df4:	2302      	movs	r3, #2
  }
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3728      	adds	r7, #40	@ 0x28
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	40008000 	.word	0x40008000

08002e04 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b0ba      	sub	sp, #232	@ 0xe8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	69db      	ldr	r3, [r3, #28]
 8002e12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002e2a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002e2e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002e32:	4013      	ands	r3, r2
 8002e34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002e38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d115      	bne.n	8002e6c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e44:	f003 0320 	and.w	r3, r3, #32
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00f      	beq.n	8002e6c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e50:	f003 0320 	and.w	r3, r3, #32
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d009      	beq.n	8002e6c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f000 82ae 	beq.w	80033be <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	4798      	blx	r3
      }
      return;
 8002e6a:	e2a8      	b.n	80033be <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002e6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f000 8117 	beq.w	80030a4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002e76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d106      	bne.n	8002e90 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002e82:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002e86:	4b85      	ldr	r3, [pc, #532]	@ (800309c <HAL_UART_IRQHandler+0x298>)
 8002e88:	4013      	ands	r3, r2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f000 810a 	beq.w	80030a4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002e90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d011      	beq.n	8002ec0 <HAL_UART_IRQHandler+0xbc>
 8002e9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ea0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00b      	beq.n	8002ec0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2201      	movs	r2, #1
 8002eae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002eb6:	f043 0201 	orr.w	r2, r3, #1
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ec0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d011      	beq.n	8002ef0 <HAL_UART_IRQHandler+0xec>
 8002ecc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ed0:	f003 0301 	and.w	r3, r3, #1
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00b      	beq.n	8002ef0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2202      	movs	r2, #2
 8002ede:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ee6:	f043 0204 	orr.w	r2, r3, #4
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ef4:	f003 0304 	and.w	r3, r3, #4
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d011      	beq.n	8002f20 <HAL_UART_IRQHandler+0x11c>
 8002efc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f00:	f003 0301 	and.w	r3, r3, #1
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00b      	beq.n	8002f20 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2204      	movs	r2, #4
 8002f0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f16:	f043 0202 	orr.w	r2, r3, #2
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002f20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f24:	f003 0308 	and.w	r3, r3, #8
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d017      	beq.n	8002f5c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002f2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f30:	f003 0320 	and.w	r3, r3, #32
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d105      	bne.n	8002f44 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002f38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f3c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00b      	beq.n	8002f5c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2208      	movs	r2, #8
 8002f4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f52:	f043 0208 	orr.w	r2, r3, #8
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002f5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d012      	beq.n	8002f8e <HAL_UART_IRQHandler+0x18a>
 8002f68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f6c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00c      	beq.n	8002f8e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002f7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f84:	f043 0220 	orr.w	r2, r3, #32
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f000 8214 	beq.w	80033c2 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f9e:	f003 0320 	and.w	r3, r3, #32
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00d      	beq.n	8002fc2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002fa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002faa:	f003 0320 	and.w	r3, r3, #32
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d007      	beq.n	8002fc2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d003      	beq.n	8002fc2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fc8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fd6:	2b40      	cmp	r3, #64	@ 0x40
 8002fd8:	d005      	beq.n	8002fe6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002fda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002fde:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d04f      	beq.n	8003086 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 ff3c 	bl	8003e64 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ff6:	2b40      	cmp	r3, #64	@ 0x40
 8002ff8:	d141      	bne.n	800307e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	3308      	adds	r3, #8
 8003000:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003004:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003008:	e853 3f00 	ldrex	r3, [r3]
 800300c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003010:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003014:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003018:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	3308      	adds	r3, #8
 8003022:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003026:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800302a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800302e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003032:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003036:	e841 2300 	strex	r3, r2, [r1]
 800303a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800303e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1d9      	bne.n	8002ffa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800304a:	2b00      	cmp	r3, #0
 800304c:	d013      	beq.n	8003076 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003052:	4a13      	ldr	r2, [pc, #76]	@ (80030a0 <HAL_UART_IRQHandler+0x29c>)
 8003054:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800305a:	4618      	mov	r0, r3
 800305c:	f7fd fff5 	bl	800104a <HAL_DMA_Abort_IT>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d017      	beq.n	8003096 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800306a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003070:	4610      	mov	r0, r2
 8003072:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003074:	e00f      	b.n	8003096 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 f9ae 	bl	80033d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800307c:	e00b      	b.n	8003096 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 f9aa 	bl	80033d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003084:	e007      	b.n	8003096 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 f9a6 	bl	80033d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003094:	e195      	b.n	80033c2 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003096:	bf00      	nop
    return;
 8003098:	e193      	b.n	80033c2 <HAL_UART_IRQHandler+0x5be>
 800309a:	bf00      	nop
 800309c:	04000120 	.word	0x04000120
 80030a0:	08003f2d 	.word	0x08003f2d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	f040 814e 	bne.w	800334a <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80030ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030b2:	f003 0310 	and.w	r3, r3, #16
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f000 8147 	beq.w	800334a <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80030bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030c0:	f003 0310 	and.w	r3, r3, #16
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f000 8140 	beq.w	800334a <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2210      	movs	r2, #16
 80030d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030dc:	2b40      	cmp	r3, #64	@ 0x40
 80030de:	f040 80b8 	bne.w	8003252 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80030ee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f000 8167 	beq.w	80033c6 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80030fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003102:	429a      	cmp	r2, r3
 8003104:	f080 815f 	bcs.w	80033c6 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800310e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0320 	and.w	r3, r3, #32
 800311e:	2b00      	cmp	r3, #0
 8003120:	f040 8086 	bne.w	8003230 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800312c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003130:	e853 3f00 	ldrex	r3, [r3]
 8003134:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003138:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800313c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003140:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	461a      	mov	r2, r3
 800314a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800314e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003152:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003156:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800315a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800315e:	e841 2300 	strex	r3, r2, [r1]
 8003162:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003166:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1da      	bne.n	8003124 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	3308      	adds	r3, #8
 8003174:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003176:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003178:	e853 3f00 	ldrex	r3, [r3]
 800317c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800317e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003180:	f023 0301 	bic.w	r3, r3, #1
 8003184:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	3308      	adds	r3, #8
 800318e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003192:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003196:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003198:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800319a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800319e:	e841 2300 	strex	r3, r2, [r1]
 80031a2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80031a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1e1      	bne.n	800316e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	3308      	adds	r3, #8
 80031b0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80031b4:	e853 3f00 	ldrex	r3, [r3]
 80031b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80031ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	3308      	adds	r3, #8
 80031ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80031ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80031d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80031d4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80031d6:	e841 2300 	strex	r3, r2, [r1]
 80031da:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80031dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1e3      	bne.n	80031aa <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2220      	movs	r2, #32
 80031e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031f8:	e853 3f00 	ldrex	r3, [r3]
 80031fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80031fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003200:	f023 0310 	bic.w	r3, r3, #16
 8003204:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	461a      	mov	r2, r3
 800320e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003212:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003214:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003216:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003218:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800321a:	e841 2300 	strex	r3, r2, [r1]
 800321e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003220:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1e4      	bne.n	80031f0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800322a:	4618      	mov	r0, r3
 800322c:	f7fd fecf 	bl	8000fce <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2202      	movs	r2, #2
 8003234:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003242:	b29b      	uxth	r3, r3
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	b29b      	uxth	r3, r3
 8003248:	4619      	mov	r1, r3
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f8ce 	bl	80033ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003250:	e0b9      	b.n	80033c6 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800325e:	b29b      	uxth	r3, r3
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800326c:	b29b      	uxth	r3, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	f000 80ab 	beq.w	80033ca <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8003274:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003278:	2b00      	cmp	r3, #0
 800327a:	f000 80a6 	beq.w	80033ca <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003286:	e853 3f00 	ldrex	r3, [r3]
 800328a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800328c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800328e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003292:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	461a      	mov	r2, r3
 800329c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80032a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80032a2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80032a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80032a8:	e841 2300 	strex	r3, r2, [r1]
 80032ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80032ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1e4      	bne.n	800327e <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	3308      	adds	r3, #8
 80032ba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032be:	e853 3f00 	ldrex	r3, [r3]
 80032c2:	623b      	str	r3, [r7, #32]
   return(result);
 80032c4:	6a3b      	ldr	r3, [r7, #32]
 80032c6:	f023 0301 	bic.w	r3, r3, #1
 80032ca:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	3308      	adds	r3, #8
 80032d4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80032d8:	633a      	str	r2, [r7, #48]	@ 0x30
 80032da:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80032de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032e0:	e841 2300 	strex	r3, r2, [r1]
 80032e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80032e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1e3      	bne.n	80032b4 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2220      	movs	r2, #32
 80032f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	e853 3f00 	ldrex	r3, [r3]
 800330c:	60fb      	str	r3, [r7, #12]
   return(result);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f023 0310 	bic.w	r3, r3, #16
 8003314:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	461a      	mov	r2, r3
 800331e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003322:	61fb      	str	r3, [r7, #28]
 8003324:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003326:	69b9      	ldr	r1, [r7, #24]
 8003328:	69fa      	ldr	r2, [r7, #28]
 800332a:	e841 2300 	strex	r3, r2, [r1]
 800332e:	617b      	str	r3, [r7, #20]
   return(result);
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1e4      	bne.n	8003300 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2202      	movs	r2, #2
 800333a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800333c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003340:	4619      	mov	r1, r3
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 f852 	bl	80033ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003348:	e03f      	b.n	80033ca <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800334a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800334e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00e      	beq.n	8003374 <HAL_UART_IRQHandler+0x570>
 8003356:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800335a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d008      	beq.n	8003374 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800336a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f001 f895 	bl	800449c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003372:	e02d      	b.n	80033d0 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003378:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00e      	beq.n	800339e <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003384:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003388:	2b00      	cmp	r3, #0
 800338a:	d008      	beq.n	800339e <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003390:	2b00      	cmp	r3, #0
 8003392:	d01c      	beq.n	80033ce <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	4798      	blx	r3
    }
    return;
 800339c:	e017      	b.n	80033ce <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800339e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d012      	beq.n	80033d0 <HAL_UART_IRQHandler+0x5cc>
 80033aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00c      	beq.n	80033d0 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 fe89 	bl	80040ce <UART_EndTransmit_IT>
    return;
 80033bc:	e008      	b.n	80033d0 <HAL_UART_IRQHandler+0x5cc>
      return;
 80033be:	bf00      	nop
 80033c0:	e006      	b.n	80033d0 <HAL_UART_IRQHandler+0x5cc>
    return;
 80033c2:	bf00      	nop
 80033c4:	e004      	b.n	80033d0 <HAL_UART_IRQHandler+0x5cc>
      return;
 80033c6:	bf00      	nop
 80033c8:	e002      	b.n	80033d0 <HAL_UART_IRQHandler+0x5cc>
      return;
 80033ca:	bf00      	nop
 80033cc:	e000      	b.n	80033d0 <HAL_UART_IRQHandler+0x5cc>
    return;
 80033ce:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80033d0:	37e8      	adds	r7, #232	@ 0xe8
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop

080033d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	460b      	mov	r3, r1
 80033f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003404:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003408:	b08a      	sub	sp, #40	@ 0x28
 800340a:	af00      	add	r7, sp, #0
 800340c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800340e:	2300      	movs	r3, #0
 8003410:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	689a      	ldr	r2, [r3, #8]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	431a      	orrs	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	431a      	orrs	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	69db      	ldr	r3, [r3, #28]
 8003428:	4313      	orrs	r3, r2
 800342a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	4ba4      	ldr	r3, [pc, #656]	@ (80036c4 <UART_SetConfig+0x2c0>)
 8003434:	4013      	ands	r3, r2
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	6812      	ldr	r2, [r2, #0]
 800343a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800343c:	430b      	orrs	r3, r1
 800343e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	68da      	ldr	r2, [r3, #12]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a99      	ldr	r2, [pc, #612]	@ (80036c8 <UART_SetConfig+0x2c4>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d004      	beq.n	8003470 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800346c:	4313      	orrs	r3, r2
 800346e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003480:	430a      	orrs	r2, r1
 8003482:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a90      	ldr	r2, [pc, #576]	@ (80036cc <UART_SetConfig+0x2c8>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d126      	bne.n	80034dc <UART_SetConfig+0xd8>
 800348e:	4b90      	ldr	r3, [pc, #576]	@ (80036d0 <UART_SetConfig+0x2cc>)
 8003490:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003494:	f003 0303 	and.w	r3, r3, #3
 8003498:	2b03      	cmp	r3, #3
 800349a:	d81b      	bhi.n	80034d4 <UART_SetConfig+0xd0>
 800349c:	a201      	add	r2, pc, #4	@ (adr r2, 80034a4 <UART_SetConfig+0xa0>)
 800349e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a2:	bf00      	nop
 80034a4:	080034b5 	.word	0x080034b5
 80034a8:	080034c5 	.word	0x080034c5
 80034ac:	080034bd 	.word	0x080034bd
 80034b0:	080034cd 	.word	0x080034cd
 80034b4:	2301      	movs	r3, #1
 80034b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034ba:	e116      	b.n	80036ea <UART_SetConfig+0x2e6>
 80034bc:	2302      	movs	r3, #2
 80034be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034c2:	e112      	b.n	80036ea <UART_SetConfig+0x2e6>
 80034c4:	2304      	movs	r3, #4
 80034c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034ca:	e10e      	b.n	80036ea <UART_SetConfig+0x2e6>
 80034cc:	2308      	movs	r3, #8
 80034ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034d2:	e10a      	b.n	80036ea <UART_SetConfig+0x2e6>
 80034d4:	2310      	movs	r3, #16
 80034d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034da:	e106      	b.n	80036ea <UART_SetConfig+0x2e6>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a7c      	ldr	r2, [pc, #496]	@ (80036d4 <UART_SetConfig+0x2d0>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d138      	bne.n	8003558 <UART_SetConfig+0x154>
 80034e6:	4b7a      	ldr	r3, [pc, #488]	@ (80036d0 <UART_SetConfig+0x2cc>)
 80034e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ec:	f003 030c 	and.w	r3, r3, #12
 80034f0:	2b0c      	cmp	r3, #12
 80034f2:	d82d      	bhi.n	8003550 <UART_SetConfig+0x14c>
 80034f4:	a201      	add	r2, pc, #4	@ (adr r2, 80034fc <UART_SetConfig+0xf8>)
 80034f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034fa:	bf00      	nop
 80034fc:	08003531 	.word	0x08003531
 8003500:	08003551 	.word	0x08003551
 8003504:	08003551 	.word	0x08003551
 8003508:	08003551 	.word	0x08003551
 800350c:	08003541 	.word	0x08003541
 8003510:	08003551 	.word	0x08003551
 8003514:	08003551 	.word	0x08003551
 8003518:	08003551 	.word	0x08003551
 800351c:	08003539 	.word	0x08003539
 8003520:	08003551 	.word	0x08003551
 8003524:	08003551 	.word	0x08003551
 8003528:	08003551 	.word	0x08003551
 800352c:	08003549 	.word	0x08003549
 8003530:	2300      	movs	r3, #0
 8003532:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003536:	e0d8      	b.n	80036ea <UART_SetConfig+0x2e6>
 8003538:	2302      	movs	r3, #2
 800353a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800353e:	e0d4      	b.n	80036ea <UART_SetConfig+0x2e6>
 8003540:	2304      	movs	r3, #4
 8003542:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003546:	e0d0      	b.n	80036ea <UART_SetConfig+0x2e6>
 8003548:	2308      	movs	r3, #8
 800354a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800354e:	e0cc      	b.n	80036ea <UART_SetConfig+0x2e6>
 8003550:	2310      	movs	r3, #16
 8003552:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003556:	e0c8      	b.n	80036ea <UART_SetConfig+0x2e6>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a5e      	ldr	r2, [pc, #376]	@ (80036d8 <UART_SetConfig+0x2d4>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d125      	bne.n	80035ae <UART_SetConfig+0x1aa>
 8003562:	4b5b      	ldr	r3, [pc, #364]	@ (80036d0 <UART_SetConfig+0x2cc>)
 8003564:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003568:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800356c:	2b30      	cmp	r3, #48	@ 0x30
 800356e:	d016      	beq.n	800359e <UART_SetConfig+0x19a>
 8003570:	2b30      	cmp	r3, #48	@ 0x30
 8003572:	d818      	bhi.n	80035a6 <UART_SetConfig+0x1a2>
 8003574:	2b20      	cmp	r3, #32
 8003576:	d00a      	beq.n	800358e <UART_SetConfig+0x18a>
 8003578:	2b20      	cmp	r3, #32
 800357a:	d814      	bhi.n	80035a6 <UART_SetConfig+0x1a2>
 800357c:	2b00      	cmp	r3, #0
 800357e:	d002      	beq.n	8003586 <UART_SetConfig+0x182>
 8003580:	2b10      	cmp	r3, #16
 8003582:	d008      	beq.n	8003596 <UART_SetConfig+0x192>
 8003584:	e00f      	b.n	80035a6 <UART_SetConfig+0x1a2>
 8003586:	2300      	movs	r3, #0
 8003588:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800358c:	e0ad      	b.n	80036ea <UART_SetConfig+0x2e6>
 800358e:	2302      	movs	r3, #2
 8003590:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003594:	e0a9      	b.n	80036ea <UART_SetConfig+0x2e6>
 8003596:	2304      	movs	r3, #4
 8003598:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800359c:	e0a5      	b.n	80036ea <UART_SetConfig+0x2e6>
 800359e:	2308      	movs	r3, #8
 80035a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035a4:	e0a1      	b.n	80036ea <UART_SetConfig+0x2e6>
 80035a6:	2310      	movs	r3, #16
 80035a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035ac:	e09d      	b.n	80036ea <UART_SetConfig+0x2e6>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a4a      	ldr	r2, [pc, #296]	@ (80036dc <UART_SetConfig+0x2d8>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d125      	bne.n	8003604 <UART_SetConfig+0x200>
 80035b8:	4b45      	ldr	r3, [pc, #276]	@ (80036d0 <UART_SetConfig+0x2cc>)
 80035ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035be:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80035c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80035c4:	d016      	beq.n	80035f4 <UART_SetConfig+0x1f0>
 80035c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80035c8:	d818      	bhi.n	80035fc <UART_SetConfig+0x1f8>
 80035ca:	2b80      	cmp	r3, #128	@ 0x80
 80035cc:	d00a      	beq.n	80035e4 <UART_SetConfig+0x1e0>
 80035ce:	2b80      	cmp	r3, #128	@ 0x80
 80035d0:	d814      	bhi.n	80035fc <UART_SetConfig+0x1f8>
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d002      	beq.n	80035dc <UART_SetConfig+0x1d8>
 80035d6:	2b40      	cmp	r3, #64	@ 0x40
 80035d8:	d008      	beq.n	80035ec <UART_SetConfig+0x1e8>
 80035da:	e00f      	b.n	80035fc <UART_SetConfig+0x1f8>
 80035dc:	2300      	movs	r3, #0
 80035de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035e2:	e082      	b.n	80036ea <UART_SetConfig+0x2e6>
 80035e4:	2302      	movs	r3, #2
 80035e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035ea:	e07e      	b.n	80036ea <UART_SetConfig+0x2e6>
 80035ec:	2304      	movs	r3, #4
 80035ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035f2:	e07a      	b.n	80036ea <UART_SetConfig+0x2e6>
 80035f4:	2308      	movs	r3, #8
 80035f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035fa:	e076      	b.n	80036ea <UART_SetConfig+0x2e6>
 80035fc:	2310      	movs	r3, #16
 80035fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003602:	e072      	b.n	80036ea <UART_SetConfig+0x2e6>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a35      	ldr	r2, [pc, #212]	@ (80036e0 <UART_SetConfig+0x2dc>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d12a      	bne.n	8003664 <UART_SetConfig+0x260>
 800360e:	4b30      	ldr	r3, [pc, #192]	@ (80036d0 <UART_SetConfig+0x2cc>)
 8003610:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003614:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003618:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800361c:	d01a      	beq.n	8003654 <UART_SetConfig+0x250>
 800361e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003622:	d81b      	bhi.n	800365c <UART_SetConfig+0x258>
 8003624:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003628:	d00c      	beq.n	8003644 <UART_SetConfig+0x240>
 800362a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800362e:	d815      	bhi.n	800365c <UART_SetConfig+0x258>
 8003630:	2b00      	cmp	r3, #0
 8003632:	d003      	beq.n	800363c <UART_SetConfig+0x238>
 8003634:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003638:	d008      	beq.n	800364c <UART_SetConfig+0x248>
 800363a:	e00f      	b.n	800365c <UART_SetConfig+0x258>
 800363c:	2300      	movs	r3, #0
 800363e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003642:	e052      	b.n	80036ea <UART_SetConfig+0x2e6>
 8003644:	2302      	movs	r3, #2
 8003646:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800364a:	e04e      	b.n	80036ea <UART_SetConfig+0x2e6>
 800364c:	2304      	movs	r3, #4
 800364e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003652:	e04a      	b.n	80036ea <UART_SetConfig+0x2e6>
 8003654:	2308      	movs	r3, #8
 8003656:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800365a:	e046      	b.n	80036ea <UART_SetConfig+0x2e6>
 800365c:	2310      	movs	r3, #16
 800365e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003662:	e042      	b.n	80036ea <UART_SetConfig+0x2e6>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a17      	ldr	r2, [pc, #92]	@ (80036c8 <UART_SetConfig+0x2c4>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d13a      	bne.n	80036e4 <UART_SetConfig+0x2e0>
 800366e:	4b18      	ldr	r3, [pc, #96]	@ (80036d0 <UART_SetConfig+0x2cc>)
 8003670:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003674:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003678:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800367c:	d01a      	beq.n	80036b4 <UART_SetConfig+0x2b0>
 800367e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003682:	d81b      	bhi.n	80036bc <UART_SetConfig+0x2b8>
 8003684:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003688:	d00c      	beq.n	80036a4 <UART_SetConfig+0x2a0>
 800368a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800368e:	d815      	bhi.n	80036bc <UART_SetConfig+0x2b8>
 8003690:	2b00      	cmp	r3, #0
 8003692:	d003      	beq.n	800369c <UART_SetConfig+0x298>
 8003694:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003698:	d008      	beq.n	80036ac <UART_SetConfig+0x2a8>
 800369a:	e00f      	b.n	80036bc <UART_SetConfig+0x2b8>
 800369c:	2300      	movs	r3, #0
 800369e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036a2:	e022      	b.n	80036ea <UART_SetConfig+0x2e6>
 80036a4:	2302      	movs	r3, #2
 80036a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036aa:	e01e      	b.n	80036ea <UART_SetConfig+0x2e6>
 80036ac:	2304      	movs	r3, #4
 80036ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036b2:	e01a      	b.n	80036ea <UART_SetConfig+0x2e6>
 80036b4:	2308      	movs	r3, #8
 80036b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036ba:	e016      	b.n	80036ea <UART_SetConfig+0x2e6>
 80036bc:	2310      	movs	r3, #16
 80036be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036c2:	e012      	b.n	80036ea <UART_SetConfig+0x2e6>
 80036c4:	efff69f3 	.word	0xefff69f3
 80036c8:	40008000 	.word	0x40008000
 80036cc:	40013800 	.word	0x40013800
 80036d0:	40021000 	.word	0x40021000
 80036d4:	40004400 	.word	0x40004400
 80036d8:	40004800 	.word	0x40004800
 80036dc:	40004c00 	.word	0x40004c00
 80036e0:	40005000 	.word	0x40005000
 80036e4:	2310      	movs	r3, #16
 80036e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a9f      	ldr	r2, [pc, #636]	@ (800396c <UART_SetConfig+0x568>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d17a      	bne.n	80037ea <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80036f4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80036f8:	2b08      	cmp	r3, #8
 80036fa:	d824      	bhi.n	8003746 <UART_SetConfig+0x342>
 80036fc:	a201      	add	r2, pc, #4	@ (adr r2, 8003704 <UART_SetConfig+0x300>)
 80036fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003702:	bf00      	nop
 8003704:	08003729 	.word	0x08003729
 8003708:	08003747 	.word	0x08003747
 800370c:	08003731 	.word	0x08003731
 8003710:	08003747 	.word	0x08003747
 8003714:	08003737 	.word	0x08003737
 8003718:	08003747 	.word	0x08003747
 800371c:	08003747 	.word	0x08003747
 8003720:	08003747 	.word	0x08003747
 8003724:	0800373f 	.word	0x0800373f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003728:	f7fe fc92 	bl	8002050 <HAL_RCC_GetPCLK1Freq>
 800372c:	61f8      	str	r0, [r7, #28]
        break;
 800372e:	e010      	b.n	8003752 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003730:	4b8f      	ldr	r3, [pc, #572]	@ (8003970 <UART_SetConfig+0x56c>)
 8003732:	61fb      	str	r3, [r7, #28]
        break;
 8003734:	e00d      	b.n	8003752 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003736:	f7fe fbf3 	bl	8001f20 <HAL_RCC_GetSysClockFreq>
 800373a:	61f8      	str	r0, [r7, #28]
        break;
 800373c:	e009      	b.n	8003752 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800373e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003742:	61fb      	str	r3, [r7, #28]
        break;
 8003744:	e005      	b.n	8003752 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003746:	2300      	movs	r3, #0
 8003748:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003750:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 80fb 	beq.w	8003950 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	685a      	ldr	r2, [r3, #4]
 800375e:	4613      	mov	r3, r2
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	4413      	add	r3, r2
 8003764:	69fa      	ldr	r2, [r7, #28]
 8003766:	429a      	cmp	r2, r3
 8003768:	d305      	bcc.n	8003776 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003770:	69fa      	ldr	r2, [r7, #28]
 8003772:	429a      	cmp	r2, r3
 8003774:	d903      	bls.n	800377e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800377c:	e0e8      	b.n	8003950 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	2200      	movs	r2, #0
 8003782:	461c      	mov	r4, r3
 8003784:	4615      	mov	r5, r2
 8003786:	f04f 0200 	mov.w	r2, #0
 800378a:	f04f 0300 	mov.w	r3, #0
 800378e:	022b      	lsls	r3, r5, #8
 8003790:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003794:	0222      	lsls	r2, r4, #8
 8003796:	68f9      	ldr	r1, [r7, #12]
 8003798:	6849      	ldr	r1, [r1, #4]
 800379a:	0849      	lsrs	r1, r1, #1
 800379c:	2000      	movs	r0, #0
 800379e:	4688      	mov	r8, r1
 80037a0:	4681      	mov	r9, r0
 80037a2:	eb12 0a08 	adds.w	sl, r2, r8
 80037a6:	eb43 0b09 	adc.w	fp, r3, r9
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	603b      	str	r3, [r7, #0]
 80037b2:	607a      	str	r2, [r7, #4]
 80037b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037b8:	4650      	mov	r0, sl
 80037ba:	4659      	mov	r1, fp
 80037bc:	f7fc fd70 	bl	80002a0 <__aeabi_uldivmod>
 80037c0:	4602      	mov	r2, r0
 80037c2:	460b      	mov	r3, r1
 80037c4:	4613      	mov	r3, r2
 80037c6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037ce:	d308      	bcc.n	80037e2 <UART_SetConfig+0x3de>
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037d6:	d204      	bcs.n	80037e2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	60da      	str	r2, [r3, #12]
 80037e0:	e0b6      	b.n	8003950 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80037e8:	e0b2      	b.n	8003950 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037f2:	d15e      	bne.n	80038b2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80037f4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80037f8:	2b08      	cmp	r3, #8
 80037fa:	d828      	bhi.n	800384e <UART_SetConfig+0x44a>
 80037fc:	a201      	add	r2, pc, #4	@ (adr r2, 8003804 <UART_SetConfig+0x400>)
 80037fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003802:	bf00      	nop
 8003804:	08003829 	.word	0x08003829
 8003808:	08003831 	.word	0x08003831
 800380c:	08003839 	.word	0x08003839
 8003810:	0800384f 	.word	0x0800384f
 8003814:	0800383f 	.word	0x0800383f
 8003818:	0800384f 	.word	0x0800384f
 800381c:	0800384f 	.word	0x0800384f
 8003820:	0800384f 	.word	0x0800384f
 8003824:	08003847 	.word	0x08003847
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003828:	f7fe fc12 	bl	8002050 <HAL_RCC_GetPCLK1Freq>
 800382c:	61f8      	str	r0, [r7, #28]
        break;
 800382e:	e014      	b.n	800385a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003830:	f7fe fc24 	bl	800207c <HAL_RCC_GetPCLK2Freq>
 8003834:	61f8      	str	r0, [r7, #28]
        break;
 8003836:	e010      	b.n	800385a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003838:	4b4d      	ldr	r3, [pc, #308]	@ (8003970 <UART_SetConfig+0x56c>)
 800383a:	61fb      	str	r3, [r7, #28]
        break;
 800383c:	e00d      	b.n	800385a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800383e:	f7fe fb6f 	bl	8001f20 <HAL_RCC_GetSysClockFreq>
 8003842:	61f8      	str	r0, [r7, #28]
        break;
 8003844:	e009      	b.n	800385a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003846:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800384a:	61fb      	str	r3, [r7, #28]
        break;
 800384c:	e005      	b.n	800385a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800384e:	2300      	movs	r3, #0
 8003850:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003858:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d077      	beq.n	8003950 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	005a      	lsls	r2, r3, #1
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	085b      	lsrs	r3, r3, #1
 800386a:	441a      	add	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	fbb2 f3f3 	udiv	r3, r2, r3
 8003874:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	2b0f      	cmp	r3, #15
 800387a:	d916      	bls.n	80038aa <UART_SetConfig+0x4a6>
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003882:	d212      	bcs.n	80038aa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	b29b      	uxth	r3, r3
 8003888:	f023 030f 	bic.w	r3, r3, #15
 800388c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	085b      	lsrs	r3, r3, #1
 8003892:	b29b      	uxth	r3, r3
 8003894:	f003 0307 	and.w	r3, r3, #7
 8003898:	b29a      	uxth	r2, r3
 800389a:	8afb      	ldrh	r3, [r7, #22]
 800389c:	4313      	orrs	r3, r2
 800389e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	8afa      	ldrh	r2, [r7, #22]
 80038a6:	60da      	str	r2, [r3, #12]
 80038a8:	e052      	b.n	8003950 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80038b0:	e04e      	b.n	8003950 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80038b2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80038b6:	2b08      	cmp	r3, #8
 80038b8:	d827      	bhi.n	800390a <UART_SetConfig+0x506>
 80038ba:	a201      	add	r2, pc, #4	@ (adr r2, 80038c0 <UART_SetConfig+0x4bc>)
 80038bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c0:	080038e5 	.word	0x080038e5
 80038c4:	080038ed 	.word	0x080038ed
 80038c8:	080038f5 	.word	0x080038f5
 80038cc:	0800390b 	.word	0x0800390b
 80038d0:	080038fb 	.word	0x080038fb
 80038d4:	0800390b 	.word	0x0800390b
 80038d8:	0800390b 	.word	0x0800390b
 80038dc:	0800390b 	.word	0x0800390b
 80038e0:	08003903 	.word	0x08003903
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038e4:	f7fe fbb4 	bl	8002050 <HAL_RCC_GetPCLK1Freq>
 80038e8:	61f8      	str	r0, [r7, #28]
        break;
 80038ea:	e014      	b.n	8003916 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038ec:	f7fe fbc6 	bl	800207c <HAL_RCC_GetPCLK2Freq>
 80038f0:	61f8      	str	r0, [r7, #28]
        break;
 80038f2:	e010      	b.n	8003916 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038f4:	4b1e      	ldr	r3, [pc, #120]	@ (8003970 <UART_SetConfig+0x56c>)
 80038f6:	61fb      	str	r3, [r7, #28]
        break;
 80038f8:	e00d      	b.n	8003916 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038fa:	f7fe fb11 	bl	8001f20 <HAL_RCC_GetSysClockFreq>
 80038fe:	61f8      	str	r0, [r7, #28]
        break;
 8003900:	e009      	b.n	8003916 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003902:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003906:	61fb      	str	r3, [r7, #28]
        break;
 8003908:	e005      	b.n	8003916 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800390a:	2300      	movs	r3, #0
 800390c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003914:	bf00      	nop
    }

    if (pclk != 0U)
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d019      	beq.n	8003950 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	085a      	lsrs	r2, r3, #1
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	441a      	add	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	fbb2 f3f3 	udiv	r3, r2, r3
 800392e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	2b0f      	cmp	r3, #15
 8003934:	d909      	bls.n	800394a <UART_SetConfig+0x546>
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800393c:	d205      	bcs.n	800394a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	b29a      	uxth	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	60da      	str	r2, [r3, #12]
 8003948:	e002      	b.n	8003950 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800395c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003960:	4618      	mov	r0, r3
 8003962:	3728      	adds	r7, #40	@ 0x28
 8003964:	46bd      	mov	sp, r7
 8003966:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800396a:	bf00      	nop
 800396c:	40008000 	.word	0x40008000
 8003970:	00f42400 	.word	0x00f42400

08003974 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003980:	f003 0308 	and.w	r3, r3, #8
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00a      	beq.n	800399e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00a      	beq.n	80039c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	430a      	orrs	r2, r1
 80039be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00a      	beq.n	80039e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	430a      	orrs	r2, r1
 80039e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e6:	f003 0304 	and.w	r3, r3, #4
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00a      	beq.n	8003a04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	430a      	orrs	r2, r1
 8003a02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a08:	f003 0310 	and.w	r3, r3, #16
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00a      	beq.n	8003a26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	430a      	orrs	r2, r1
 8003a24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2a:	f003 0320 	and.w	r3, r3, #32
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00a      	beq.n	8003a48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	430a      	orrs	r2, r1
 8003a46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d01a      	beq.n	8003a8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	430a      	orrs	r2, r1
 8003a68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a72:	d10a      	bne.n	8003a8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00a      	beq.n	8003aac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	605a      	str	r2, [r3, #4]
  }
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b098      	sub	sp, #96	@ 0x60
 8003abc:	af02      	add	r7, sp, #8
 8003abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ac8:	f7fd f964 	bl	8000d94 <HAL_GetTick>
 8003acc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0308 	and.w	r3, r3, #8
 8003ad8:	2b08      	cmp	r3, #8
 8003ada:	d12e      	bne.n	8003b3a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003adc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003ae0:	9300      	str	r3, [sp, #0]
 8003ae2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 f88c 	bl	8003c08 <UART_WaitOnFlagUntilTimeout>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d021      	beq.n	8003b3a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003afe:	e853 3f00 	ldrex	r3, [r3]
 8003b02:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b0a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	461a      	mov	r2, r3
 8003b12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b14:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b16:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b18:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b1c:	e841 2300 	strex	r3, r2, [r1]
 8003b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1e6      	bne.n	8003af6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e062      	b.n	8003c00 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0304 	and.w	r3, r3, #4
 8003b44:	2b04      	cmp	r3, #4
 8003b46:	d149      	bne.n	8003bdc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b48:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003b4c:	9300      	str	r3, [sp, #0]
 8003b4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b50:	2200      	movs	r2, #0
 8003b52:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f856 	bl	8003c08 <UART_WaitOnFlagUntilTimeout>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d03c      	beq.n	8003bdc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6a:	e853 3f00 	ldrex	r3, [r3]
 8003b6e:	623b      	str	r3, [r7, #32]
   return(result);
 8003b70:	6a3b      	ldr	r3, [r7, #32]
 8003b72:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b80:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b82:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b84:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b88:	e841 2300 	strex	r3, r2, [r1]
 8003b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1e6      	bne.n	8003b62 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	3308      	adds	r3, #8
 8003b9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	e853 3f00 	ldrex	r3, [r3]
 8003ba2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f023 0301 	bic.w	r3, r3, #1
 8003baa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	3308      	adds	r3, #8
 8003bb2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003bb4:	61fa      	str	r2, [r7, #28]
 8003bb6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb8:	69b9      	ldr	r1, [r7, #24]
 8003bba:	69fa      	ldr	r2, [r7, #28]
 8003bbc:	e841 2300 	strex	r3, r2, [r1]
 8003bc0:	617b      	str	r3, [r7, #20]
   return(result);
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1e5      	bne.n	8003b94 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2220      	movs	r2, #32
 8003bcc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e011      	b.n	8003c00 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2220      	movs	r2, #32
 8003be0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2220      	movs	r2, #32
 8003be6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3758      	adds	r7, #88	@ 0x58
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	603b      	str	r3, [r7, #0]
 8003c14:	4613      	mov	r3, r2
 8003c16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c18:	e049      	b.n	8003cae <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c20:	d045      	beq.n	8003cae <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c22:	f7fd f8b7 	bl	8000d94 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	69ba      	ldr	r2, [r7, #24]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d302      	bcc.n	8003c38 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d101      	bne.n	8003c3c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e048      	b.n	8003cce <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0304 	and.w	r3, r3, #4
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d031      	beq.n	8003cae <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	69db      	ldr	r3, [r3, #28]
 8003c50:	f003 0308 	and.w	r3, r3, #8
 8003c54:	2b08      	cmp	r3, #8
 8003c56:	d110      	bne.n	8003c7a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2208      	movs	r2, #8
 8003c5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	f000 f8ff 	bl	8003e64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2208      	movs	r2, #8
 8003c6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e029      	b.n	8003cce <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	69db      	ldr	r3, [r3, #28]
 8003c80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c88:	d111      	bne.n	8003cae <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003c92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f000 f8e5 	bl	8003e64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2220      	movs	r2, #32
 8003c9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e00f      	b.n	8003cce <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	69da      	ldr	r2, [r3, #28]
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	68ba      	ldr	r2, [r7, #8]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	bf0c      	ite	eq
 8003cbe:	2301      	moveq	r3, #1
 8003cc0:	2300      	movne	r3, #0
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	79fb      	ldrb	r3, [r7, #7]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d0a6      	beq.n	8003c1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
	...

08003cd8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b097      	sub	sp, #92	@ 0x5c
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	68ba      	ldr	r2, [r7, #8]
 8003cea:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	88fa      	ldrh	r2, [r7, #6]
 8003cf0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	88fa      	ldrh	r2, [r7, #6]
 8003cf8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d0a:	d10e      	bne.n	8003d2a <UART_Start_Receive_IT+0x52>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d105      	bne.n	8003d20 <UART_Start_Receive_IT+0x48>
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003d1a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003d1e:	e02d      	b.n	8003d7c <UART_Start_Receive_IT+0xa4>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	22ff      	movs	r2, #255	@ 0xff
 8003d24:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003d28:	e028      	b.n	8003d7c <UART_Start_Receive_IT+0xa4>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10d      	bne.n	8003d4e <UART_Start_Receive_IT+0x76>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d104      	bne.n	8003d44 <UART_Start_Receive_IT+0x6c>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	22ff      	movs	r2, #255	@ 0xff
 8003d3e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003d42:	e01b      	b.n	8003d7c <UART_Start_Receive_IT+0xa4>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	227f      	movs	r2, #127	@ 0x7f
 8003d48:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003d4c:	e016      	b.n	8003d7c <UART_Start_Receive_IT+0xa4>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d56:	d10d      	bne.n	8003d74 <UART_Start_Receive_IT+0x9c>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d104      	bne.n	8003d6a <UART_Start_Receive_IT+0x92>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	227f      	movs	r2, #127	@ 0x7f
 8003d64:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003d68:	e008      	b.n	8003d7c <UART_Start_Receive_IT+0xa4>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	223f      	movs	r2, #63	@ 0x3f
 8003d6e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003d72:	e003      	b.n	8003d7c <UART_Start_Receive_IT+0xa4>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2222      	movs	r2, #34	@ 0x22
 8003d88:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	3308      	adds	r3, #8
 8003d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d96:	e853 3f00 	ldrex	r3, [r3]
 8003d9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d9e:	f043 0301 	orr.w	r3, r3, #1
 8003da2:	657b      	str	r3, [r7, #84]	@ 0x54
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	3308      	adds	r3, #8
 8003daa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003dac:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003dae:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003db2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003db4:	e841 2300 	strex	r3, r2, [r1]
 8003db8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003dba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1e5      	bne.n	8003d8c <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dc8:	d107      	bne.n	8003dda <UART_Start_Receive_IT+0x102>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d103      	bne.n	8003dda <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	4a21      	ldr	r2, [pc, #132]	@ (8003e5c <UART_Start_Receive_IT+0x184>)
 8003dd6:	669a      	str	r2, [r3, #104]	@ 0x68
 8003dd8:	e002      	b.n	8003de0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	4a20      	ldr	r2, [pc, #128]	@ (8003e60 <UART_Start_Receive_IT+0x188>)
 8003dde:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d019      	beq.n	8003e1c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003df0:	e853 3f00 	ldrex	r3, [r3]
 8003df4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df8:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8003dfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	461a      	mov	r2, r3
 8003e04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e06:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e08:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003e0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003e0e:	e841 2300 	strex	r3, r2, [r1]
 8003e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1e6      	bne.n	8003de8 <UART_Start_Receive_IT+0x110>
 8003e1a:	e018      	b.n	8003e4e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	e853 3f00 	ldrex	r3, [r3]
 8003e28:	613b      	str	r3, [r7, #16]
   return(result);
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	f043 0320 	orr.w	r3, r3, #32
 8003e30:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	461a      	mov	r2, r3
 8003e38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e3a:	623b      	str	r3, [r7, #32]
 8003e3c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e3e:	69f9      	ldr	r1, [r7, #28]
 8003e40:	6a3a      	ldr	r2, [r7, #32]
 8003e42:	e841 2300 	strex	r3, r2, [r1]
 8003e46:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1e6      	bne.n	8003e1c <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	375c      	adds	r7, #92	@ 0x5c
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr
 8003e5c:	080042e1 	.word	0x080042e1
 8003e60:	08004125 	.word	0x08004125

08003e64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b095      	sub	sp, #84	@ 0x54
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e74:	e853 3f00 	ldrex	r3, [r3]
 8003e78:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	461a      	mov	r2, r3
 8003e88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e8a:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e8c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003e90:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e92:	e841 2300 	strex	r3, r2, [r1]
 8003e96:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1e6      	bne.n	8003e6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	3308      	adds	r3, #8
 8003ea4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea6:	6a3b      	ldr	r3, [r7, #32]
 8003ea8:	e853 3f00 	ldrex	r3, [r3]
 8003eac:	61fb      	str	r3, [r7, #28]
   return(result);
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	f023 0301 	bic.w	r3, r3, #1
 8003eb4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	3308      	adds	r3, #8
 8003ebc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ebe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ec4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ec6:	e841 2300 	strex	r3, r2, [r1]
 8003eca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1e5      	bne.n	8003e9e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d118      	bne.n	8003f0c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	e853 3f00 	ldrex	r3, [r3]
 8003ee6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	f023 0310 	bic.w	r3, r3, #16
 8003eee:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ef8:	61bb      	str	r3, [r7, #24]
 8003efa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efc:	6979      	ldr	r1, [r7, #20]
 8003efe:	69ba      	ldr	r2, [r7, #24]
 8003f00:	e841 2300 	strex	r3, r2, [r1]
 8003f04:	613b      	str	r3, [r7, #16]
   return(result);
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1e6      	bne.n	8003eda <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2220      	movs	r2, #32
 8003f10:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003f20:	bf00      	nop
 8003f22:	3754      	adds	r7, #84	@ 0x54
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f38:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f7ff fa44 	bl	80033d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f50:	bf00      	nop
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b08f      	sub	sp, #60	@ 0x3c
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f64:	2b21      	cmp	r3, #33	@ 0x21
 8003f66:	d14c      	bne.n	8004002 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d132      	bne.n	8003fda <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7a:	6a3b      	ldr	r3, [r7, #32]
 8003f7c:	e853 3f00 	ldrex	r3, [r3]
 8003f80:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f88:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	461a      	mov	r2, r3
 8003f90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f94:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f9a:	e841 2300 	strex	r3, r2, [r1]
 8003f9e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1e6      	bne.n	8003f74 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	e853 3f00 	ldrex	r3, [r3]
 8003fb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003fba:	633b      	str	r3, [r7, #48]	@ 0x30
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fc4:	61bb      	str	r3, [r7, #24]
 8003fc6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc8:	6979      	ldr	r1, [r7, #20]
 8003fca:	69ba      	ldr	r2, [r7, #24]
 8003fcc:	e841 2300 	strex	r3, r2, [r1]
 8003fd0:	613b      	str	r3, [r7, #16]
   return(result);
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1e6      	bne.n	8003fa6 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003fd8:	e013      	b.n	8004002 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fde:	781a      	ldrb	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fea:	1c5a      	adds	r2, r3, #1
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	b29a      	uxth	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8004002:	bf00      	nop
 8004004:	373c      	adds	r7, #60	@ 0x3c
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr

0800400e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800400e:	b480      	push	{r7}
 8004010:	b091      	sub	sp, #68	@ 0x44
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800401a:	2b21      	cmp	r3, #33	@ 0x21
 800401c:	d151      	bne.n	80040c2 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004024:	b29b      	uxth	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d132      	bne.n	8004090 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004032:	e853 3f00 	ldrex	r3, [r3]
 8004036:	623b      	str	r3, [r7, #32]
   return(result);
 8004038:	6a3b      	ldr	r3, [r7, #32]
 800403a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800403e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	461a      	mov	r2, r3
 8004046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004048:	633b      	str	r3, [r7, #48]	@ 0x30
 800404a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800404e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004050:	e841 2300 	strex	r3, r2, [r1]
 8004054:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004058:	2b00      	cmp	r3, #0
 800405a:	d1e6      	bne.n	800402a <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	e853 3f00 	ldrex	r3, [r3]
 8004068:	60fb      	str	r3, [r7, #12]
   return(result);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004070:	637b      	str	r3, [r7, #52]	@ 0x34
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	461a      	mov	r2, r3
 8004078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800407a:	61fb      	str	r3, [r7, #28]
 800407c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407e:	69b9      	ldr	r1, [r7, #24]
 8004080:	69fa      	ldr	r2, [r7, #28]
 8004082:	e841 2300 	strex	r3, r2, [r1]
 8004086:	617b      	str	r3, [r7, #20]
   return(result);
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1e6      	bne.n	800405c <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800408e:	e018      	b.n	80040c2 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004094:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004096:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004098:	881a      	ldrh	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040a2:	b292      	uxth	r2, r2
 80040a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040aa:	1c9a      	adds	r2, r3, #2
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	3b01      	subs	r3, #1
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 80040c2:	bf00      	nop
 80040c4:	3744      	adds	r7, #68	@ 0x44
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr

080040ce <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b088      	sub	sp, #32
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	e853 3f00 	ldrex	r3, [r3]
 80040e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040ea:	61fb      	str	r3, [r7, #28]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	461a      	mov	r2, r3
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	61bb      	str	r3, [r7, #24]
 80040f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f8:	6979      	ldr	r1, [r7, #20]
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	e841 2300 	strex	r3, r2, [r1]
 8004100:	613b      	str	r3, [r7, #16]
   return(result);
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1e6      	bne.n	80040d6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2220      	movs	r2, #32
 800410c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f7fc fa99 	bl	800064c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800411a:	bf00      	nop
 800411c:	3720      	adds	r7, #32
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
	...

08004124 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b09c      	sub	sp, #112	@ 0x70
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004132:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800413c:	2b22      	cmp	r3, #34	@ 0x22
 800413e:	f040 80be 	bne.w	80042be <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004148:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800414c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004150:	b2d9      	uxtb	r1, r3
 8004152:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004156:	b2da      	uxtb	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800415c:	400a      	ands	r2, r1
 800415e:	b2d2      	uxtb	r2, r2
 8004160:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004166:	1c5a      	adds	r2, r3, #1
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004172:	b29b      	uxth	r3, r3
 8004174:	3b01      	subs	r3, #1
 8004176:	b29a      	uxth	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004184:	b29b      	uxth	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	f040 80a3 	bne.w	80042d2 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004192:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004194:	e853 3f00 	ldrex	r3, [r3]
 8004198:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800419a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800419c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	461a      	mov	r2, r3
 80041a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80041aa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80041ac:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80041b0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80041b2:	e841 2300 	strex	r3, r2, [r1]
 80041b6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80041b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1e6      	bne.n	800418c <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	3308      	adds	r3, #8
 80041c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041c8:	e853 3f00 	ldrex	r3, [r3]
 80041cc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80041ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041d0:	f023 0301 	bic.w	r3, r3, #1
 80041d4:	667b      	str	r3, [r7, #100]	@ 0x64
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	3308      	adds	r3, #8
 80041dc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80041de:	647a      	str	r2, [r7, #68]	@ 0x44
 80041e0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80041e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041e6:	e841 2300 	strex	r3, r2, [r1]
 80041ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80041ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1e5      	bne.n	80041be <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2220      	movs	r2, #32
 80041f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a34      	ldr	r2, [pc, #208]	@ (80042dc <UART_RxISR_8BIT+0x1b8>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d01f      	beq.n	8004250 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d018      	beq.n	8004250 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004226:	e853 3f00 	ldrex	r3, [r3]
 800422a:	623b      	str	r3, [r7, #32]
   return(result);
 800422c:	6a3b      	ldr	r3, [r7, #32]
 800422e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004232:	663b      	str	r3, [r7, #96]	@ 0x60
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	461a      	mov	r2, r3
 800423a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800423c:	633b      	str	r3, [r7, #48]	@ 0x30
 800423e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004240:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004242:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004244:	e841 2300 	strex	r3, r2, [r1]
 8004248:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800424a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800424c:	2b00      	cmp	r3, #0
 800424e:	d1e6      	bne.n	800421e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004254:	2b01      	cmp	r3, #1
 8004256:	d12e      	bne.n	80042b6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	e853 3f00 	ldrex	r3, [r3]
 800426a:	60fb      	str	r3, [r7, #12]
   return(result);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f023 0310 	bic.w	r3, r3, #16
 8004272:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	461a      	mov	r2, r3
 800427a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800427c:	61fb      	str	r3, [r7, #28]
 800427e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004280:	69b9      	ldr	r1, [r7, #24]
 8004282:	69fa      	ldr	r2, [r7, #28]
 8004284:	e841 2300 	strex	r3, r2, [r1]
 8004288:	617b      	str	r3, [r7, #20]
   return(result);
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1e6      	bne.n	800425e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	69db      	ldr	r3, [r3, #28]
 8004296:	f003 0310 	and.w	r3, r3, #16
 800429a:	2b10      	cmp	r3, #16
 800429c:	d103      	bne.n	80042a6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2210      	movs	r2, #16
 80042a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80042ac:	4619      	mov	r1, r3
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f7ff f89c 	bl	80033ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80042b4:	e00d      	b.n	80042d2 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f7fc fa28 	bl	800070c <HAL_UART_RxCpltCallback>
}
 80042bc:	e009      	b.n	80042d2 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	8b1b      	ldrh	r3, [r3, #24]
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f042 0208 	orr.w	r2, r2, #8
 80042ce:	b292      	uxth	r2, r2
 80042d0:	831a      	strh	r2, [r3, #24]
}
 80042d2:	bf00      	nop
 80042d4:	3770      	adds	r7, #112	@ 0x70
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	40008000 	.word	0x40008000

080042e0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b09c      	sub	sp, #112	@ 0x70
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80042ee:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042f8:	2b22      	cmp	r3, #34	@ 0x22
 80042fa:	f040 80be 	bne.w	800447a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004304:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800430c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800430e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8004312:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004316:	4013      	ands	r3, r2
 8004318:	b29a      	uxth	r2, r3
 800431a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800431c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004322:	1c9a      	adds	r2, r3, #2
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800432e:	b29b      	uxth	r3, r3
 8004330:	3b01      	subs	r3, #1
 8004332:	b29a      	uxth	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004340:	b29b      	uxth	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	f040 80a3 	bne.w	800448e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004350:	e853 3f00 	ldrex	r3, [r3]
 8004354:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004356:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004358:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800435c:	667b      	str	r3, [r7, #100]	@ 0x64
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	461a      	mov	r2, r3
 8004364:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004366:	657b      	str	r3, [r7, #84]	@ 0x54
 8004368:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800436c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800436e:	e841 2300 	strex	r3, r2, [r1]
 8004372:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004374:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1e6      	bne.n	8004348 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	3308      	adds	r3, #8
 8004380:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004382:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004384:	e853 3f00 	ldrex	r3, [r3]
 8004388:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800438a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800438c:	f023 0301 	bic.w	r3, r3, #1
 8004390:	663b      	str	r3, [r7, #96]	@ 0x60
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	3308      	adds	r3, #8
 8004398:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800439a:	643a      	str	r2, [r7, #64]	@ 0x40
 800439c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800439e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80043a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80043a2:	e841 2300 	strex	r3, r2, [r1]
 80043a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80043a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1e5      	bne.n	800437a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2220      	movs	r2, #32
 80043b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a34      	ldr	r2, [pc, #208]	@ (8004498 <UART_RxISR_16BIT+0x1b8>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d01f      	beq.n	800440c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d018      	beq.n	800440c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e0:	6a3b      	ldr	r3, [r7, #32]
 80043e2:	e853 3f00 	ldrex	r3, [r3]
 80043e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80043ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	461a      	mov	r2, r3
 80043f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043fa:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004400:	e841 2300 	strex	r3, r2, [r1]
 8004404:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1e6      	bne.n	80043da <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004410:	2b01      	cmp	r3, #1
 8004412:	d12e      	bne.n	8004472 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	e853 3f00 	ldrex	r3, [r3]
 8004426:	60bb      	str	r3, [r7, #8]
   return(result);
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	f023 0310 	bic.w	r3, r3, #16
 800442e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	461a      	mov	r2, r3
 8004436:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004438:	61bb      	str	r3, [r7, #24]
 800443a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800443c:	6979      	ldr	r1, [r7, #20]
 800443e:	69ba      	ldr	r2, [r7, #24]
 8004440:	e841 2300 	strex	r3, r2, [r1]
 8004444:	613b      	str	r3, [r7, #16]
   return(result);
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1e6      	bne.n	800441a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	69db      	ldr	r3, [r3, #28]
 8004452:	f003 0310 	and.w	r3, r3, #16
 8004456:	2b10      	cmp	r3, #16
 8004458:	d103      	bne.n	8004462 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2210      	movs	r2, #16
 8004460:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004468:	4619      	mov	r1, r3
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f7fe ffbe 	bl	80033ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004470:	e00d      	b.n	800448e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f7fc f94a 	bl	800070c <HAL_UART_RxCpltCallback>
}
 8004478:	e009      	b.n	800448e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	8b1b      	ldrh	r3, [r3, #24]
 8004480:	b29a      	uxth	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f042 0208 	orr.w	r2, r2, #8
 800448a:	b292      	uxth	r2, r2
 800448c:	831a      	strh	r2, [r3, #24]
}
 800448e:	bf00      	nop
 8004490:	3770      	adds	r7, #112	@ 0x70
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	40008000 	.word	0x40008000

0800449c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <std>:
 80044b0:	2300      	movs	r3, #0
 80044b2:	b510      	push	{r4, lr}
 80044b4:	4604      	mov	r4, r0
 80044b6:	e9c0 3300 	strd	r3, r3, [r0]
 80044ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80044be:	6083      	str	r3, [r0, #8]
 80044c0:	8181      	strh	r1, [r0, #12]
 80044c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80044c4:	81c2      	strh	r2, [r0, #14]
 80044c6:	6183      	str	r3, [r0, #24]
 80044c8:	4619      	mov	r1, r3
 80044ca:	2208      	movs	r2, #8
 80044cc:	305c      	adds	r0, #92	@ 0x5c
 80044ce:	f000 f906 	bl	80046de <memset>
 80044d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004508 <std+0x58>)
 80044d4:	6263      	str	r3, [r4, #36]	@ 0x24
 80044d6:	4b0d      	ldr	r3, [pc, #52]	@ (800450c <std+0x5c>)
 80044d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80044da:	4b0d      	ldr	r3, [pc, #52]	@ (8004510 <std+0x60>)
 80044dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80044de:	4b0d      	ldr	r3, [pc, #52]	@ (8004514 <std+0x64>)
 80044e0:	6323      	str	r3, [r4, #48]	@ 0x30
 80044e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004518 <std+0x68>)
 80044e4:	6224      	str	r4, [r4, #32]
 80044e6:	429c      	cmp	r4, r3
 80044e8:	d006      	beq.n	80044f8 <std+0x48>
 80044ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80044ee:	4294      	cmp	r4, r2
 80044f0:	d002      	beq.n	80044f8 <std+0x48>
 80044f2:	33d0      	adds	r3, #208	@ 0xd0
 80044f4:	429c      	cmp	r4, r3
 80044f6:	d105      	bne.n	8004504 <std+0x54>
 80044f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80044fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004500:	f000 b966 	b.w	80047d0 <__retarget_lock_init_recursive>
 8004504:	bd10      	pop	{r4, pc}
 8004506:	bf00      	nop
 8004508:	08004659 	.word	0x08004659
 800450c:	0800467b 	.word	0x0800467b
 8004510:	080046b3 	.word	0x080046b3
 8004514:	080046d7 	.word	0x080046d7
 8004518:	20000198 	.word	0x20000198

0800451c <stdio_exit_handler>:
 800451c:	4a02      	ldr	r2, [pc, #8]	@ (8004528 <stdio_exit_handler+0xc>)
 800451e:	4903      	ldr	r1, [pc, #12]	@ (800452c <stdio_exit_handler+0x10>)
 8004520:	4803      	ldr	r0, [pc, #12]	@ (8004530 <stdio_exit_handler+0x14>)
 8004522:	f000 b869 	b.w	80045f8 <_fwalk_sglue>
 8004526:	bf00      	nop
 8004528:	2000002c 	.word	0x2000002c
 800452c:	08005071 	.word	0x08005071
 8004530:	2000003c 	.word	0x2000003c

08004534 <cleanup_stdio>:
 8004534:	6841      	ldr	r1, [r0, #4]
 8004536:	4b0c      	ldr	r3, [pc, #48]	@ (8004568 <cleanup_stdio+0x34>)
 8004538:	4299      	cmp	r1, r3
 800453a:	b510      	push	{r4, lr}
 800453c:	4604      	mov	r4, r0
 800453e:	d001      	beq.n	8004544 <cleanup_stdio+0x10>
 8004540:	f000 fd96 	bl	8005070 <_fflush_r>
 8004544:	68a1      	ldr	r1, [r4, #8]
 8004546:	4b09      	ldr	r3, [pc, #36]	@ (800456c <cleanup_stdio+0x38>)
 8004548:	4299      	cmp	r1, r3
 800454a:	d002      	beq.n	8004552 <cleanup_stdio+0x1e>
 800454c:	4620      	mov	r0, r4
 800454e:	f000 fd8f 	bl	8005070 <_fflush_r>
 8004552:	68e1      	ldr	r1, [r4, #12]
 8004554:	4b06      	ldr	r3, [pc, #24]	@ (8004570 <cleanup_stdio+0x3c>)
 8004556:	4299      	cmp	r1, r3
 8004558:	d004      	beq.n	8004564 <cleanup_stdio+0x30>
 800455a:	4620      	mov	r0, r4
 800455c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004560:	f000 bd86 	b.w	8005070 <_fflush_r>
 8004564:	bd10      	pop	{r4, pc}
 8004566:	bf00      	nop
 8004568:	20000198 	.word	0x20000198
 800456c:	20000200 	.word	0x20000200
 8004570:	20000268 	.word	0x20000268

08004574 <global_stdio_init.part.0>:
 8004574:	b510      	push	{r4, lr}
 8004576:	4b0b      	ldr	r3, [pc, #44]	@ (80045a4 <global_stdio_init.part.0+0x30>)
 8004578:	4c0b      	ldr	r4, [pc, #44]	@ (80045a8 <global_stdio_init.part.0+0x34>)
 800457a:	4a0c      	ldr	r2, [pc, #48]	@ (80045ac <global_stdio_init.part.0+0x38>)
 800457c:	601a      	str	r2, [r3, #0]
 800457e:	4620      	mov	r0, r4
 8004580:	2200      	movs	r2, #0
 8004582:	2104      	movs	r1, #4
 8004584:	f7ff ff94 	bl	80044b0 <std>
 8004588:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800458c:	2201      	movs	r2, #1
 800458e:	2109      	movs	r1, #9
 8004590:	f7ff ff8e 	bl	80044b0 <std>
 8004594:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004598:	2202      	movs	r2, #2
 800459a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800459e:	2112      	movs	r1, #18
 80045a0:	f7ff bf86 	b.w	80044b0 <std>
 80045a4:	200002d0 	.word	0x200002d0
 80045a8:	20000198 	.word	0x20000198
 80045ac:	0800451d 	.word	0x0800451d

080045b0 <__sfp_lock_acquire>:
 80045b0:	4801      	ldr	r0, [pc, #4]	@ (80045b8 <__sfp_lock_acquire+0x8>)
 80045b2:	f000 b90e 	b.w	80047d2 <__retarget_lock_acquire_recursive>
 80045b6:	bf00      	nop
 80045b8:	200002d9 	.word	0x200002d9

080045bc <__sfp_lock_release>:
 80045bc:	4801      	ldr	r0, [pc, #4]	@ (80045c4 <__sfp_lock_release+0x8>)
 80045be:	f000 b909 	b.w	80047d4 <__retarget_lock_release_recursive>
 80045c2:	bf00      	nop
 80045c4:	200002d9 	.word	0x200002d9

080045c8 <__sinit>:
 80045c8:	b510      	push	{r4, lr}
 80045ca:	4604      	mov	r4, r0
 80045cc:	f7ff fff0 	bl	80045b0 <__sfp_lock_acquire>
 80045d0:	6a23      	ldr	r3, [r4, #32]
 80045d2:	b11b      	cbz	r3, 80045dc <__sinit+0x14>
 80045d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045d8:	f7ff bff0 	b.w	80045bc <__sfp_lock_release>
 80045dc:	4b04      	ldr	r3, [pc, #16]	@ (80045f0 <__sinit+0x28>)
 80045de:	6223      	str	r3, [r4, #32]
 80045e0:	4b04      	ldr	r3, [pc, #16]	@ (80045f4 <__sinit+0x2c>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1f5      	bne.n	80045d4 <__sinit+0xc>
 80045e8:	f7ff ffc4 	bl	8004574 <global_stdio_init.part.0>
 80045ec:	e7f2      	b.n	80045d4 <__sinit+0xc>
 80045ee:	bf00      	nop
 80045f0:	08004535 	.word	0x08004535
 80045f4:	200002d0 	.word	0x200002d0

080045f8 <_fwalk_sglue>:
 80045f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045fc:	4607      	mov	r7, r0
 80045fe:	4688      	mov	r8, r1
 8004600:	4614      	mov	r4, r2
 8004602:	2600      	movs	r6, #0
 8004604:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004608:	f1b9 0901 	subs.w	r9, r9, #1
 800460c:	d505      	bpl.n	800461a <_fwalk_sglue+0x22>
 800460e:	6824      	ldr	r4, [r4, #0]
 8004610:	2c00      	cmp	r4, #0
 8004612:	d1f7      	bne.n	8004604 <_fwalk_sglue+0xc>
 8004614:	4630      	mov	r0, r6
 8004616:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800461a:	89ab      	ldrh	r3, [r5, #12]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d907      	bls.n	8004630 <_fwalk_sglue+0x38>
 8004620:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004624:	3301      	adds	r3, #1
 8004626:	d003      	beq.n	8004630 <_fwalk_sglue+0x38>
 8004628:	4629      	mov	r1, r5
 800462a:	4638      	mov	r0, r7
 800462c:	47c0      	blx	r8
 800462e:	4306      	orrs	r6, r0
 8004630:	3568      	adds	r5, #104	@ 0x68
 8004632:	e7e9      	b.n	8004608 <_fwalk_sglue+0x10>

08004634 <iprintf>:
 8004634:	b40f      	push	{r0, r1, r2, r3}
 8004636:	b507      	push	{r0, r1, r2, lr}
 8004638:	4906      	ldr	r1, [pc, #24]	@ (8004654 <iprintf+0x20>)
 800463a:	ab04      	add	r3, sp, #16
 800463c:	6808      	ldr	r0, [r1, #0]
 800463e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004642:	6881      	ldr	r1, [r0, #8]
 8004644:	9301      	str	r3, [sp, #4]
 8004646:	f000 f9e9 	bl	8004a1c <_vfiprintf_r>
 800464a:	b003      	add	sp, #12
 800464c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004650:	b004      	add	sp, #16
 8004652:	4770      	bx	lr
 8004654:	20000038 	.word	0x20000038

08004658 <__sread>:
 8004658:	b510      	push	{r4, lr}
 800465a:	460c      	mov	r4, r1
 800465c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004660:	f000 f868 	bl	8004734 <_read_r>
 8004664:	2800      	cmp	r0, #0
 8004666:	bfab      	itete	ge
 8004668:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800466a:	89a3      	ldrhlt	r3, [r4, #12]
 800466c:	181b      	addge	r3, r3, r0
 800466e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004672:	bfac      	ite	ge
 8004674:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004676:	81a3      	strhlt	r3, [r4, #12]
 8004678:	bd10      	pop	{r4, pc}

0800467a <__swrite>:
 800467a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800467e:	461f      	mov	r7, r3
 8004680:	898b      	ldrh	r3, [r1, #12]
 8004682:	05db      	lsls	r3, r3, #23
 8004684:	4605      	mov	r5, r0
 8004686:	460c      	mov	r4, r1
 8004688:	4616      	mov	r6, r2
 800468a:	d505      	bpl.n	8004698 <__swrite+0x1e>
 800468c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004690:	2302      	movs	r3, #2
 8004692:	2200      	movs	r2, #0
 8004694:	f000 f83c 	bl	8004710 <_lseek_r>
 8004698:	89a3      	ldrh	r3, [r4, #12]
 800469a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800469e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80046a2:	81a3      	strh	r3, [r4, #12]
 80046a4:	4632      	mov	r2, r6
 80046a6:	463b      	mov	r3, r7
 80046a8:	4628      	mov	r0, r5
 80046aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046ae:	f000 b853 	b.w	8004758 <_write_r>

080046b2 <__sseek>:
 80046b2:	b510      	push	{r4, lr}
 80046b4:	460c      	mov	r4, r1
 80046b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046ba:	f000 f829 	bl	8004710 <_lseek_r>
 80046be:	1c43      	adds	r3, r0, #1
 80046c0:	89a3      	ldrh	r3, [r4, #12]
 80046c2:	bf15      	itete	ne
 80046c4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80046c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80046ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80046ce:	81a3      	strheq	r3, [r4, #12]
 80046d0:	bf18      	it	ne
 80046d2:	81a3      	strhne	r3, [r4, #12]
 80046d4:	bd10      	pop	{r4, pc}

080046d6 <__sclose>:
 80046d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046da:	f000 b809 	b.w	80046f0 <_close_r>

080046de <memset>:
 80046de:	4402      	add	r2, r0
 80046e0:	4603      	mov	r3, r0
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d100      	bne.n	80046e8 <memset+0xa>
 80046e6:	4770      	bx	lr
 80046e8:	f803 1b01 	strb.w	r1, [r3], #1
 80046ec:	e7f9      	b.n	80046e2 <memset+0x4>
	...

080046f0 <_close_r>:
 80046f0:	b538      	push	{r3, r4, r5, lr}
 80046f2:	4d06      	ldr	r5, [pc, #24]	@ (800470c <_close_r+0x1c>)
 80046f4:	2300      	movs	r3, #0
 80046f6:	4604      	mov	r4, r0
 80046f8:	4608      	mov	r0, r1
 80046fa:	602b      	str	r3, [r5, #0]
 80046fc:	f7fc fa3b 	bl	8000b76 <_close>
 8004700:	1c43      	adds	r3, r0, #1
 8004702:	d102      	bne.n	800470a <_close_r+0x1a>
 8004704:	682b      	ldr	r3, [r5, #0]
 8004706:	b103      	cbz	r3, 800470a <_close_r+0x1a>
 8004708:	6023      	str	r3, [r4, #0]
 800470a:	bd38      	pop	{r3, r4, r5, pc}
 800470c:	200002d4 	.word	0x200002d4

08004710 <_lseek_r>:
 8004710:	b538      	push	{r3, r4, r5, lr}
 8004712:	4d07      	ldr	r5, [pc, #28]	@ (8004730 <_lseek_r+0x20>)
 8004714:	4604      	mov	r4, r0
 8004716:	4608      	mov	r0, r1
 8004718:	4611      	mov	r1, r2
 800471a:	2200      	movs	r2, #0
 800471c:	602a      	str	r2, [r5, #0]
 800471e:	461a      	mov	r2, r3
 8004720:	f7fc fa50 	bl	8000bc4 <_lseek>
 8004724:	1c43      	adds	r3, r0, #1
 8004726:	d102      	bne.n	800472e <_lseek_r+0x1e>
 8004728:	682b      	ldr	r3, [r5, #0]
 800472a:	b103      	cbz	r3, 800472e <_lseek_r+0x1e>
 800472c:	6023      	str	r3, [r4, #0]
 800472e:	bd38      	pop	{r3, r4, r5, pc}
 8004730:	200002d4 	.word	0x200002d4

08004734 <_read_r>:
 8004734:	b538      	push	{r3, r4, r5, lr}
 8004736:	4d07      	ldr	r5, [pc, #28]	@ (8004754 <_read_r+0x20>)
 8004738:	4604      	mov	r4, r0
 800473a:	4608      	mov	r0, r1
 800473c:	4611      	mov	r1, r2
 800473e:	2200      	movs	r2, #0
 8004740:	602a      	str	r2, [r5, #0]
 8004742:	461a      	mov	r2, r3
 8004744:	f7fc f9de 	bl	8000b04 <_read>
 8004748:	1c43      	adds	r3, r0, #1
 800474a:	d102      	bne.n	8004752 <_read_r+0x1e>
 800474c:	682b      	ldr	r3, [r5, #0]
 800474e:	b103      	cbz	r3, 8004752 <_read_r+0x1e>
 8004750:	6023      	str	r3, [r4, #0]
 8004752:	bd38      	pop	{r3, r4, r5, pc}
 8004754:	200002d4 	.word	0x200002d4

08004758 <_write_r>:
 8004758:	b538      	push	{r3, r4, r5, lr}
 800475a:	4d07      	ldr	r5, [pc, #28]	@ (8004778 <_write_r+0x20>)
 800475c:	4604      	mov	r4, r0
 800475e:	4608      	mov	r0, r1
 8004760:	4611      	mov	r1, r2
 8004762:	2200      	movs	r2, #0
 8004764:	602a      	str	r2, [r5, #0]
 8004766:	461a      	mov	r2, r3
 8004768:	f7fc f9e9 	bl	8000b3e <_write>
 800476c:	1c43      	adds	r3, r0, #1
 800476e:	d102      	bne.n	8004776 <_write_r+0x1e>
 8004770:	682b      	ldr	r3, [r5, #0]
 8004772:	b103      	cbz	r3, 8004776 <_write_r+0x1e>
 8004774:	6023      	str	r3, [r4, #0]
 8004776:	bd38      	pop	{r3, r4, r5, pc}
 8004778:	200002d4 	.word	0x200002d4

0800477c <__errno>:
 800477c:	4b01      	ldr	r3, [pc, #4]	@ (8004784 <__errno+0x8>)
 800477e:	6818      	ldr	r0, [r3, #0]
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	20000038 	.word	0x20000038

08004788 <__libc_init_array>:
 8004788:	b570      	push	{r4, r5, r6, lr}
 800478a:	4d0d      	ldr	r5, [pc, #52]	@ (80047c0 <__libc_init_array+0x38>)
 800478c:	4c0d      	ldr	r4, [pc, #52]	@ (80047c4 <__libc_init_array+0x3c>)
 800478e:	1b64      	subs	r4, r4, r5
 8004790:	10a4      	asrs	r4, r4, #2
 8004792:	2600      	movs	r6, #0
 8004794:	42a6      	cmp	r6, r4
 8004796:	d109      	bne.n	80047ac <__libc_init_array+0x24>
 8004798:	4d0b      	ldr	r5, [pc, #44]	@ (80047c8 <__libc_init_array+0x40>)
 800479a:	4c0c      	ldr	r4, [pc, #48]	@ (80047cc <__libc_init_array+0x44>)
 800479c:	f000 fdb8 	bl	8005310 <_init>
 80047a0:	1b64      	subs	r4, r4, r5
 80047a2:	10a4      	asrs	r4, r4, #2
 80047a4:	2600      	movs	r6, #0
 80047a6:	42a6      	cmp	r6, r4
 80047a8:	d105      	bne.n	80047b6 <__libc_init_array+0x2e>
 80047aa:	bd70      	pop	{r4, r5, r6, pc}
 80047ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80047b0:	4798      	blx	r3
 80047b2:	3601      	adds	r6, #1
 80047b4:	e7ee      	b.n	8004794 <__libc_init_array+0xc>
 80047b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80047ba:	4798      	blx	r3
 80047bc:	3601      	adds	r6, #1
 80047be:	e7f2      	b.n	80047a6 <__libc_init_array+0x1e>
 80047c0:	080053cc 	.word	0x080053cc
 80047c4:	080053cc 	.word	0x080053cc
 80047c8:	080053cc 	.word	0x080053cc
 80047cc:	080053d0 	.word	0x080053d0

080047d0 <__retarget_lock_init_recursive>:
 80047d0:	4770      	bx	lr

080047d2 <__retarget_lock_acquire_recursive>:
 80047d2:	4770      	bx	lr

080047d4 <__retarget_lock_release_recursive>:
 80047d4:	4770      	bx	lr
	...

080047d8 <_free_r>:
 80047d8:	b538      	push	{r3, r4, r5, lr}
 80047da:	4605      	mov	r5, r0
 80047dc:	2900      	cmp	r1, #0
 80047de:	d041      	beq.n	8004864 <_free_r+0x8c>
 80047e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047e4:	1f0c      	subs	r4, r1, #4
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	bfb8      	it	lt
 80047ea:	18e4      	addlt	r4, r4, r3
 80047ec:	f000 f8e0 	bl	80049b0 <__malloc_lock>
 80047f0:	4a1d      	ldr	r2, [pc, #116]	@ (8004868 <_free_r+0x90>)
 80047f2:	6813      	ldr	r3, [r2, #0]
 80047f4:	b933      	cbnz	r3, 8004804 <_free_r+0x2c>
 80047f6:	6063      	str	r3, [r4, #4]
 80047f8:	6014      	str	r4, [r2, #0]
 80047fa:	4628      	mov	r0, r5
 80047fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004800:	f000 b8dc 	b.w	80049bc <__malloc_unlock>
 8004804:	42a3      	cmp	r3, r4
 8004806:	d908      	bls.n	800481a <_free_r+0x42>
 8004808:	6820      	ldr	r0, [r4, #0]
 800480a:	1821      	adds	r1, r4, r0
 800480c:	428b      	cmp	r3, r1
 800480e:	bf01      	itttt	eq
 8004810:	6819      	ldreq	r1, [r3, #0]
 8004812:	685b      	ldreq	r3, [r3, #4]
 8004814:	1809      	addeq	r1, r1, r0
 8004816:	6021      	streq	r1, [r4, #0]
 8004818:	e7ed      	b.n	80047f6 <_free_r+0x1e>
 800481a:	461a      	mov	r2, r3
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	b10b      	cbz	r3, 8004824 <_free_r+0x4c>
 8004820:	42a3      	cmp	r3, r4
 8004822:	d9fa      	bls.n	800481a <_free_r+0x42>
 8004824:	6811      	ldr	r1, [r2, #0]
 8004826:	1850      	adds	r0, r2, r1
 8004828:	42a0      	cmp	r0, r4
 800482a:	d10b      	bne.n	8004844 <_free_r+0x6c>
 800482c:	6820      	ldr	r0, [r4, #0]
 800482e:	4401      	add	r1, r0
 8004830:	1850      	adds	r0, r2, r1
 8004832:	4283      	cmp	r3, r0
 8004834:	6011      	str	r1, [r2, #0]
 8004836:	d1e0      	bne.n	80047fa <_free_r+0x22>
 8004838:	6818      	ldr	r0, [r3, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	6053      	str	r3, [r2, #4]
 800483e:	4408      	add	r0, r1
 8004840:	6010      	str	r0, [r2, #0]
 8004842:	e7da      	b.n	80047fa <_free_r+0x22>
 8004844:	d902      	bls.n	800484c <_free_r+0x74>
 8004846:	230c      	movs	r3, #12
 8004848:	602b      	str	r3, [r5, #0]
 800484a:	e7d6      	b.n	80047fa <_free_r+0x22>
 800484c:	6820      	ldr	r0, [r4, #0]
 800484e:	1821      	adds	r1, r4, r0
 8004850:	428b      	cmp	r3, r1
 8004852:	bf04      	itt	eq
 8004854:	6819      	ldreq	r1, [r3, #0]
 8004856:	685b      	ldreq	r3, [r3, #4]
 8004858:	6063      	str	r3, [r4, #4]
 800485a:	bf04      	itt	eq
 800485c:	1809      	addeq	r1, r1, r0
 800485e:	6021      	streq	r1, [r4, #0]
 8004860:	6054      	str	r4, [r2, #4]
 8004862:	e7ca      	b.n	80047fa <_free_r+0x22>
 8004864:	bd38      	pop	{r3, r4, r5, pc}
 8004866:	bf00      	nop
 8004868:	200002e0 	.word	0x200002e0

0800486c <sbrk_aligned>:
 800486c:	b570      	push	{r4, r5, r6, lr}
 800486e:	4e0f      	ldr	r6, [pc, #60]	@ (80048ac <sbrk_aligned+0x40>)
 8004870:	460c      	mov	r4, r1
 8004872:	6831      	ldr	r1, [r6, #0]
 8004874:	4605      	mov	r5, r0
 8004876:	b911      	cbnz	r1, 800487e <sbrk_aligned+0x12>
 8004878:	f000 fcb6 	bl	80051e8 <_sbrk_r>
 800487c:	6030      	str	r0, [r6, #0]
 800487e:	4621      	mov	r1, r4
 8004880:	4628      	mov	r0, r5
 8004882:	f000 fcb1 	bl	80051e8 <_sbrk_r>
 8004886:	1c43      	adds	r3, r0, #1
 8004888:	d103      	bne.n	8004892 <sbrk_aligned+0x26>
 800488a:	f04f 34ff 	mov.w	r4, #4294967295
 800488e:	4620      	mov	r0, r4
 8004890:	bd70      	pop	{r4, r5, r6, pc}
 8004892:	1cc4      	adds	r4, r0, #3
 8004894:	f024 0403 	bic.w	r4, r4, #3
 8004898:	42a0      	cmp	r0, r4
 800489a:	d0f8      	beq.n	800488e <sbrk_aligned+0x22>
 800489c:	1a21      	subs	r1, r4, r0
 800489e:	4628      	mov	r0, r5
 80048a0:	f000 fca2 	bl	80051e8 <_sbrk_r>
 80048a4:	3001      	adds	r0, #1
 80048a6:	d1f2      	bne.n	800488e <sbrk_aligned+0x22>
 80048a8:	e7ef      	b.n	800488a <sbrk_aligned+0x1e>
 80048aa:	bf00      	nop
 80048ac:	200002dc 	.word	0x200002dc

080048b0 <_malloc_r>:
 80048b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048b4:	1ccd      	adds	r5, r1, #3
 80048b6:	f025 0503 	bic.w	r5, r5, #3
 80048ba:	3508      	adds	r5, #8
 80048bc:	2d0c      	cmp	r5, #12
 80048be:	bf38      	it	cc
 80048c0:	250c      	movcc	r5, #12
 80048c2:	2d00      	cmp	r5, #0
 80048c4:	4606      	mov	r6, r0
 80048c6:	db01      	blt.n	80048cc <_malloc_r+0x1c>
 80048c8:	42a9      	cmp	r1, r5
 80048ca:	d904      	bls.n	80048d6 <_malloc_r+0x26>
 80048cc:	230c      	movs	r3, #12
 80048ce:	6033      	str	r3, [r6, #0]
 80048d0:	2000      	movs	r0, #0
 80048d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80049ac <_malloc_r+0xfc>
 80048da:	f000 f869 	bl	80049b0 <__malloc_lock>
 80048de:	f8d8 3000 	ldr.w	r3, [r8]
 80048e2:	461c      	mov	r4, r3
 80048e4:	bb44      	cbnz	r4, 8004938 <_malloc_r+0x88>
 80048e6:	4629      	mov	r1, r5
 80048e8:	4630      	mov	r0, r6
 80048ea:	f7ff ffbf 	bl	800486c <sbrk_aligned>
 80048ee:	1c43      	adds	r3, r0, #1
 80048f0:	4604      	mov	r4, r0
 80048f2:	d158      	bne.n	80049a6 <_malloc_r+0xf6>
 80048f4:	f8d8 4000 	ldr.w	r4, [r8]
 80048f8:	4627      	mov	r7, r4
 80048fa:	2f00      	cmp	r7, #0
 80048fc:	d143      	bne.n	8004986 <_malloc_r+0xd6>
 80048fe:	2c00      	cmp	r4, #0
 8004900:	d04b      	beq.n	800499a <_malloc_r+0xea>
 8004902:	6823      	ldr	r3, [r4, #0]
 8004904:	4639      	mov	r1, r7
 8004906:	4630      	mov	r0, r6
 8004908:	eb04 0903 	add.w	r9, r4, r3
 800490c:	f000 fc6c 	bl	80051e8 <_sbrk_r>
 8004910:	4581      	cmp	r9, r0
 8004912:	d142      	bne.n	800499a <_malloc_r+0xea>
 8004914:	6821      	ldr	r1, [r4, #0]
 8004916:	1a6d      	subs	r5, r5, r1
 8004918:	4629      	mov	r1, r5
 800491a:	4630      	mov	r0, r6
 800491c:	f7ff ffa6 	bl	800486c <sbrk_aligned>
 8004920:	3001      	adds	r0, #1
 8004922:	d03a      	beq.n	800499a <_malloc_r+0xea>
 8004924:	6823      	ldr	r3, [r4, #0]
 8004926:	442b      	add	r3, r5
 8004928:	6023      	str	r3, [r4, #0]
 800492a:	f8d8 3000 	ldr.w	r3, [r8]
 800492e:	685a      	ldr	r2, [r3, #4]
 8004930:	bb62      	cbnz	r2, 800498c <_malloc_r+0xdc>
 8004932:	f8c8 7000 	str.w	r7, [r8]
 8004936:	e00f      	b.n	8004958 <_malloc_r+0xa8>
 8004938:	6822      	ldr	r2, [r4, #0]
 800493a:	1b52      	subs	r2, r2, r5
 800493c:	d420      	bmi.n	8004980 <_malloc_r+0xd0>
 800493e:	2a0b      	cmp	r2, #11
 8004940:	d917      	bls.n	8004972 <_malloc_r+0xc2>
 8004942:	1961      	adds	r1, r4, r5
 8004944:	42a3      	cmp	r3, r4
 8004946:	6025      	str	r5, [r4, #0]
 8004948:	bf18      	it	ne
 800494a:	6059      	strne	r1, [r3, #4]
 800494c:	6863      	ldr	r3, [r4, #4]
 800494e:	bf08      	it	eq
 8004950:	f8c8 1000 	streq.w	r1, [r8]
 8004954:	5162      	str	r2, [r4, r5]
 8004956:	604b      	str	r3, [r1, #4]
 8004958:	4630      	mov	r0, r6
 800495a:	f000 f82f 	bl	80049bc <__malloc_unlock>
 800495e:	f104 000b 	add.w	r0, r4, #11
 8004962:	1d23      	adds	r3, r4, #4
 8004964:	f020 0007 	bic.w	r0, r0, #7
 8004968:	1ac2      	subs	r2, r0, r3
 800496a:	bf1c      	itt	ne
 800496c:	1a1b      	subne	r3, r3, r0
 800496e:	50a3      	strne	r3, [r4, r2]
 8004970:	e7af      	b.n	80048d2 <_malloc_r+0x22>
 8004972:	6862      	ldr	r2, [r4, #4]
 8004974:	42a3      	cmp	r3, r4
 8004976:	bf0c      	ite	eq
 8004978:	f8c8 2000 	streq.w	r2, [r8]
 800497c:	605a      	strne	r2, [r3, #4]
 800497e:	e7eb      	b.n	8004958 <_malloc_r+0xa8>
 8004980:	4623      	mov	r3, r4
 8004982:	6864      	ldr	r4, [r4, #4]
 8004984:	e7ae      	b.n	80048e4 <_malloc_r+0x34>
 8004986:	463c      	mov	r4, r7
 8004988:	687f      	ldr	r7, [r7, #4]
 800498a:	e7b6      	b.n	80048fa <_malloc_r+0x4a>
 800498c:	461a      	mov	r2, r3
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	42a3      	cmp	r3, r4
 8004992:	d1fb      	bne.n	800498c <_malloc_r+0xdc>
 8004994:	2300      	movs	r3, #0
 8004996:	6053      	str	r3, [r2, #4]
 8004998:	e7de      	b.n	8004958 <_malloc_r+0xa8>
 800499a:	230c      	movs	r3, #12
 800499c:	6033      	str	r3, [r6, #0]
 800499e:	4630      	mov	r0, r6
 80049a0:	f000 f80c 	bl	80049bc <__malloc_unlock>
 80049a4:	e794      	b.n	80048d0 <_malloc_r+0x20>
 80049a6:	6005      	str	r5, [r0, #0]
 80049a8:	e7d6      	b.n	8004958 <_malloc_r+0xa8>
 80049aa:	bf00      	nop
 80049ac:	200002e0 	.word	0x200002e0

080049b0 <__malloc_lock>:
 80049b0:	4801      	ldr	r0, [pc, #4]	@ (80049b8 <__malloc_lock+0x8>)
 80049b2:	f7ff bf0e 	b.w	80047d2 <__retarget_lock_acquire_recursive>
 80049b6:	bf00      	nop
 80049b8:	200002d8 	.word	0x200002d8

080049bc <__malloc_unlock>:
 80049bc:	4801      	ldr	r0, [pc, #4]	@ (80049c4 <__malloc_unlock+0x8>)
 80049be:	f7ff bf09 	b.w	80047d4 <__retarget_lock_release_recursive>
 80049c2:	bf00      	nop
 80049c4:	200002d8 	.word	0x200002d8

080049c8 <__sfputc_r>:
 80049c8:	6893      	ldr	r3, [r2, #8]
 80049ca:	3b01      	subs	r3, #1
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	b410      	push	{r4}
 80049d0:	6093      	str	r3, [r2, #8]
 80049d2:	da08      	bge.n	80049e6 <__sfputc_r+0x1e>
 80049d4:	6994      	ldr	r4, [r2, #24]
 80049d6:	42a3      	cmp	r3, r4
 80049d8:	db01      	blt.n	80049de <__sfputc_r+0x16>
 80049da:	290a      	cmp	r1, #10
 80049dc:	d103      	bne.n	80049e6 <__sfputc_r+0x1e>
 80049de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049e2:	f000 bb6d 	b.w	80050c0 <__swbuf_r>
 80049e6:	6813      	ldr	r3, [r2, #0]
 80049e8:	1c58      	adds	r0, r3, #1
 80049ea:	6010      	str	r0, [r2, #0]
 80049ec:	7019      	strb	r1, [r3, #0]
 80049ee:	4608      	mov	r0, r1
 80049f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049f4:	4770      	bx	lr

080049f6 <__sfputs_r>:
 80049f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049f8:	4606      	mov	r6, r0
 80049fa:	460f      	mov	r7, r1
 80049fc:	4614      	mov	r4, r2
 80049fe:	18d5      	adds	r5, r2, r3
 8004a00:	42ac      	cmp	r4, r5
 8004a02:	d101      	bne.n	8004a08 <__sfputs_r+0x12>
 8004a04:	2000      	movs	r0, #0
 8004a06:	e007      	b.n	8004a18 <__sfputs_r+0x22>
 8004a08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a0c:	463a      	mov	r2, r7
 8004a0e:	4630      	mov	r0, r6
 8004a10:	f7ff ffda 	bl	80049c8 <__sfputc_r>
 8004a14:	1c43      	adds	r3, r0, #1
 8004a16:	d1f3      	bne.n	8004a00 <__sfputs_r+0xa>
 8004a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004a1c <_vfiprintf_r>:
 8004a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a20:	460d      	mov	r5, r1
 8004a22:	b09d      	sub	sp, #116	@ 0x74
 8004a24:	4614      	mov	r4, r2
 8004a26:	4698      	mov	r8, r3
 8004a28:	4606      	mov	r6, r0
 8004a2a:	b118      	cbz	r0, 8004a34 <_vfiprintf_r+0x18>
 8004a2c:	6a03      	ldr	r3, [r0, #32]
 8004a2e:	b90b      	cbnz	r3, 8004a34 <_vfiprintf_r+0x18>
 8004a30:	f7ff fdca 	bl	80045c8 <__sinit>
 8004a34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004a36:	07d9      	lsls	r1, r3, #31
 8004a38:	d405      	bmi.n	8004a46 <_vfiprintf_r+0x2a>
 8004a3a:	89ab      	ldrh	r3, [r5, #12]
 8004a3c:	059a      	lsls	r2, r3, #22
 8004a3e:	d402      	bmi.n	8004a46 <_vfiprintf_r+0x2a>
 8004a40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004a42:	f7ff fec6 	bl	80047d2 <__retarget_lock_acquire_recursive>
 8004a46:	89ab      	ldrh	r3, [r5, #12]
 8004a48:	071b      	lsls	r3, r3, #28
 8004a4a:	d501      	bpl.n	8004a50 <_vfiprintf_r+0x34>
 8004a4c:	692b      	ldr	r3, [r5, #16]
 8004a4e:	b99b      	cbnz	r3, 8004a78 <_vfiprintf_r+0x5c>
 8004a50:	4629      	mov	r1, r5
 8004a52:	4630      	mov	r0, r6
 8004a54:	f000 fb72 	bl	800513c <__swsetup_r>
 8004a58:	b170      	cbz	r0, 8004a78 <_vfiprintf_r+0x5c>
 8004a5a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004a5c:	07dc      	lsls	r4, r3, #31
 8004a5e:	d504      	bpl.n	8004a6a <_vfiprintf_r+0x4e>
 8004a60:	f04f 30ff 	mov.w	r0, #4294967295
 8004a64:	b01d      	add	sp, #116	@ 0x74
 8004a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a6a:	89ab      	ldrh	r3, [r5, #12]
 8004a6c:	0598      	lsls	r0, r3, #22
 8004a6e:	d4f7      	bmi.n	8004a60 <_vfiprintf_r+0x44>
 8004a70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004a72:	f7ff feaf 	bl	80047d4 <__retarget_lock_release_recursive>
 8004a76:	e7f3      	b.n	8004a60 <_vfiprintf_r+0x44>
 8004a78:	2300      	movs	r3, #0
 8004a7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a7c:	2320      	movs	r3, #32
 8004a7e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004a82:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a86:	2330      	movs	r3, #48	@ 0x30
 8004a88:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004c38 <_vfiprintf_r+0x21c>
 8004a8c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004a90:	f04f 0901 	mov.w	r9, #1
 8004a94:	4623      	mov	r3, r4
 8004a96:	469a      	mov	sl, r3
 8004a98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a9c:	b10a      	cbz	r2, 8004aa2 <_vfiprintf_r+0x86>
 8004a9e:	2a25      	cmp	r2, #37	@ 0x25
 8004aa0:	d1f9      	bne.n	8004a96 <_vfiprintf_r+0x7a>
 8004aa2:	ebba 0b04 	subs.w	fp, sl, r4
 8004aa6:	d00b      	beq.n	8004ac0 <_vfiprintf_r+0xa4>
 8004aa8:	465b      	mov	r3, fp
 8004aaa:	4622      	mov	r2, r4
 8004aac:	4629      	mov	r1, r5
 8004aae:	4630      	mov	r0, r6
 8004ab0:	f7ff ffa1 	bl	80049f6 <__sfputs_r>
 8004ab4:	3001      	adds	r0, #1
 8004ab6:	f000 80a7 	beq.w	8004c08 <_vfiprintf_r+0x1ec>
 8004aba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004abc:	445a      	add	r2, fp
 8004abe:	9209      	str	r2, [sp, #36]	@ 0x24
 8004ac0:	f89a 3000 	ldrb.w	r3, [sl]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f000 809f 	beq.w	8004c08 <_vfiprintf_r+0x1ec>
 8004aca:	2300      	movs	r3, #0
 8004acc:	f04f 32ff 	mov.w	r2, #4294967295
 8004ad0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ad4:	f10a 0a01 	add.w	sl, sl, #1
 8004ad8:	9304      	str	r3, [sp, #16]
 8004ada:	9307      	str	r3, [sp, #28]
 8004adc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004ae0:	931a      	str	r3, [sp, #104]	@ 0x68
 8004ae2:	4654      	mov	r4, sl
 8004ae4:	2205      	movs	r2, #5
 8004ae6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004aea:	4853      	ldr	r0, [pc, #332]	@ (8004c38 <_vfiprintf_r+0x21c>)
 8004aec:	f7fb fb88 	bl	8000200 <memchr>
 8004af0:	9a04      	ldr	r2, [sp, #16]
 8004af2:	b9d8      	cbnz	r0, 8004b2c <_vfiprintf_r+0x110>
 8004af4:	06d1      	lsls	r1, r2, #27
 8004af6:	bf44      	itt	mi
 8004af8:	2320      	movmi	r3, #32
 8004afa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004afe:	0713      	lsls	r3, r2, #28
 8004b00:	bf44      	itt	mi
 8004b02:	232b      	movmi	r3, #43	@ 0x2b
 8004b04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004b08:	f89a 3000 	ldrb.w	r3, [sl]
 8004b0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b0e:	d015      	beq.n	8004b3c <_vfiprintf_r+0x120>
 8004b10:	9a07      	ldr	r2, [sp, #28]
 8004b12:	4654      	mov	r4, sl
 8004b14:	2000      	movs	r0, #0
 8004b16:	f04f 0c0a 	mov.w	ip, #10
 8004b1a:	4621      	mov	r1, r4
 8004b1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b20:	3b30      	subs	r3, #48	@ 0x30
 8004b22:	2b09      	cmp	r3, #9
 8004b24:	d94b      	bls.n	8004bbe <_vfiprintf_r+0x1a2>
 8004b26:	b1b0      	cbz	r0, 8004b56 <_vfiprintf_r+0x13a>
 8004b28:	9207      	str	r2, [sp, #28]
 8004b2a:	e014      	b.n	8004b56 <_vfiprintf_r+0x13a>
 8004b2c:	eba0 0308 	sub.w	r3, r0, r8
 8004b30:	fa09 f303 	lsl.w	r3, r9, r3
 8004b34:	4313      	orrs	r3, r2
 8004b36:	9304      	str	r3, [sp, #16]
 8004b38:	46a2      	mov	sl, r4
 8004b3a:	e7d2      	b.n	8004ae2 <_vfiprintf_r+0xc6>
 8004b3c:	9b03      	ldr	r3, [sp, #12]
 8004b3e:	1d19      	adds	r1, r3, #4
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	9103      	str	r1, [sp, #12]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	bfbb      	ittet	lt
 8004b48:	425b      	neglt	r3, r3
 8004b4a:	f042 0202 	orrlt.w	r2, r2, #2
 8004b4e:	9307      	strge	r3, [sp, #28]
 8004b50:	9307      	strlt	r3, [sp, #28]
 8004b52:	bfb8      	it	lt
 8004b54:	9204      	strlt	r2, [sp, #16]
 8004b56:	7823      	ldrb	r3, [r4, #0]
 8004b58:	2b2e      	cmp	r3, #46	@ 0x2e
 8004b5a:	d10a      	bne.n	8004b72 <_vfiprintf_r+0x156>
 8004b5c:	7863      	ldrb	r3, [r4, #1]
 8004b5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b60:	d132      	bne.n	8004bc8 <_vfiprintf_r+0x1ac>
 8004b62:	9b03      	ldr	r3, [sp, #12]
 8004b64:	1d1a      	adds	r2, r3, #4
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	9203      	str	r2, [sp, #12]
 8004b6a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004b6e:	3402      	adds	r4, #2
 8004b70:	9305      	str	r3, [sp, #20]
 8004b72:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004c48 <_vfiprintf_r+0x22c>
 8004b76:	7821      	ldrb	r1, [r4, #0]
 8004b78:	2203      	movs	r2, #3
 8004b7a:	4650      	mov	r0, sl
 8004b7c:	f7fb fb40 	bl	8000200 <memchr>
 8004b80:	b138      	cbz	r0, 8004b92 <_vfiprintf_r+0x176>
 8004b82:	9b04      	ldr	r3, [sp, #16]
 8004b84:	eba0 000a 	sub.w	r0, r0, sl
 8004b88:	2240      	movs	r2, #64	@ 0x40
 8004b8a:	4082      	lsls	r2, r0
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	3401      	adds	r4, #1
 8004b90:	9304      	str	r3, [sp, #16]
 8004b92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b96:	4829      	ldr	r0, [pc, #164]	@ (8004c3c <_vfiprintf_r+0x220>)
 8004b98:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004b9c:	2206      	movs	r2, #6
 8004b9e:	f7fb fb2f 	bl	8000200 <memchr>
 8004ba2:	2800      	cmp	r0, #0
 8004ba4:	d03f      	beq.n	8004c26 <_vfiprintf_r+0x20a>
 8004ba6:	4b26      	ldr	r3, [pc, #152]	@ (8004c40 <_vfiprintf_r+0x224>)
 8004ba8:	bb1b      	cbnz	r3, 8004bf2 <_vfiprintf_r+0x1d6>
 8004baa:	9b03      	ldr	r3, [sp, #12]
 8004bac:	3307      	adds	r3, #7
 8004bae:	f023 0307 	bic.w	r3, r3, #7
 8004bb2:	3308      	adds	r3, #8
 8004bb4:	9303      	str	r3, [sp, #12]
 8004bb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004bb8:	443b      	add	r3, r7
 8004bba:	9309      	str	r3, [sp, #36]	@ 0x24
 8004bbc:	e76a      	b.n	8004a94 <_vfiprintf_r+0x78>
 8004bbe:	fb0c 3202 	mla	r2, ip, r2, r3
 8004bc2:	460c      	mov	r4, r1
 8004bc4:	2001      	movs	r0, #1
 8004bc6:	e7a8      	b.n	8004b1a <_vfiprintf_r+0xfe>
 8004bc8:	2300      	movs	r3, #0
 8004bca:	3401      	adds	r4, #1
 8004bcc:	9305      	str	r3, [sp, #20]
 8004bce:	4619      	mov	r1, r3
 8004bd0:	f04f 0c0a 	mov.w	ip, #10
 8004bd4:	4620      	mov	r0, r4
 8004bd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004bda:	3a30      	subs	r2, #48	@ 0x30
 8004bdc:	2a09      	cmp	r2, #9
 8004bde:	d903      	bls.n	8004be8 <_vfiprintf_r+0x1cc>
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d0c6      	beq.n	8004b72 <_vfiprintf_r+0x156>
 8004be4:	9105      	str	r1, [sp, #20]
 8004be6:	e7c4      	b.n	8004b72 <_vfiprintf_r+0x156>
 8004be8:	fb0c 2101 	mla	r1, ip, r1, r2
 8004bec:	4604      	mov	r4, r0
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e7f0      	b.n	8004bd4 <_vfiprintf_r+0x1b8>
 8004bf2:	ab03      	add	r3, sp, #12
 8004bf4:	9300      	str	r3, [sp, #0]
 8004bf6:	462a      	mov	r2, r5
 8004bf8:	4b12      	ldr	r3, [pc, #72]	@ (8004c44 <_vfiprintf_r+0x228>)
 8004bfa:	a904      	add	r1, sp, #16
 8004bfc:	4630      	mov	r0, r6
 8004bfe:	f3af 8000 	nop.w
 8004c02:	4607      	mov	r7, r0
 8004c04:	1c78      	adds	r0, r7, #1
 8004c06:	d1d6      	bne.n	8004bb6 <_vfiprintf_r+0x19a>
 8004c08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004c0a:	07d9      	lsls	r1, r3, #31
 8004c0c:	d405      	bmi.n	8004c1a <_vfiprintf_r+0x1fe>
 8004c0e:	89ab      	ldrh	r3, [r5, #12]
 8004c10:	059a      	lsls	r2, r3, #22
 8004c12:	d402      	bmi.n	8004c1a <_vfiprintf_r+0x1fe>
 8004c14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004c16:	f7ff fddd 	bl	80047d4 <__retarget_lock_release_recursive>
 8004c1a:	89ab      	ldrh	r3, [r5, #12]
 8004c1c:	065b      	lsls	r3, r3, #25
 8004c1e:	f53f af1f 	bmi.w	8004a60 <_vfiprintf_r+0x44>
 8004c22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004c24:	e71e      	b.n	8004a64 <_vfiprintf_r+0x48>
 8004c26:	ab03      	add	r3, sp, #12
 8004c28:	9300      	str	r3, [sp, #0]
 8004c2a:	462a      	mov	r2, r5
 8004c2c:	4b05      	ldr	r3, [pc, #20]	@ (8004c44 <_vfiprintf_r+0x228>)
 8004c2e:	a904      	add	r1, sp, #16
 8004c30:	4630      	mov	r0, r6
 8004c32:	f000 f879 	bl	8004d28 <_printf_i>
 8004c36:	e7e4      	b.n	8004c02 <_vfiprintf_r+0x1e6>
 8004c38:	08005390 	.word	0x08005390
 8004c3c:	0800539a 	.word	0x0800539a
 8004c40:	00000000 	.word	0x00000000
 8004c44:	080049f7 	.word	0x080049f7
 8004c48:	08005396 	.word	0x08005396

08004c4c <_printf_common>:
 8004c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c50:	4616      	mov	r6, r2
 8004c52:	4698      	mov	r8, r3
 8004c54:	688a      	ldr	r2, [r1, #8]
 8004c56:	690b      	ldr	r3, [r1, #16]
 8004c58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	bfb8      	it	lt
 8004c60:	4613      	movlt	r3, r2
 8004c62:	6033      	str	r3, [r6, #0]
 8004c64:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004c68:	4607      	mov	r7, r0
 8004c6a:	460c      	mov	r4, r1
 8004c6c:	b10a      	cbz	r2, 8004c72 <_printf_common+0x26>
 8004c6e:	3301      	adds	r3, #1
 8004c70:	6033      	str	r3, [r6, #0]
 8004c72:	6823      	ldr	r3, [r4, #0]
 8004c74:	0699      	lsls	r1, r3, #26
 8004c76:	bf42      	ittt	mi
 8004c78:	6833      	ldrmi	r3, [r6, #0]
 8004c7a:	3302      	addmi	r3, #2
 8004c7c:	6033      	strmi	r3, [r6, #0]
 8004c7e:	6825      	ldr	r5, [r4, #0]
 8004c80:	f015 0506 	ands.w	r5, r5, #6
 8004c84:	d106      	bne.n	8004c94 <_printf_common+0x48>
 8004c86:	f104 0a19 	add.w	sl, r4, #25
 8004c8a:	68e3      	ldr	r3, [r4, #12]
 8004c8c:	6832      	ldr	r2, [r6, #0]
 8004c8e:	1a9b      	subs	r3, r3, r2
 8004c90:	42ab      	cmp	r3, r5
 8004c92:	dc26      	bgt.n	8004ce2 <_printf_common+0x96>
 8004c94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004c98:	6822      	ldr	r2, [r4, #0]
 8004c9a:	3b00      	subs	r3, #0
 8004c9c:	bf18      	it	ne
 8004c9e:	2301      	movne	r3, #1
 8004ca0:	0692      	lsls	r2, r2, #26
 8004ca2:	d42b      	bmi.n	8004cfc <_printf_common+0xb0>
 8004ca4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004ca8:	4641      	mov	r1, r8
 8004caa:	4638      	mov	r0, r7
 8004cac:	47c8      	blx	r9
 8004cae:	3001      	adds	r0, #1
 8004cb0:	d01e      	beq.n	8004cf0 <_printf_common+0xa4>
 8004cb2:	6823      	ldr	r3, [r4, #0]
 8004cb4:	6922      	ldr	r2, [r4, #16]
 8004cb6:	f003 0306 	and.w	r3, r3, #6
 8004cba:	2b04      	cmp	r3, #4
 8004cbc:	bf02      	ittt	eq
 8004cbe:	68e5      	ldreq	r5, [r4, #12]
 8004cc0:	6833      	ldreq	r3, [r6, #0]
 8004cc2:	1aed      	subeq	r5, r5, r3
 8004cc4:	68a3      	ldr	r3, [r4, #8]
 8004cc6:	bf0c      	ite	eq
 8004cc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ccc:	2500      	movne	r5, #0
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	bfc4      	itt	gt
 8004cd2:	1a9b      	subgt	r3, r3, r2
 8004cd4:	18ed      	addgt	r5, r5, r3
 8004cd6:	2600      	movs	r6, #0
 8004cd8:	341a      	adds	r4, #26
 8004cda:	42b5      	cmp	r5, r6
 8004cdc:	d11a      	bne.n	8004d14 <_printf_common+0xc8>
 8004cde:	2000      	movs	r0, #0
 8004ce0:	e008      	b.n	8004cf4 <_printf_common+0xa8>
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	4652      	mov	r2, sl
 8004ce6:	4641      	mov	r1, r8
 8004ce8:	4638      	mov	r0, r7
 8004cea:	47c8      	blx	r9
 8004cec:	3001      	adds	r0, #1
 8004cee:	d103      	bne.n	8004cf8 <_printf_common+0xac>
 8004cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cf8:	3501      	adds	r5, #1
 8004cfa:	e7c6      	b.n	8004c8a <_printf_common+0x3e>
 8004cfc:	18e1      	adds	r1, r4, r3
 8004cfe:	1c5a      	adds	r2, r3, #1
 8004d00:	2030      	movs	r0, #48	@ 0x30
 8004d02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004d06:	4422      	add	r2, r4
 8004d08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004d0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004d10:	3302      	adds	r3, #2
 8004d12:	e7c7      	b.n	8004ca4 <_printf_common+0x58>
 8004d14:	2301      	movs	r3, #1
 8004d16:	4622      	mov	r2, r4
 8004d18:	4641      	mov	r1, r8
 8004d1a:	4638      	mov	r0, r7
 8004d1c:	47c8      	blx	r9
 8004d1e:	3001      	adds	r0, #1
 8004d20:	d0e6      	beq.n	8004cf0 <_printf_common+0xa4>
 8004d22:	3601      	adds	r6, #1
 8004d24:	e7d9      	b.n	8004cda <_printf_common+0x8e>
	...

08004d28 <_printf_i>:
 8004d28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d2c:	7e0f      	ldrb	r7, [r1, #24]
 8004d2e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004d30:	2f78      	cmp	r7, #120	@ 0x78
 8004d32:	4691      	mov	r9, r2
 8004d34:	4680      	mov	r8, r0
 8004d36:	460c      	mov	r4, r1
 8004d38:	469a      	mov	sl, r3
 8004d3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004d3e:	d807      	bhi.n	8004d50 <_printf_i+0x28>
 8004d40:	2f62      	cmp	r7, #98	@ 0x62
 8004d42:	d80a      	bhi.n	8004d5a <_printf_i+0x32>
 8004d44:	2f00      	cmp	r7, #0
 8004d46:	f000 80d2 	beq.w	8004eee <_printf_i+0x1c6>
 8004d4a:	2f58      	cmp	r7, #88	@ 0x58
 8004d4c:	f000 80b9 	beq.w	8004ec2 <_printf_i+0x19a>
 8004d50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004d58:	e03a      	b.n	8004dd0 <_printf_i+0xa8>
 8004d5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004d5e:	2b15      	cmp	r3, #21
 8004d60:	d8f6      	bhi.n	8004d50 <_printf_i+0x28>
 8004d62:	a101      	add	r1, pc, #4	@ (adr r1, 8004d68 <_printf_i+0x40>)
 8004d64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d68:	08004dc1 	.word	0x08004dc1
 8004d6c:	08004dd5 	.word	0x08004dd5
 8004d70:	08004d51 	.word	0x08004d51
 8004d74:	08004d51 	.word	0x08004d51
 8004d78:	08004d51 	.word	0x08004d51
 8004d7c:	08004d51 	.word	0x08004d51
 8004d80:	08004dd5 	.word	0x08004dd5
 8004d84:	08004d51 	.word	0x08004d51
 8004d88:	08004d51 	.word	0x08004d51
 8004d8c:	08004d51 	.word	0x08004d51
 8004d90:	08004d51 	.word	0x08004d51
 8004d94:	08004ed5 	.word	0x08004ed5
 8004d98:	08004dff 	.word	0x08004dff
 8004d9c:	08004e8f 	.word	0x08004e8f
 8004da0:	08004d51 	.word	0x08004d51
 8004da4:	08004d51 	.word	0x08004d51
 8004da8:	08004ef7 	.word	0x08004ef7
 8004dac:	08004d51 	.word	0x08004d51
 8004db0:	08004dff 	.word	0x08004dff
 8004db4:	08004d51 	.word	0x08004d51
 8004db8:	08004d51 	.word	0x08004d51
 8004dbc:	08004e97 	.word	0x08004e97
 8004dc0:	6833      	ldr	r3, [r6, #0]
 8004dc2:	1d1a      	adds	r2, r3, #4
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	6032      	str	r2, [r6, #0]
 8004dc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004dcc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e09d      	b.n	8004f10 <_printf_i+0x1e8>
 8004dd4:	6833      	ldr	r3, [r6, #0]
 8004dd6:	6820      	ldr	r0, [r4, #0]
 8004dd8:	1d19      	adds	r1, r3, #4
 8004dda:	6031      	str	r1, [r6, #0]
 8004ddc:	0606      	lsls	r6, r0, #24
 8004dde:	d501      	bpl.n	8004de4 <_printf_i+0xbc>
 8004de0:	681d      	ldr	r5, [r3, #0]
 8004de2:	e003      	b.n	8004dec <_printf_i+0xc4>
 8004de4:	0645      	lsls	r5, r0, #25
 8004de6:	d5fb      	bpl.n	8004de0 <_printf_i+0xb8>
 8004de8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004dec:	2d00      	cmp	r5, #0
 8004dee:	da03      	bge.n	8004df8 <_printf_i+0xd0>
 8004df0:	232d      	movs	r3, #45	@ 0x2d
 8004df2:	426d      	negs	r5, r5
 8004df4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004df8:	4859      	ldr	r0, [pc, #356]	@ (8004f60 <_printf_i+0x238>)
 8004dfa:	230a      	movs	r3, #10
 8004dfc:	e011      	b.n	8004e22 <_printf_i+0xfa>
 8004dfe:	6821      	ldr	r1, [r4, #0]
 8004e00:	6833      	ldr	r3, [r6, #0]
 8004e02:	0608      	lsls	r0, r1, #24
 8004e04:	f853 5b04 	ldr.w	r5, [r3], #4
 8004e08:	d402      	bmi.n	8004e10 <_printf_i+0xe8>
 8004e0a:	0649      	lsls	r1, r1, #25
 8004e0c:	bf48      	it	mi
 8004e0e:	b2ad      	uxthmi	r5, r5
 8004e10:	2f6f      	cmp	r7, #111	@ 0x6f
 8004e12:	4853      	ldr	r0, [pc, #332]	@ (8004f60 <_printf_i+0x238>)
 8004e14:	6033      	str	r3, [r6, #0]
 8004e16:	bf14      	ite	ne
 8004e18:	230a      	movne	r3, #10
 8004e1a:	2308      	moveq	r3, #8
 8004e1c:	2100      	movs	r1, #0
 8004e1e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004e22:	6866      	ldr	r6, [r4, #4]
 8004e24:	60a6      	str	r6, [r4, #8]
 8004e26:	2e00      	cmp	r6, #0
 8004e28:	bfa2      	ittt	ge
 8004e2a:	6821      	ldrge	r1, [r4, #0]
 8004e2c:	f021 0104 	bicge.w	r1, r1, #4
 8004e30:	6021      	strge	r1, [r4, #0]
 8004e32:	b90d      	cbnz	r5, 8004e38 <_printf_i+0x110>
 8004e34:	2e00      	cmp	r6, #0
 8004e36:	d04b      	beq.n	8004ed0 <_printf_i+0x1a8>
 8004e38:	4616      	mov	r6, r2
 8004e3a:	fbb5 f1f3 	udiv	r1, r5, r3
 8004e3e:	fb03 5711 	mls	r7, r3, r1, r5
 8004e42:	5dc7      	ldrb	r7, [r0, r7]
 8004e44:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004e48:	462f      	mov	r7, r5
 8004e4a:	42bb      	cmp	r3, r7
 8004e4c:	460d      	mov	r5, r1
 8004e4e:	d9f4      	bls.n	8004e3a <_printf_i+0x112>
 8004e50:	2b08      	cmp	r3, #8
 8004e52:	d10b      	bne.n	8004e6c <_printf_i+0x144>
 8004e54:	6823      	ldr	r3, [r4, #0]
 8004e56:	07df      	lsls	r7, r3, #31
 8004e58:	d508      	bpl.n	8004e6c <_printf_i+0x144>
 8004e5a:	6923      	ldr	r3, [r4, #16]
 8004e5c:	6861      	ldr	r1, [r4, #4]
 8004e5e:	4299      	cmp	r1, r3
 8004e60:	bfde      	ittt	le
 8004e62:	2330      	movle	r3, #48	@ 0x30
 8004e64:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004e68:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004e6c:	1b92      	subs	r2, r2, r6
 8004e6e:	6122      	str	r2, [r4, #16]
 8004e70:	f8cd a000 	str.w	sl, [sp]
 8004e74:	464b      	mov	r3, r9
 8004e76:	aa03      	add	r2, sp, #12
 8004e78:	4621      	mov	r1, r4
 8004e7a:	4640      	mov	r0, r8
 8004e7c:	f7ff fee6 	bl	8004c4c <_printf_common>
 8004e80:	3001      	adds	r0, #1
 8004e82:	d14a      	bne.n	8004f1a <_printf_i+0x1f2>
 8004e84:	f04f 30ff 	mov.w	r0, #4294967295
 8004e88:	b004      	add	sp, #16
 8004e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e8e:	6823      	ldr	r3, [r4, #0]
 8004e90:	f043 0320 	orr.w	r3, r3, #32
 8004e94:	6023      	str	r3, [r4, #0]
 8004e96:	4833      	ldr	r0, [pc, #204]	@ (8004f64 <_printf_i+0x23c>)
 8004e98:	2778      	movs	r7, #120	@ 0x78
 8004e9a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004e9e:	6823      	ldr	r3, [r4, #0]
 8004ea0:	6831      	ldr	r1, [r6, #0]
 8004ea2:	061f      	lsls	r7, r3, #24
 8004ea4:	f851 5b04 	ldr.w	r5, [r1], #4
 8004ea8:	d402      	bmi.n	8004eb0 <_printf_i+0x188>
 8004eaa:	065f      	lsls	r7, r3, #25
 8004eac:	bf48      	it	mi
 8004eae:	b2ad      	uxthmi	r5, r5
 8004eb0:	6031      	str	r1, [r6, #0]
 8004eb2:	07d9      	lsls	r1, r3, #31
 8004eb4:	bf44      	itt	mi
 8004eb6:	f043 0320 	orrmi.w	r3, r3, #32
 8004eba:	6023      	strmi	r3, [r4, #0]
 8004ebc:	b11d      	cbz	r5, 8004ec6 <_printf_i+0x19e>
 8004ebe:	2310      	movs	r3, #16
 8004ec0:	e7ac      	b.n	8004e1c <_printf_i+0xf4>
 8004ec2:	4827      	ldr	r0, [pc, #156]	@ (8004f60 <_printf_i+0x238>)
 8004ec4:	e7e9      	b.n	8004e9a <_printf_i+0x172>
 8004ec6:	6823      	ldr	r3, [r4, #0]
 8004ec8:	f023 0320 	bic.w	r3, r3, #32
 8004ecc:	6023      	str	r3, [r4, #0]
 8004ece:	e7f6      	b.n	8004ebe <_printf_i+0x196>
 8004ed0:	4616      	mov	r6, r2
 8004ed2:	e7bd      	b.n	8004e50 <_printf_i+0x128>
 8004ed4:	6833      	ldr	r3, [r6, #0]
 8004ed6:	6825      	ldr	r5, [r4, #0]
 8004ed8:	6961      	ldr	r1, [r4, #20]
 8004eda:	1d18      	adds	r0, r3, #4
 8004edc:	6030      	str	r0, [r6, #0]
 8004ede:	062e      	lsls	r6, r5, #24
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	d501      	bpl.n	8004ee8 <_printf_i+0x1c0>
 8004ee4:	6019      	str	r1, [r3, #0]
 8004ee6:	e002      	b.n	8004eee <_printf_i+0x1c6>
 8004ee8:	0668      	lsls	r0, r5, #25
 8004eea:	d5fb      	bpl.n	8004ee4 <_printf_i+0x1bc>
 8004eec:	8019      	strh	r1, [r3, #0]
 8004eee:	2300      	movs	r3, #0
 8004ef0:	6123      	str	r3, [r4, #16]
 8004ef2:	4616      	mov	r6, r2
 8004ef4:	e7bc      	b.n	8004e70 <_printf_i+0x148>
 8004ef6:	6833      	ldr	r3, [r6, #0]
 8004ef8:	1d1a      	adds	r2, r3, #4
 8004efa:	6032      	str	r2, [r6, #0]
 8004efc:	681e      	ldr	r6, [r3, #0]
 8004efe:	6862      	ldr	r2, [r4, #4]
 8004f00:	2100      	movs	r1, #0
 8004f02:	4630      	mov	r0, r6
 8004f04:	f7fb f97c 	bl	8000200 <memchr>
 8004f08:	b108      	cbz	r0, 8004f0e <_printf_i+0x1e6>
 8004f0a:	1b80      	subs	r0, r0, r6
 8004f0c:	6060      	str	r0, [r4, #4]
 8004f0e:	6863      	ldr	r3, [r4, #4]
 8004f10:	6123      	str	r3, [r4, #16]
 8004f12:	2300      	movs	r3, #0
 8004f14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f18:	e7aa      	b.n	8004e70 <_printf_i+0x148>
 8004f1a:	6923      	ldr	r3, [r4, #16]
 8004f1c:	4632      	mov	r2, r6
 8004f1e:	4649      	mov	r1, r9
 8004f20:	4640      	mov	r0, r8
 8004f22:	47d0      	blx	sl
 8004f24:	3001      	adds	r0, #1
 8004f26:	d0ad      	beq.n	8004e84 <_printf_i+0x15c>
 8004f28:	6823      	ldr	r3, [r4, #0]
 8004f2a:	079b      	lsls	r3, r3, #30
 8004f2c:	d413      	bmi.n	8004f56 <_printf_i+0x22e>
 8004f2e:	68e0      	ldr	r0, [r4, #12]
 8004f30:	9b03      	ldr	r3, [sp, #12]
 8004f32:	4298      	cmp	r0, r3
 8004f34:	bfb8      	it	lt
 8004f36:	4618      	movlt	r0, r3
 8004f38:	e7a6      	b.n	8004e88 <_printf_i+0x160>
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	4632      	mov	r2, r6
 8004f3e:	4649      	mov	r1, r9
 8004f40:	4640      	mov	r0, r8
 8004f42:	47d0      	blx	sl
 8004f44:	3001      	adds	r0, #1
 8004f46:	d09d      	beq.n	8004e84 <_printf_i+0x15c>
 8004f48:	3501      	adds	r5, #1
 8004f4a:	68e3      	ldr	r3, [r4, #12]
 8004f4c:	9903      	ldr	r1, [sp, #12]
 8004f4e:	1a5b      	subs	r3, r3, r1
 8004f50:	42ab      	cmp	r3, r5
 8004f52:	dcf2      	bgt.n	8004f3a <_printf_i+0x212>
 8004f54:	e7eb      	b.n	8004f2e <_printf_i+0x206>
 8004f56:	2500      	movs	r5, #0
 8004f58:	f104 0619 	add.w	r6, r4, #25
 8004f5c:	e7f5      	b.n	8004f4a <_printf_i+0x222>
 8004f5e:	bf00      	nop
 8004f60:	080053a1 	.word	0x080053a1
 8004f64:	080053b2 	.word	0x080053b2

08004f68 <__sflush_r>:
 8004f68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f70:	0716      	lsls	r6, r2, #28
 8004f72:	4605      	mov	r5, r0
 8004f74:	460c      	mov	r4, r1
 8004f76:	d454      	bmi.n	8005022 <__sflush_r+0xba>
 8004f78:	684b      	ldr	r3, [r1, #4]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	dc02      	bgt.n	8004f84 <__sflush_r+0x1c>
 8004f7e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	dd48      	ble.n	8005016 <__sflush_r+0xae>
 8004f84:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004f86:	2e00      	cmp	r6, #0
 8004f88:	d045      	beq.n	8005016 <__sflush_r+0xae>
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004f90:	682f      	ldr	r7, [r5, #0]
 8004f92:	6a21      	ldr	r1, [r4, #32]
 8004f94:	602b      	str	r3, [r5, #0]
 8004f96:	d030      	beq.n	8004ffa <__sflush_r+0x92>
 8004f98:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004f9a:	89a3      	ldrh	r3, [r4, #12]
 8004f9c:	0759      	lsls	r1, r3, #29
 8004f9e:	d505      	bpl.n	8004fac <__sflush_r+0x44>
 8004fa0:	6863      	ldr	r3, [r4, #4]
 8004fa2:	1ad2      	subs	r2, r2, r3
 8004fa4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004fa6:	b10b      	cbz	r3, 8004fac <__sflush_r+0x44>
 8004fa8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004faa:	1ad2      	subs	r2, r2, r3
 8004fac:	2300      	movs	r3, #0
 8004fae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004fb0:	6a21      	ldr	r1, [r4, #32]
 8004fb2:	4628      	mov	r0, r5
 8004fb4:	47b0      	blx	r6
 8004fb6:	1c43      	adds	r3, r0, #1
 8004fb8:	89a3      	ldrh	r3, [r4, #12]
 8004fba:	d106      	bne.n	8004fca <__sflush_r+0x62>
 8004fbc:	6829      	ldr	r1, [r5, #0]
 8004fbe:	291d      	cmp	r1, #29
 8004fc0:	d82b      	bhi.n	800501a <__sflush_r+0xb2>
 8004fc2:	4a2a      	ldr	r2, [pc, #168]	@ (800506c <__sflush_r+0x104>)
 8004fc4:	410a      	asrs	r2, r1
 8004fc6:	07d6      	lsls	r6, r2, #31
 8004fc8:	d427      	bmi.n	800501a <__sflush_r+0xb2>
 8004fca:	2200      	movs	r2, #0
 8004fcc:	6062      	str	r2, [r4, #4]
 8004fce:	04d9      	lsls	r1, r3, #19
 8004fd0:	6922      	ldr	r2, [r4, #16]
 8004fd2:	6022      	str	r2, [r4, #0]
 8004fd4:	d504      	bpl.n	8004fe0 <__sflush_r+0x78>
 8004fd6:	1c42      	adds	r2, r0, #1
 8004fd8:	d101      	bne.n	8004fde <__sflush_r+0x76>
 8004fda:	682b      	ldr	r3, [r5, #0]
 8004fdc:	b903      	cbnz	r3, 8004fe0 <__sflush_r+0x78>
 8004fde:	6560      	str	r0, [r4, #84]	@ 0x54
 8004fe0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004fe2:	602f      	str	r7, [r5, #0]
 8004fe4:	b1b9      	cbz	r1, 8005016 <__sflush_r+0xae>
 8004fe6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004fea:	4299      	cmp	r1, r3
 8004fec:	d002      	beq.n	8004ff4 <__sflush_r+0x8c>
 8004fee:	4628      	mov	r0, r5
 8004ff0:	f7ff fbf2 	bl	80047d8 <_free_r>
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	6363      	str	r3, [r4, #52]	@ 0x34
 8004ff8:	e00d      	b.n	8005016 <__sflush_r+0xae>
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	4628      	mov	r0, r5
 8004ffe:	47b0      	blx	r6
 8005000:	4602      	mov	r2, r0
 8005002:	1c50      	adds	r0, r2, #1
 8005004:	d1c9      	bne.n	8004f9a <__sflush_r+0x32>
 8005006:	682b      	ldr	r3, [r5, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d0c6      	beq.n	8004f9a <__sflush_r+0x32>
 800500c:	2b1d      	cmp	r3, #29
 800500e:	d001      	beq.n	8005014 <__sflush_r+0xac>
 8005010:	2b16      	cmp	r3, #22
 8005012:	d11e      	bne.n	8005052 <__sflush_r+0xea>
 8005014:	602f      	str	r7, [r5, #0]
 8005016:	2000      	movs	r0, #0
 8005018:	e022      	b.n	8005060 <__sflush_r+0xf8>
 800501a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800501e:	b21b      	sxth	r3, r3
 8005020:	e01b      	b.n	800505a <__sflush_r+0xf2>
 8005022:	690f      	ldr	r7, [r1, #16]
 8005024:	2f00      	cmp	r7, #0
 8005026:	d0f6      	beq.n	8005016 <__sflush_r+0xae>
 8005028:	0793      	lsls	r3, r2, #30
 800502a:	680e      	ldr	r6, [r1, #0]
 800502c:	bf08      	it	eq
 800502e:	694b      	ldreq	r3, [r1, #20]
 8005030:	600f      	str	r7, [r1, #0]
 8005032:	bf18      	it	ne
 8005034:	2300      	movne	r3, #0
 8005036:	eba6 0807 	sub.w	r8, r6, r7
 800503a:	608b      	str	r3, [r1, #8]
 800503c:	f1b8 0f00 	cmp.w	r8, #0
 8005040:	dde9      	ble.n	8005016 <__sflush_r+0xae>
 8005042:	6a21      	ldr	r1, [r4, #32]
 8005044:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005046:	4643      	mov	r3, r8
 8005048:	463a      	mov	r2, r7
 800504a:	4628      	mov	r0, r5
 800504c:	47b0      	blx	r6
 800504e:	2800      	cmp	r0, #0
 8005050:	dc08      	bgt.n	8005064 <__sflush_r+0xfc>
 8005052:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005056:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800505a:	81a3      	strh	r3, [r4, #12]
 800505c:	f04f 30ff 	mov.w	r0, #4294967295
 8005060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005064:	4407      	add	r7, r0
 8005066:	eba8 0800 	sub.w	r8, r8, r0
 800506a:	e7e7      	b.n	800503c <__sflush_r+0xd4>
 800506c:	dfbffffe 	.word	0xdfbffffe

08005070 <_fflush_r>:
 8005070:	b538      	push	{r3, r4, r5, lr}
 8005072:	690b      	ldr	r3, [r1, #16]
 8005074:	4605      	mov	r5, r0
 8005076:	460c      	mov	r4, r1
 8005078:	b913      	cbnz	r3, 8005080 <_fflush_r+0x10>
 800507a:	2500      	movs	r5, #0
 800507c:	4628      	mov	r0, r5
 800507e:	bd38      	pop	{r3, r4, r5, pc}
 8005080:	b118      	cbz	r0, 800508a <_fflush_r+0x1a>
 8005082:	6a03      	ldr	r3, [r0, #32]
 8005084:	b90b      	cbnz	r3, 800508a <_fflush_r+0x1a>
 8005086:	f7ff fa9f 	bl	80045c8 <__sinit>
 800508a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d0f3      	beq.n	800507a <_fflush_r+0xa>
 8005092:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005094:	07d0      	lsls	r0, r2, #31
 8005096:	d404      	bmi.n	80050a2 <_fflush_r+0x32>
 8005098:	0599      	lsls	r1, r3, #22
 800509a:	d402      	bmi.n	80050a2 <_fflush_r+0x32>
 800509c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800509e:	f7ff fb98 	bl	80047d2 <__retarget_lock_acquire_recursive>
 80050a2:	4628      	mov	r0, r5
 80050a4:	4621      	mov	r1, r4
 80050a6:	f7ff ff5f 	bl	8004f68 <__sflush_r>
 80050aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80050ac:	07da      	lsls	r2, r3, #31
 80050ae:	4605      	mov	r5, r0
 80050b0:	d4e4      	bmi.n	800507c <_fflush_r+0xc>
 80050b2:	89a3      	ldrh	r3, [r4, #12]
 80050b4:	059b      	lsls	r3, r3, #22
 80050b6:	d4e1      	bmi.n	800507c <_fflush_r+0xc>
 80050b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80050ba:	f7ff fb8b 	bl	80047d4 <__retarget_lock_release_recursive>
 80050be:	e7dd      	b.n	800507c <_fflush_r+0xc>

080050c0 <__swbuf_r>:
 80050c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050c2:	460e      	mov	r6, r1
 80050c4:	4614      	mov	r4, r2
 80050c6:	4605      	mov	r5, r0
 80050c8:	b118      	cbz	r0, 80050d2 <__swbuf_r+0x12>
 80050ca:	6a03      	ldr	r3, [r0, #32]
 80050cc:	b90b      	cbnz	r3, 80050d2 <__swbuf_r+0x12>
 80050ce:	f7ff fa7b 	bl	80045c8 <__sinit>
 80050d2:	69a3      	ldr	r3, [r4, #24]
 80050d4:	60a3      	str	r3, [r4, #8]
 80050d6:	89a3      	ldrh	r3, [r4, #12]
 80050d8:	071a      	lsls	r2, r3, #28
 80050da:	d501      	bpl.n	80050e0 <__swbuf_r+0x20>
 80050dc:	6923      	ldr	r3, [r4, #16]
 80050de:	b943      	cbnz	r3, 80050f2 <__swbuf_r+0x32>
 80050e0:	4621      	mov	r1, r4
 80050e2:	4628      	mov	r0, r5
 80050e4:	f000 f82a 	bl	800513c <__swsetup_r>
 80050e8:	b118      	cbz	r0, 80050f2 <__swbuf_r+0x32>
 80050ea:	f04f 37ff 	mov.w	r7, #4294967295
 80050ee:	4638      	mov	r0, r7
 80050f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050f2:	6823      	ldr	r3, [r4, #0]
 80050f4:	6922      	ldr	r2, [r4, #16]
 80050f6:	1a98      	subs	r0, r3, r2
 80050f8:	6963      	ldr	r3, [r4, #20]
 80050fa:	b2f6      	uxtb	r6, r6
 80050fc:	4283      	cmp	r3, r0
 80050fe:	4637      	mov	r7, r6
 8005100:	dc05      	bgt.n	800510e <__swbuf_r+0x4e>
 8005102:	4621      	mov	r1, r4
 8005104:	4628      	mov	r0, r5
 8005106:	f7ff ffb3 	bl	8005070 <_fflush_r>
 800510a:	2800      	cmp	r0, #0
 800510c:	d1ed      	bne.n	80050ea <__swbuf_r+0x2a>
 800510e:	68a3      	ldr	r3, [r4, #8]
 8005110:	3b01      	subs	r3, #1
 8005112:	60a3      	str	r3, [r4, #8]
 8005114:	6823      	ldr	r3, [r4, #0]
 8005116:	1c5a      	adds	r2, r3, #1
 8005118:	6022      	str	r2, [r4, #0]
 800511a:	701e      	strb	r6, [r3, #0]
 800511c:	6962      	ldr	r2, [r4, #20]
 800511e:	1c43      	adds	r3, r0, #1
 8005120:	429a      	cmp	r2, r3
 8005122:	d004      	beq.n	800512e <__swbuf_r+0x6e>
 8005124:	89a3      	ldrh	r3, [r4, #12]
 8005126:	07db      	lsls	r3, r3, #31
 8005128:	d5e1      	bpl.n	80050ee <__swbuf_r+0x2e>
 800512a:	2e0a      	cmp	r6, #10
 800512c:	d1df      	bne.n	80050ee <__swbuf_r+0x2e>
 800512e:	4621      	mov	r1, r4
 8005130:	4628      	mov	r0, r5
 8005132:	f7ff ff9d 	bl	8005070 <_fflush_r>
 8005136:	2800      	cmp	r0, #0
 8005138:	d0d9      	beq.n	80050ee <__swbuf_r+0x2e>
 800513a:	e7d6      	b.n	80050ea <__swbuf_r+0x2a>

0800513c <__swsetup_r>:
 800513c:	b538      	push	{r3, r4, r5, lr}
 800513e:	4b29      	ldr	r3, [pc, #164]	@ (80051e4 <__swsetup_r+0xa8>)
 8005140:	4605      	mov	r5, r0
 8005142:	6818      	ldr	r0, [r3, #0]
 8005144:	460c      	mov	r4, r1
 8005146:	b118      	cbz	r0, 8005150 <__swsetup_r+0x14>
 8005148:	6a03      	ldr	r3, [r0, #32]
 800514a:	b90b      	cbnz	r3, 8005150 <__swsetup_r+0x14>
 800514c:	f7ff fa3c 	bl	80045c8 <__sinit>
 8005150:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005154:	0719      	lsls	r1, r3, #28
 8005156:	d422      	bmi.n	800519e <__swsetup_r+0x62>
 8005158:	06da      	lsls	r2, r3, #27
 800515a:	d407      	bmi.n	800516c <__swsetup_r+0x30>
 800515c:	2209      	movs	r2, #9
 800515e:	602a      	str	r2, [r5, #0]
 8005160:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005164:	81a3      	strh	r3, [r4, #12]
 8005166:	f04f 30ff 	mov.w	r0, #4294967295
 800516a:	e033      	b.n	80051d4 <__swsetup_r+0x98>
 800516c:	0758      	lsls	r0, r3, #29
 800516e:	d512      	bpl.n	8005196 <__swsetup_r+0x5a>
 8005170:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005172:	b141      	cbz	r1, 8005186 <__swsetup_r+0x4a>
 8005174:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005178:	4299      	cmp	r1, r3
 800517a:	d002      	beq.n	8005182 <__swsetup_r+0x46>
 800517c:	4628      	mov	r0, r5
 800517e:	f7ff fb2b 	bl	80047d8 <_free_r>
 8005182:	2300      	movs	r3, #0
 8005184:	6363      	str	r3, [r4, #52]	@ 0x34
 8005186:	89a3      	ldrh	r3, [r4, #12]
 8005188:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800518c:	81a3      	strh	r3, [r4, #12]
 800518e:	2300      	movs	r3, #0
 8005190:	6063      	str	r3, [r4, #4]
 8005192:	6923      	ldr	r3, [r4, #16]
 8005194:	6023      	str	r3, [r4, #0]
 8005196:	89a3      	ldrh	r3, [r4, #12]
 8005198:	f043 0308 	orr.w	r3, r3, #8
 800519c:	81a3      	strh	r3, [r4, #12]
 800519e:	6923      	ldr	r3, [r4, #16]
 80051a0:	b94b      	cbnz	r3, 80051b6 <__swsetup_r+0x7a>
 80051a2:	89a3      	ldrh	r3, [r4, #12]
 80051a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80051a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051ac:	d003      	beq.n	80051b6 <__swsetup_r+0x7a>
 80051ae:	4621      	mov	r1, r4
 80051b0:	4628      	mov	r0, r5
 80051b2:	f000 f84f 	bl	8005254 <__smakebuf_r>
 80051b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051ba:	f013 0201 	ands.w	r2, r3, #1
 80051be:	d00a      	beq.n	80051d6 <__swsetup_r+0x9a>
 80051c0:	2200      	movs	r2, #0
 80051c2:	60a2      	str	r2, [r4, #8]
 80051c4:	6962      	ldr	r2, [r4, #20]
 80051c6:	4252      	negs	r2, r2
 80051c8:	61a2      	str	r2, [r4, #24]
 80051ca:	6922      	ldr	r2, [r4, #16]
 80051cc:	b942      	cbnz	r2, 80051e0 <__swsetup_r+0xa4>
 80051ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80051d2:	d1c5      	bne.n	8005160 <__swsetup_r+0x24>
 80051d4:	bd38      	pop	{r3, r4, r5, pc}
 80051d6:	0799      	lsls	r1, r3, #30
 80051d8:	bf58      	it	pl
 80051da:	6962      	ldrpl	r2, [r4, #20]
 80051dc:	60a2      	str	r2, [r4, #8]
 80051de:	e7f4      	b.n	80051ca <__swsetup_r+0x8e>
 80051e0:	2000      	movs	r0, #0
 80051e2:	e7f7      	b.n	80051d4 <__swsetup_r+0x98>
 80051e4:	20000038 	.word	0x20000038

080051e8 <_sbrk_r>:
 80051e8:	b538      	push	{r3, r4, r5, lr}
 80051ea:	4d06      	ldr	r5, [pc, #24]	@ (8005204 <_sbrk_r+0x1c>)
 80051ec:	2300      	movs	r3, #0
 80051ee:	4604      	mov	r4, r0
 80051f0:	4608      	mov	r0, r1
 80051f2:	602b      	str	r3, [r5, #0]
 80051f4:	f7fb fcf4 	bl	8000be0 <_sbrk>
 80051f8:	1c43      	adds	r3, r0, #1
 80051fa:	d102      	bne.n	8005202 <_sbrk_r+0x1a>
 80051fc:	682b      	ldr	r3, [r5, #0]
 80051fe:	b103      	cbz	r3, 8005202 <_sbrk_r+0x1a>
 8005200:	6023      	str	r3, [r4, #0]
 8005202:	bd38      	pop	{r3, r4, r5, pc}
 8005204:	200002d4 	.word	0x200002d4

08005208 <__swhatbuf_r>:
 8005208:	b570      	push	{r4, r5, r6, lr}
 800520a:	460c      	mov	r4, r1
 800520c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005210:	2900      	cmp	r1, #0
 8005212:	b096      	sub	sp, #88	@ 0x58
 8005214:	4615      	mov	r5, r2
 8005216:	461e      	mov	r6, r3
 8005218:	da0d      	bge.n	8005236 <__swhatbuf_r+0x2e>
 800521a:	89a3      	ldrh	r3, [r4, #12]
 800521c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005220:	f04f 0100 	mov.w	r1, #0
 8005224:	bf14      	ite	ne
 8005226:	2340      	movne	r3, #64	@ 0x40
 8005228:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800522c:	2000      	movs	r0, #0
 800522e:	6031      	str	r1, [r6, #0]
 8005230:	602b      	str	r3, [r5, #0]
 8005232:	b016      	add	sp, #88	@ 0x58
 8005234:	bd70      	pop	{r4, r5, r6, pc}
 8005236:	466a      	mov	r2, sp
 8005238:	f000 f848 	bl	80052cc <_fstat_r>
 800523c:	2800      	cmp	r0, #0
 800523e:	dbec      	blt.n	800521a <__swhatbuf_r+0x12>
 8005240:	9901      	ldr	r1, [sp, #4]
 8005242:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005246:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800524a:	4259      	negs	r1, r3
 800524c:	4159      	adcs	r1, r3
 800524e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005252:	e7eb      	b.n	800522c <__swhatbuf_r+0x24>

08005254 <__smakebuf_r>:
 8005254:	898b      	ldrh	r3, [r1, #12]
 8005256:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005258:	079d      	lsls	r5, r3, #30
 800525a:	4606      	mov	r6, r0
 800525c:	460c      	mov	r4, r1
 800525e:	d507      	bpl.n	8005270 <__smakebuf_r+0x1c>
 8005260:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005264:	6023      	str	r3, [r4, #0]
 8005266:	6123      	str	r3, [r4, #16]
 8005268:	2301      	movs	r3, #1
 800526a:	6163      	str	r3, [r4, #20]
 800526c:	b003      	add	sp, #12
 800526e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005270:	ab01      	add	r3, sp, #4
 8005272:	466a      	mov	r2, sp
 8005274:	f7ff ffc8 	bl	8005208 <__swhatbuf_r>
 8005278:	9f00      	ldr	r7, [sp, #0]
 800527a:	4605      	mov	r5, r0
 800527c:	4639      	mov	r1, r7
 800527e:	4630      	mov	r0, r6
 8005280:	f7ff fb16 	bl	80048b0 <_malloc_r>
 8005284:	b948      	cbnz	r0, 800529a <__smakebuf_r+0x46>
 8005286:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800528a:	059a      	lsls	r2, r3, #22
 800528c:	d4ee      	bmi.n	800526c <__smakebuf_r+0x18>
 800528e:	f023 0303 	bic.w	r3, r3, #3
 8005292:	f043 0302 	orr.w	r3, r3, #2
 8005296:	81a3      	strh	r3, [r4, #12]
 8005298:	e7e2      	b.n	8005260 <__smakebuf_r+0xc>
 800529a:	89a3      	ldrh	r3, [r4, #12]
 800529c:	6020      	str	r0, [r4, #0]
 800529e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052a2:	81a3      	strh	r3, [r4, #12]
 80052a4:	9b01      	ldr	r3, [sp, #4]
 80052a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80052aa:	b15b      	cbz	r3, 80052c4 <__smakebuf_r+0x70>
 80052ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052b0:	4630      	mov	r0, r6
 80052b2:	f000 f81d 	bl	80052f0 <_isatty_r>
 80052b6:	b128      	cbz	r0, 80052c4 <__smakebuf_r+0x70>
 80052b8:	89a3      	ldrh	r3, [r4, #12]
 80052ba:	f023 0303 	bic.w	r3, r3, #3
 80052be:	f043 0301 	orr.w	r3, r3, #1
 80052c2:	81a3      	strh	r3, [r4, #12]
 80052c4:	89a3      	ldrh	r3, [r4, #12]
 80052c6:	431d      	orrs	r5, r3
 80052c8:	81a5      	strh	r5, [r4, #12]
 80052ca:	e7cf      	b.n	800526c <__smakebuf_r+0x18>

080052cc <_fstat_r>:
 80052cc:	b538      	push	{r3, r4, r5, lr}
 80052ce:	4d07      	ldr	r5, [pc, #28]	@ (80052ec <_fstat_r+0x20>)
 80052d0:	2300      	movs	r3, #0
 80052d2:	4604      	mov	r4, r0
 80052d4:	4608      	mov	r0, r1
 80052d6:	4611      	mov	r1, r2
 80052d8:	602b      	str	r3, [r5, #0]
 80052da:	f7fb fc58 	bl	8000b8e <_fstat>
 80052de:	1c43      	adds	r3, r0, #1
 80052e0:	d102      	bne.n	80052e8 <_fstat_r+0x1c>
 80052e2:	682b      	ldr	r3, [r5, #0]
 80052e4:	b103      	cbz	r3, 80052e8 <_fstat_r+0x1c>
 80052e6:	6023      	str	r3, [r4, #0]
 80052e8:	bd38      	pop	{r3, r4, r5, pc}
 80052ea:	bf00      	nop
 80052ec:	200002d4 	.word	0x200002d4

080052f0 <_isatty_r>:
 80052f0:	b538      	push	{r3, r4, r5, lr}
 80052f2:	4d06      	ldr	r5, [pc, #24]	@ (800530c <_isatty_r+0x1c>)
 80052f4:	2300      	movs	r3, #0
 80052f6:	4604      	mov	r4, r0
 80052f8:	4608      	mov	r0, r1
 80052fa:	602b      	str	r3, [r5, #0]
 80052fc:	f7fb fc57 	bl	8000bae <_isatty>
 8005300:	1c43      	adds	r3, r0, #1
 8005302:	d102      	bne.n	800530a <_isatty_r+0x1a>
 8005304:	682b      	ldr	r3, [r5, #0]
 8005306:	b103      	cbz	r3, 800530a <_isatty_r+0x1a>
 8005308:	6023      	str	r3, [r4, #0]
 800530a:	bd38      	pop	{r3, r4, r5, pc}
 800530c:	200002d4 	.word	0x200002d4

08005310 <_init>:
 8005310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005312:	bf00      	nop
 8005314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005316:	bc08      	pop	{r3}
 8005318:	469e      	mov	lr, r3
 800531a:	4770      	bx	lr

0800531c <_fini>:
 800531c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800531e:	bf00      	nop
 8005320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005322:	bc08      	pop	{r3}
 8005324:	469e      	mov	lr, r3
 8005326:	4770      	bx	lr
